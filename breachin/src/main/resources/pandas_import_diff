('', 'environment.yml')
+  - isort>=5.2.1  # check that imports are in the right order

('', '.pep8speaks.yml')
-        - E402,  # module level import not at top of file

('', 'azure-pipelines.yml')
-    displayName: 'Checks on imported code'

('', 'setup.py')
+import argparse

('', 'setup.py')
+import multiprocessing

('', 'setup.py')
-import pkg_resources

('', 'setup.py')
-from distutils.sysconfig import get_config_var

('', 'setup.py')
+import shutil

('', 'setup.py')
-import shutil

('', 'setup.py')
-from distutils.version import LooseVersion

('', 'setup.py')
-from setuptools import setup, Command, find_packages

('', 'setup.py')
+from sysconfig import get_config_vars

('', 'setup.py')
+import numpy

('', 'setup.py')
+from pkg_resources import parse_version

('', 'setup.py')
+from setuptools import (

('', 'setup.py')
+from setuptools.command.build_ext import build_ext as _build_ext

('', 'setup.py')
-    import Cython

('', 'setup.py')
+    from Cython import (

('', 'setup.py')
-# The import of Extension must be after the import of Cython, otherwise

('', 'setup.py')
-from distutils.extension import Extension  # noqa:E402

('', 'setup.py')
-from distutils.command.build import build  # noqa:E402

('', 'setup.py')
-    from Cython.Distutils.old_build_ext import old_build_ext as _build_ext

('', 'setup.py')
-    from distutils.command.build_ext import build_ext as _build_ext

('', 'setup.py')
-            from Cython import Tempita as tempita

('', 'setup.py')
-            import tempita

('', 'setup.py')
+        "include": klib_include,  # due to tokenizer import

('', 'setup.cfg')
-    E402,  # module level import not at top of file

('', 'setup.cfg')
+    # module level import not at top of file

('', 'setup.cfg')
+    # private import across modules

('', 'setup.cfg')
+    # import from pandas._testing

('', 'setup.cfg')
-    np  # avoiding error when importing again numpy or pandas

('', 'setup.cfg')
-ignore = E402,  # module level import not at top of file

('', 'setup.cfg')
+    # avoiding error when importing again numpy or pandas

('', 'setup.cfg')
+    # module level import not at top of file

('', 'setup.cfg')
-combine_as_imports=True

('', 'versioneer.py')
-  `__init__.py` file, so it can be imported at runtime. If your project uses

('', 'versioneer.py')
-  therefore never import `_version.py`), since "setup.py sdist" -based trees

('', 'versioneer.py')
-* 3: add a `import versioneer` to your setup.py, and add the following

('', 'versioneer.py')
-set attributes on the `versioneer` module immediately after import. The new

('', 'versioneer.py')
-version will refuse to run (raising an exception during import) until you

('', 'versioneer.py')
-from __future__ import print_function

('', 'versioneer.py')
-    import configparser

('', 'versioneer.py')
-    import ConfigParser as configparser

('', 'versioneer.py')
+import configparser

('', 'versioneer.py')
-from warnings import catch_warnings

('', 'versioneer.py')
-    import json

('', 'versioneer.py')
-import sys

('', 'versioneer.py')
+import json

('', 'versioneer.py')
-    from distutils.command.build_py import build_py as _build_py

('', 'versioneer.py')
+        from setuptools.command.build_py import build_py as _build_py

('', 'versioneer.py')
+        from distutils.command.build_py import build_py as _build_py

('', 'versioneer.py')
+        from setuptools.command.build_ext import build_ext as _build_ext

('', 'versioneer.py')
+        from distutils.command.build_ext import build_ext as _build_ext

('', 'versioneer.py')
+        from py2exe.distutils_buildexe import py2exe as _py2exe

('', 'versioneer.py')
-from ._version import get_versions

('', 'versioneer.py')
+from pandas._version import get_versions

('ci', 'code_checks.sh')
-# unwanted imports...), we run doctests here (currently some files only), and we

('ci', 'code_checks.sh')
-    MSG='Check import format using isort ' ; echo $MSG

('ci', 'code_checks.sh')
-    # Check for imports from pandas.core.common instead of `import pandas.core.common as com`

('ci', 'code_checks.sh')
-    MSG='Check for non-standard imports' ; echo $MSG

('ci', 'code_checks.sh')
-    invgrep -R --include="*.py*" -E "from pandas.core.common import " pandas

('ci', 'code_checks.sh')
-    # invgrep -R --include="*.py*" -E "from numpy import nan " pandas  # GH#24822 not yet implemented since the offending imports have not all been removed

('ci', 'code_checks.sh')
-    invgrep -R --include="*.py" --include="*.pyx" --include="*.rst" -E "\.\. (autosummary|contents|currentmodule|deprecated|function|image|important|include|ipython|literalinclude|math|module|note|raw|seealso|toctree|versionadded|versionchanged|warning):[^:]" ./pandas ./doc/source

('ci', 'code_checks.sh')
-    invgrep -r -E --include '*.py' '(unittest(\.| import )mock|mock\.Mock\(\)|mock\.patch)' pandas/tests/

('ci', 'code_checks.sh')
-    MSG='Check import. No warnings, and blacklist some optional dependencies' ; echo $MSG

('ci', 'code_checks.sh')
+    MSG='Check import. No warnings, and blocklist some optional dependencies' ; echo $MSG

('ci', 'code_checks.sh')
+import_mods = set(m.split('.')[0] for m in sys.modules) | set(sys.modules)

('ci', 'code_checks.sh')
+mods = blocklist & import_mods

('ci', 'print_skipped.py')
-import sys

('ci', 'print_skipped.py')
-import math

('ci', 'print_skipped.py')
+import os

('ci', 'print_skipped.py')
-    import argparse

('ci', 'run_tests.sh')
-    PANDAS_LOCALE=`python -c 'import pandas; pandas.get_option("display.encoding")'`

('ci/azure', 'posix.yml')
+    - script: source activate pandas-dev && pushd /tmp && python -c "import pandas; pandas.show_versions();" && popd

('ci/azure', 'posix.yml')
-        source activate pandas-dev && pushd /tmp && python -c "import pandas; pandas.show_versions();" && popd

('asv_bench/benchmarks', 'frame_ctor.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'frame_ctor.py')
-from pandas import DataFrame, Series, MultiIndex, Timestamp, date_range

('asv_bench/benchmarks', 'frame_ctor.py')
+import pandas as pd

('asv_bench/benchmarks', 'frame_ctor.py')
+from pandas import (

('asv_bench/benchmarks', 'frame_ctor.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'frame_ctor.py')
-    from pandas.tseries.offsets import Nano, Hour

('asv_bench/benchmarks', 'frame_ctor.py')
+    from pandas.tseries.offsets import (

('asv_bench/benchmarks', 'frame_ctor.py')
-    from pandas.core.datetools import * # noqa

('asv_bench/benchmarks', 'frame_ctor.py')
+    from pandas.core.datetools import (

('asv_bench/benchmarks', 'frame_ctor.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'frame_ctor.py')
+            import torch

('asv_bench/benchmarks', 'frame_ctor.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'gil.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'gil.py')
-from pandas import DataFrame, Series, read_csv, factorize, date_range

('asv_bench/benchmarks', 'gil.py')
-from pandas.core.algorithms import take_1d

('asv_bench/benchmarks', 'gil.py')
+from pandas import (

('asv_bench/benchmarks', 'gil.py')
+from pandas.core.algorithms import take_nd

('asv_bench/benchmarks', 'gil.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'gil.py')
-    from pandas import (rolling_median, rolling_mean, rolling_min, rolling_max,

('asv_bench/benchmarks', 'gil.py')
+    from pandas import (

('asv_bench/benchmarks', 'gil.py')
-    from pandas.util.testing import test_parallel

('asv_bench/benchmarks', 'gil.py')
+    from pandas._testing import test_parallel  # noqa: PDF014

('asv_bench/benchmarks', 'gil.py')
-from .pandas_vb_common import BaseIO

('asv_bench/benchmarks', 'gil.py')
+from .pandas_vb_common import BaseIO  # isort:skip

('asv_bench/benchmarks', 'gil.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'gil.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'algorithms.py')
-from pandas.util import testing as tm

('asv_bench/benchmarks', 'algorithms.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'algorithms.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'algorithms.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'ctors.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'ctors.py')
-from pandas import Series, Index, DatetimeIndex, Timestamp, MultiIndex

('asv_bench/benchmarks', 'ctors.py')
+from pandas import (

('asv_bench/benchmarks', 'ctors.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'ctors.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'ctors.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'join_merge.py')
-import warnings

('asv_bench/benchmarks', 'join_merge.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'join_merge.py')
-from pandas import (DataFrame, Series, Panel, MultiIndex,

('asv_bench/benchmarks', 'join_merge.py')
+from pandas import (

('asv_bench/benchmarks', 'join_merge.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'join_merge.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'join_merge.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'index_object.py')
+import gc

('asv_bench/benchmarks', 'index_object.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'index_object.py')
-from pandas import (Series, date_range, DatetimeIndex, Index, RangeIndex,

('asv_bench/benchmarks', 'index_object.py')
+from pandas import (

('asv_bench/benchmarks', 'index_object.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'index_object.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'index_object.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'plotting.py')
+import importlib

('asv_bench/benchmarks', 'plotting.py')
+import sys

('asv_bench/benchmarks', 'plotting.py')
+import matplotlib

('asv_bench/benchmarks', 'plotting.py')
-from pandas import DataFrame, Series, DatetimeIndex, date_range

('asv_bench/benchmarks', 'plotting.py')
+import pkg_resources

('asv_bench/benchmarks', 'plotting.py')
+from pandas import (

('asv_bench/benchmarks', 'plotting.py')
-import matplotlib

('asv_bench/benchmarks', 'plotting.py')
+from pandas.plotting._core import _get_plot_backend

('asv_bench/benchmarks', 'plotting.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'plotting.py')
+        spec = importlib.machinery.ModuleSpec("my_backend", None)

('asv_bench/benchmarks', 'plotting.py')
+        mod = importlib.util.module_from_spec(spec)

('asv_bench/benchmarks', 'plotting.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'reshape.py')
+from itertools import product

('asv_bench/benchmarks', 'reshape.py')
-from itertools import product

('asv_bench/benchmarks', 'reshape.py')
-from pandas import DataFrame, MultiIndex, date_range, melt, wide_to_long

('asv_bench/benchmarks', 'reshape.py')
+from pandas import (

('asv_bench/benchmarks', 'reshape.py')
+from pandas.api.types import CategoricalDtype

('asv_bench/benchmarks', 'reshape.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'reshape.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'dtypes.py')
-from pandas.api.types import pandas_dtype

('asv_bench/benchmarks', 'dtypes.py')
+import string

('asv_bench/benchmarks', 'dtypes.py')
+import pandas as pd

('asv_bench/benchmarks', 'dtypes.py')
+from pandas import DataFrame

('asv_bench/benchmarks', 'dtypes.py')
+import pandas._testing as tm

('asv_bench/benchmarks', 'dtypes.py')
+from pandas.api.types import (

('asv_bench/benchmarks', 'dtypes.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'dtypes.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'rolling.py')
+import warnings

('asv_bench/benchmarks', 'rolling.py')
+import numpy as np

('asv_bench/benchmarks', 'rolling.py')
-import numpy as np

('asv_bench/benchmarks', 'rolling.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'rolling.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'frame_methods.py')
+import warnings

('asv_bench/benchmarks', 'frame_methods.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'frame_methods.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'frame_methods.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'frame_methods.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'sparse.py')
-import itertools

('asv_bench/benchmarks', 'sparse.py')
-from pandas import (SparseSeries, SparseDataFrame, SparseArray, Series,

('asv_bench/benchmarks', 'sparse.py')
+import pandas as pd

('asv_bench/benchmarks', 'sparse.py')
+from pandas import (

('asv_bench/benchmarks', 'sparse.py')
+from pandas.arrays import SparseArray

('asv_bench/benchmarks', 'sparse.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'sparse.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'attrs_caching.py')
+import pandas as pd

('asv_bench/benchmarks', 'attrs_caching.py')
-    from pandas.util import cache_readonly

('asv_bench/benchmarks', 'attrs_caching.py')
+    from pandas.core.construction import extract_array

('asv_bench/benchmarks', 'attrs_caching.py')
-    from pandas.util.decorators import cache_readonly

('asv_bench/benchmarks', 'attrs_caching.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'attrs_caching.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'inference.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'inference.py')
-from pandas import DataFrame, Series, to_numeric

('asv_bench/benchmarks', 'inference.py')
-from .pandas_vb_common import numeric_dtypes, lib

('asv_bench/benchmarks', 'inference.py')
+from pandas import (

('asv_bench/benchmarks', 'inference.py')
+from .pandas_vb_common import (

('asv_bench/benchmarks', 'inference.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'inference.py')
+    #  does have some run-time imports from outside of _libs

('asv_bench/benchmarks', 'inference.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'timedelta.py')
-import datetime

('asv_bench/benchmarks', 'timedelta.py')
-import numpy as np

('asv_bench/benchmarks', 'categoricals.py')
+import string

('asv_bench/benchmarks', 'categoricals.py')
+import sys

('asv_bench/benchmarks', 'categoricals.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'categoricals.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'categoricals.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'categoricals.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'stat_ops.py')
-            from pandas.core import nanops

('asv_bench/benchmarks', 'stat_ops.py')
-            from pandas.core import nanops

('asv_bench/benchmarks', 'stat_ops.py')
-            from pandas.core import nanops

('asv_bench/benchmarks', 'stat_ops.py')
-            from pandas.core import nanops

('asv_bench/benchmarks', 'stat_ops.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'stat_ops.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'eval.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'eval.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'indexing.py')
+import itertools

('asv_bench/benchmarks', 'indexing.py')
+import string

('asv_bench/benchmarks', 'indexing.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'indexing.py')
-from pandas import (Series, DataFrame, Panel, MultiIndex,

('asv_bench/benchmarks', 'indexing.py')
+from pandas import (

('asv_bench/benchmarks', 'indexing.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'indexing.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'indexing.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'pandas_vb_common.py')
+from importlib import import_module

('asv_bench/benchmarks', 'pandas_vb_common.py')
-from importlib import import_module

('asv_bench/benchmarks', 'pandas_vb_common.py')
+# Compatibility import for the testing module

('asv_bench/benchmarks', 'pandas_vb_common.py')
+    import pandas._testing as tm

('asv_bench/benchmarks', 'pandas_vb_common.py')
+    import pandas.util.testing as tm  # noqa:F401

('asv_bench/benchmarks', 'multiindex_object.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'multiindex_object.py')
-from pandas import date_range, MultiIndex

('asv_bench/benchmarks', 'multiindex_object.py')
+from pandas import (

('asv_bench/benchmarks', 'multiindex_object.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'multiindex_object.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'multiindex_object.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'reindex.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'reindex.py')
-from pandas import (DataFrame, Series, MultiIndex, Index, date_range,

('asv_bench/benchmarks', 'reindex.py')
-from .pandas_vb_common import lib

('asv_bench/benchmarks', 'reindex.py')
+from pandas import (

('asv_bench/benchmarks', 'reindex.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'reindex.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'reindex.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'groupby.py')
-import warnings

('asv_bench/benchmarks', 'groupby.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'groupby.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'groupby.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'groupby.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'strings.py')
-from pandas import Series, DataFrame

('asv_bench/benchmarks', 'strings.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'strings.py')
+from pandas import (

('asv_bench/benchmarks', 'strings.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'series_methods.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks', 'series_methods.py')
-from pandas import Series, date_range, NaT

('asv_bench/benchmarks', 'series_methods.py')
+from pandas import (

('asv_bench/benchmarks', 'series_methods.py')
+from .pandas_vb_common import tm

('asv_bench/benchmarks', 'series_methods.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'series_methods.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'timeseries.py')
-from pandas import to_datetime, date_range, Series, DataFrame, period_range

('asv_bench/benchmarks', 'timeseries.py')
+from pandas import (

('asv_bench/benchmarks', 'timeseries.py')
-    from pandas.plotting._converter import DatetimeConverter

('asv_bench/benchmarks', 'timeseries.py')
+    from pandas.plotting._matplotlib.converter import DatetimeConverter

('asv_bench/benchmarks', 'timeseries.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'timeseries.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks', 'replace.py')
-from .pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks', 'replace.py')
+from .pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks/io', 'hdf.py')
-import warnings

('asv_bench/benchmarks/io', 'hdf.py')
+import numpy as np

('asv_bench/benchmarks/io', 'hdf.py')
-import numpy as np

('asv_bench/benchmarks/io', 'hdf.py')
-from pandas import DataFrame, Panel, date_range, HDFStore, read_hdf

('asv_bench/benchmarks/io', 'hdf.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks/io', 'hdf.py')
+from pandas import (

('asv_bench/benchmarks/io', 'hdf.py')
-from ..pandas_vb_common import BaseIO

('asv_bench/benchmarks/io', 'hdf.py')
+from ..pandas_vb_common import (

('asv_bench/benchmarks/io', 'hdf.py')
-from ..pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks/io', 'hdf.py')
+from ..pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks/io', 'excel.py')
+from io import BytesIO

('asv_bench/benchmarks/io', 'excel.py')
-from pandas import DataFrame, date_range, ExcelWriter, read_excel

('asv_bench/benchmarks/io', 'excel.py')
-from pandas.compat import BytesIO

('asv_bench/benchmarks/io', 'excel.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks/io', 'excel.py')
+from odf.opendocument import OpenDocumentSpreadsheet

('asv_bench/benchmarks/io', 'excel.py')
+from odf.table import (

('asv_bench/benchmarks/io', 'excel.py')
+from odf.text import P

('asv_bench/benchmarks/io', 'excel.py')
+from pandas import (

('asv_bench/benchmarks/io', 'excel.py')
+from ..pandas_vb_common import tm

('asv_bench/benchmarks/io', 'excel.py')
-from ..pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks/io', 'excel.py')
+from ..pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks/io', 'csv.py')
+from io import (

('asv_bench/benchmarks/io', 'csv.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks/io', 'csv.py')
-from pandas import DataFrame, Categorical, date_range, read_csv

('asv_bench/benchmarks/io', 'csv.py')
-from pandas.compat import cStringIO as StringIO

('asv_bench/benchmarks/io', 'csv.py')
-from ..pandas_vb_common import BaseIO

('asv_bench/benchmarks/io', 'csv.py')
+from pandas import (

('asv_bench/benchmarks/io', 'csv.py')
+from ..pandas_vb_common import (

('asv_bench/benchmarks/io', 'csv.py')
-from ..pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks/io', 'csv.py')
+from ..pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks/io', 'pickle.py')
-from pandas import DataFrame, date_range, read_pickle

('asv_bench/benchmarks/io', 'pickle.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks/io', 'pickle.py')
-from ..pandas_vb_common import BaseIO

('asv_bench/benchmarks/io', 'pickle.py')
+from pandas import (

('asv_bench/benchmarks/io', 'pickle.py')
+from ..pandas_vb_common import (

('asv_bench/benchmarks/io', 'pickle.py')
-from ..pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks/io', 'pickle.py')
+from ..pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks/io', 'sql.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks/io', 'sql.py')
-from pandas import DataFrame, date_range, read_sql_query, read_sql_table

('asv_bench/benchmarks/io', 'sql.py')
+from pandas import (

('asv_bench/benchmarks/io', 'sql.py')
+from ..pandas_vb_common import tm

('asv_bench/benchmarks/io', 'sql.py')
-from ..pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks/io', 'sql.py')
+from ..pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks/io', 'stata.py')
-from pandas import DataFrame, date_range, read_stata

('asv_bench/benchmarks/io', 'stata.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks/io', 'stata.py')
-from ..pandas_vb_common import BaseIO

('asv_bench/benchmarks/io', 'stata.py')
+from pandas import (

('asv_bench/benchmarks/io', 'stata.py')
+from ..pandas_vb_common import (

('asv_bench/benchmarks/io', 'stata.py')
-from ..pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks/io', 'stata.py')
+from ..pandas_vb_common import setup  # noqa: F401 isort:skip

('asv_bench/benchmarks/io', 'json.py')
+import sys

('asv_bench/benchmarks/io', 'json.py')
-import pandas.util.testing as tm

('asv_bench/benchmarks/io', 'json.py')
-from pandas import DataFrame, date_range, timedelta_range, concat, read_json

('asv_bench/benchmarks/io', 'json.py')
-from ..pandas_vb_common import BaseIO

('asv_bench/benchmarks/io', 'json.py')
+from pandas import (

('asv_bench/benchmarks/io', 'json.py')
+from ..pandas_vb_common import (

('asv_bench/benchmarks/io', 'json.py')
-from ..pandas_vb_common import setup  # noqa: F401

('asv_bench/benchmarks/io', 'json.py')
+from ..pandas_vb_common import setup  # noqa: F401 isort:skip

('scripts', 'generate_pip_deps_from_conda.py')
-import os

('scripts', 'generate_pip_deps_from_conda.py')
+import pathlib

('scripts', 'generate_pip_deps_from_conda.py')
+import toml

('scripts', 'validate_docstrings.py')
+from __future__ import annotations

('scripts', 'validate_docstrings.py')
+import argparse

('scripts', 'validate_docstrings.py')
+import doctest

('scripts', 'validate_docstrings.py')
+import importlib

('scripts', 'validate_docstrings.py')
+import io

('scripts', 'validate_docstrings.py')
+import json

('scripts', 'validate_docstrings.py')
+import pathlib

('scripts', 'validate_docstrings.py')
+import subprocess

('scripts', 'validate_docstrings.py')
-import json

('scripts', 'validate_docstrings.py')
-import re

('scripts', 'validate_docstrings.py')
-import glob

('scripts', 'validate_docstrings.py')
-import functools

('scripts', 'validate_docstrings.py')
-import collections

('scripts', 'validate_docstrings.py')
-import argparse

('scripts', 'validate_docstrings.py')
-import pydoc

('scripts', 'validate_docstrings.py')
-import inspect

('scripts', 'validate_docstrings.py')
-import importlib

('scripts', 'validate_docstrings.py')
-import doctest

('scripts', 'validate_docstrings.py')
-import flake8.main.application

('scripts', 'validate_docstrings.py')
-    from io import StringIO

('scripts', 'validate_docstrings.py')
-    from cStringIO import StringIO

('scripts', 'validate_docstrings.py')
+import matplotlib.pyplot as plt

('scripts', 'validate_docstrings.py')
+from numpydoc.validate import (

('scripts', 'validate_docstrings.py')
-from pandas.compat import signature

('scripts', 'validate_docstrings.py')
-from numpydoc.docscrape import NumpyDocString

('scripts', 'validate_docstrings.py')
-from pandas.io.formats.printing import pprint_thing

('scripts', 'validate_docstrings.py')
-    'EX04': 'Do not import {imported_library}, as it is imported '

('scripts', 'validate_docstrings.py')
+    "EX04": "Do not import {imported_library}, as it is imported "

('scripts', 'validate_docstrings.py')
-            Object name to import (e.g. pandas.Series.str.upper)

('scripts', 'validate_docstrings.py')
-                obj = importlib.import_module(module)

('scripts', 'validate_docstrings.py')
-            raise ImportError('No module can be imported '

('scripts', 'validate_docstrings.py')
-        content = ''.join(('import numpy as np  # noqa: F401\n',

('scripts', 'validate_docstrings.py')
-                           'import pandas as pd  # noqa: F401\n',

('scripts', 'validate_docstrings.py')
+                "import numpy as np  # noqa: F401\n",

('scripts', 'validate_docstrings.py')
+                "import pandas as pd  # noqa: F401\n",

('scripts', 'validate_docstrings.py')
-        for wrong_import in ('numpy', 'pandas'):

('scripts', 'validate_docstrings.py')
-            if 'import {}'.format(wrong_import) in examples_source_code:

('scripts', 'validate_docstrings.py')
-                errs.append(error('EX04', imported_library=wrong_import))

('scripts', 'validate_docstrings.py')
+        for wrong_import in ("numpy", "pandas"):

('scripts', 'validate_docstrings.py')
+            if f"import {wrong_import}" in examples_source_code:

('scripts', 'validate_docstrings.py')
+                    pandas_error("EX04", imported_library=wrong_import)

('pandas', 'conftest.py')
-from datetime import date, time, timedelta

('pandas', 'conftest.py')
+from collections import abc

('pandas', 'conftest.py')
+from datetime import (

('pandas', 'conftest.py')
+import operator

('pandas', 'conftest.py')
-from dateutil.tz import tzlocal, tzutc

('pandas', 'conftest.py')
+from dateutil.tz import (

('pandas', 'conftest.py')
-from pytz import FixedOffset, utc

('pandas', 'conftest.py')
-from pandas.compat import PY3, u

('pandas', 'conftest.py')
+from pytz import (

('pandas', 'conftest.py')
+from pandas.core.dtypes.dtypes import (

('pandas', 'conftest.py')
+from pandas import (

('pandas', 'conftest.py')
+import pandas._testing as tm

('pandas', 'conftest.py')
+from pandas.core import ops

('pandas', 'conftest.py')
+from pandas.core.indexes.api import (

('pandas', 'conftest.py')
+    import pyarrow as pa

('pandas', 'conftest.py')
-    from scipy import sparse

('pandas', 'conftest.py')
-    pytest.importorskip('IPython', minversion="6.0.0")

('pandas', 'conftest.py')
-    from IPython.core.interactiveshell import InteractiveShell

('pandas', 'conftest.py')
-    from datetime import timezone

('pandas', 'conftest.py')
-    from datetime import timezone

('pandas', 'conftest.py')
+    pytest.importorskip("IPython", minversion="6.0.0")

('pandas', 'conftest.py')
+    from IPython.core.interactiveshell import InteractiveShell

('pandas', 'conftest.py')
+    from traitlets.config import Config  # isort:skip

('pandas', 'conftest.py')
+    from scipy import sparse

('pandas', 'conftest.py')
+    pytest.importorskip("fsspec")

('pandas', 'conftest.py')
+    from fsspec import register_implementation

('pandas', 'conftest.py')
+    from fsspec.implementations.memory import MemoryFileSystem

('pandas', 'conftest.py')
+    from fsspec.registry import _registry as registry

('pandas', '_version.py')
-from pandas.compat import PY3

('pandas', '__init__.py')
+        "Unable to import required dependencies:\n" + "\n".join(missing_dependencies)

('pandas', '__init__.py')
-from pandas.compat.numpy import *

('pandas', '__init__.py')
+from pandas.compat import is_numpy_dev as _is_numpy_dev

('pandas', '__init__.py')
-    from pandas._libs import (hashtable as _hashtable,

('pandas', '__init__.py')
-    module = str(e).replace('cannot import name ', '')

('pandas', '__init__.py')
-    raise ImportError("C extension: {0} not built. If you want to import "

('pandas', '__init__.py')
-from datetime import datetime

('pandas', '__init__.py')
+    from pandas._libs import hashtable as _hashtable, lib as _lib, tslib as _tslib

('pandas', '__init__.py')
+        f"C extension: {module} not built. If you want to import "

('pandas', '__init__.py')
+from pandas._config import (

('pandas', '__init__.py')
-from pandas.core.api import *

('pandas', '__init__.py')
-from pandas.core.sparse.api import *

('pandas', '__init__.py')
-from pandas.tseries.api import *

('pandas', '__init__.py')
-from pandas.core.computation.api import *

('pandas', '__init__.py')
-from pandas.core.reshape.api import *

('pandas', '__init__.py')
+from pandas.core.api import (

('pandas', '__init__.py')
+from pandas.core.arrays.sparse import SparseDtype

('pandas', '__init__.py')
+from pandas.tseries.api import infer_freq

('pandas', '__init__.py')
+from pandas.tseries import offsets

('pandas', '__init__.py')
+from pandas.core.computation.api import eval

('pandas', '__init__.py')
+from pandas.core.reshape.api import (

('pandas', '__init__.py')
+from pandas import api, arrays, errors, io, plotting, testing, tseries

('pandas', '__init__.py')
-from pandas.io.api import *

('pandas', '__init__.py')
+from pandas.io.api import (

('pandas', '__init__.py')
+from pandas.io.json import _json_normalize as json_normalize

('pandas', '__init__.py')
-import pandas.testing

('pandas', '__init__.py')
-import pandas.arrays

('pandas', '__init__.py')
-from ._version import get_versions

('pandas', '__init__.py')
+from pandas._version import get_versions

('pandas', '__init__.py')
+    import warnings

('pandas', '__init__.py')
+        from pandas.core.api import Float64Index, Int64Index, UInt64Index

('pandas', '__init__.py')
+        from datetime import datetime as dt

('pandas', '__init__.py')
+        import numpy as np

('pandas', '__init__.py')
+        from pandas.core.arrays.sparse import SparseArray as _SparseArray

('pandas', 'testing.py')
-from pandas.util.testing import (

('pandas', 'testing.py')
+from pandas._testing import (

('pandas/compat', '__init__.py')
-Key items to import for 2/3 compatible code:

('pandas/compat', '__init__.py')
+import platform

('pandas/compat', '__init__.py')
+import sys

('pandas/compat', '__init__.py')
-import re

('pandas/compat', '__init__.py')
-import functools

('pandas/compat', '__init__.py')
-import itertools

('pandas/compat', '__init__.py')
-from distutils.version import LooseVersion

('pandas/compat', '__init__.py')
-from itertools import product

('pandas/compat', '__init__.py')
-import sys

('pandas/compat', '__init__.py')
-import platform

('pandas/compat', '__init__.py')
-import types

('pandas/compat', '__init__.py')
-from unicodedata import east_asian_width

('pandas/compat', '__init__.py')
-import struct

('pandas/compat', '__init__.py')
-import inspect

('pandas/compat', '__init__.py')
-from collections import namedtuple

('pandas/compat', '__init__.py')
-import collections

('pandas/compat', '__init__.py')
+from pandas._typing import F

('pandas/compat', '__init__.py')
+from pandas.compat.numpy import (

('pandas/compat', '__init__.py')
+from pandas.compat.pyarrow import (

('pandas/compat', '__init__.py')
-    import __builtin__ as builtins

('pandas/compat', '__init__.py')
-    from cStringIO import StringIO as cStringIO

('pandas/compat', '__init__.py')
-    from StringIO import StringIO

('pandas/compat', '__init__.py')
-    import cPickle

('pandas/compat', '__init__.py')
-    import httplib

('pandas/compat', '__init__.py')
-    import builtins

('pandas/compat', '__init__.py')
-    from io import StringIO, BytesIO

('pandas/compat', '__init__.py')
-    import pickle as cPickle

('pandas/compat', '__init__.py')
-    import http.client as httplib

('pandas/compat', '__init__.py')
-from pandas.compat.chainmap import DeepChainMap

('pandas/compat', '__init__.py')
-    from importlib import reload

('pandas/compat', '__init__.py')
-    # import iterator versions of these functions

('pandas/compat', '__init__.py')
-    def import_lzma():

('pandas/compat', '__init__.py')
-        """ import lzma from the std library """

('pandas/compat', '__init__.py')
-        import lzma

('pandas/compat', '__init__.py')
-    def import_lzma():

('pandas/compat', '__init__.py')
-        """ import the backported lzma library

('pandas/compat', '__init__.py')
-        from backports import lzma

('pandas/compat', '__init__.py')
-from collections import OrderedDict, Counter

('pandas/compat', '__init__.py')
-import dateutil

('pandas/compat', '__init__.py')
-from dateutil import parser as _date_parser

('pandas/compat', '__init__.py')
-    import typing

('pandas/compat', '__init__.py')
+        If the `lzma` module was not imported correctly, or didn't exist.

('pandas/compat', '__init__.py')
+        import lzma

('pandas/compat', 'chainmap.py')
-    from collections import ChainMap

('pandas/compat', 'chainmap.py')
-    from pandas.compat.chainmap_impl import ChainMap

('pandas/compat', 'chainmap.py')
+from typing import (

('pandas/compat', 'pickle_compat.py')
+from __future__ import annotations

('pandas/compat', 'pickle_compat.py')
+import contextlib

('pandas/compat', 'pickle_compat.py')
+import io

('pandas/compat', 'pickle_compat.py')
-import sys

('pandas/compat', 'pickle_compat.py')
-from pandas.compat import string_types, u  # noqa

('pandas/compat', 'pickle_compat.py')
-import pandas  # noqa

('pandas/compat', 'pickle_compat.py')
-from pandas import Index, compat

('pandas/compat', 'pickle_compat.py')
+from typing import TYPE_CHECKING

('pandas/compat', 'pickle_compat.py')
+import warnings

('pandas/compat', 'pickle_compat.py')
+import numpy as np

('pandas/compat', 'pickle_compat.py')
+from pandas._libs.arrays import NDArrayBacked

('pandas/compat', 'pickle_compat.py')
+from pandas._libs.tslibs import BaseOffset

('pandas/compat', 'pickle_compat.py')
+from pandas import Index

('pandas/compat', 'pickle_compat.py')
+from pandas.core.arrays import (

('pandas/compat', 'pickle_compat.py')
+from pandas.core.internals import BlockManager

('pandas/compat', 'pickle_compat.py')
+    from pandas import (

('pandas/compat', 'pickle_compat.py')
+        from pandas import Series

('pandas/compat', 'pickle_compat.py')
+        from pandas import DataFrame

('pandas/compat', 'pickle_compat.py')
-            __import__(module)

('pandas/compat', 'pickle_compat.py')
+    fix_imports: bool = True,

('pandas/compat', 'pickle_compat.py')
+        fd, fix_imports=fix_imports, encoding=encoding, errors=errors

('pandas/compat/numpy', '__init__.py')
+import numpy as np

('pandas/compat/numpy', '__init__.py')
-import re

('pandas/compat/numpy', '__init__.py')
-import numpy as np

('pandas/compat/numpy', '__init__.py')
-from distutils.version import LooseVersion

('pandas/compat/numpy', '__init__.py')
-from pandas.compat import string_types, string_and_binary_types

('pandas/compat/numpy', '__init__.py')
+from pandas.util.version import Version

('pandas/compat/numpy', 'function.py')
+from __future__ import annotations

('pandas/compat/numpy', 'function.py')
+from typing import Any

('pandas/compat/numpy', 'function.py')
-from pandas.compat import OrderedDict

('pandas/compat/numpy', 'function.py')
+from pandas._libs.lib import (

('pandas/compat/numpy', 'function.py')
-from pandas.core.dtypes.common import is_bool, is_integer

('pandas/core', 'accessor.py')
+from __future__ import annotations

('pandas/core', 'accessor.py')
-from pandas.util._decorators import Appender

('pandas/core', 'accessor.py')
+from pandas.util._decorators import doc

('pandas/core', 'accessor.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'accessor.py')
+        import pandas as pd

('pandas/core', 'accessor.py')
-    import pandas as pd

('pandas/core', 'nanops.py')
-from distutils.version import LooseVersion

('pandas/core', 'nanops.py')
+from __future__ import annotations

('pandas/core', 'nanops.py')
+from typing import (

('pandas/core', 'nanops.py')
-from pandas._libs import iNaT, lib, tslibs

('pandas/core', 'nanops.py')
-import pandas.compat as compat

('pandas/core', 'nanops.py')
-from pandas.core.dtypes.cast import _int64_max, maybe_upcast_putmask

('pandas/core', 'nanops.py')
+from pandas._config import get_option

('pandas/core', 'nanops.py')
+from pandas._libs import (

('pandas/core', 'nanops.py')
+from pandas._typing import (

('pandas/core', 'nanops.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/core', 'nanops.py')
-from pandas.core.dtypes.dtypes import DatetimeTZDtype

('pandas/core', 'nanops.py')
-from pandas.core.dtypes.missing import isna, na_value_for_dtype, notna

('pandas/core', 'nanops.py')
-import pandas.core.common as com

('pandas/core', 'nanops.py')
-from pandas.core.config import get_option

('pandas/core', 'nanops.py')
-    import bottleneck as bn

('pandas/core', 'nanops.py')
+from pandas.core.dtypes.dtypes import PeriodDtype

('pandas/core', 'nanops.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'nanops.py')
+from pandas.core.construction import extract_array

('pandas/core', 'nanops.py')
+bn = import_optional_dependency("bottleneck", errors="warn")

('pandas/core', 'nanops.py')
+    #  with scalar fill_value.  This guarantee is important for the

('pandas/core', 'nanops.py')
-        from scipy.stats import kendalltau, spearmanr

('pandas/core', 'nanops.py')
+        from scipy.stats import kendalltau

('pandas/core', 'nanops.py')
+        from scipy.stats import spearmanr

('pandas/core', 'missing.py')
-from distutils.version import LooseVersion

('pandas/core', 'missing.py')
-import operator

('pandas/core', 'missing.py')
+from __future__ import annotations

('pandas/core', 'missing.py')
+from functools import (

('pandas/core', 'missing.py')
+from typing import (

('pandas/core', 'missing.py')
-from pandas._libs import algos, lib

('pandas/core', 'missing.py')
-from pandas.compat import range, string_types

('pandas/core', 'missing.py')
-from pandas.core.dtypes.cast import infer_dtype_from_array

('pandas/core', 'missing.py')
+from pandas._libs import (

('pandas/core', 'missing.py')
+from pandas._typing import (

('pandas/core', 'missing.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/core', 'missing.py')
+from pandas.core.dtypes.cast import infer_dtype_from

('pandas/core', 'missing.py')
-from pandas.core.dtypes.missing import isna

('pandas/core', 'missing.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'missing.py')
+    from pandas import Index

('pandas/core', 'missing.py')
-    from pandas import Series

('pandas/core', 'missing.py')
-        from scipy import interpolate

('pandas/core', 'missing.py')
-        # TODO: Why is DatetimeIndex being imported here?

('pandas/core', 'missing.py')
-        from pandas import DatetimeIndex  # noqa

('pandas/core', 'missing.py')
+    import_optional_dependency("scipy", extra=extra)

('pandas/core', 'missing.py')
+    from scipy import interpolate

('pandas/core', 'missing.py')
-            from scipy.interpolate import Akima1DInterpolator  # noqa

('pandas/core', 'missing.py')
-    import scipy

('pandas/core', 'missing.py')
+    from scipy import interpolate

('pandas/core', 'algorithms.py')
-from __future__ import division

('pandas/core', 'algorithms.py')
+from __future__ import annotations

('pandas/core', 'algorithms.py')
+import operator

('pandas/core', 'algorithms.py')
-from warnings import catch_warnings, simplefilter, warn

('pandas/core', 'algorithms.py')
+from typing import (

('pandas/core', 'algorithms.py')
+from warnings import warn

('pandas/core', 'algorithms.py')
-from pandas._libs import algos, hashtable as htable, lib

('pandas/core', 'algorithms.py')
-from pandas._libs.tslib import iNaT

('pandas/core', 'algorithms.py')
-from pandas.util._decorators import Appender, Substitution, deprecate_kwarg

('pandas/core', 'algorithms.py')
+from pandas._libs import (

('pandas/core', 'algorithms.py')
+from pandas._typing import (

('pandas/core', 'algorithms.py')
+from pandas.util._decorators import doc

('pandas/core', 'algorithms.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'algorithms.py')
-from pandas.core.dtypes.generic import ABCIndex, ABCIndexClass, ABCSeries

('pandas/core', 'algorithms.py')
-from pandas.core.dtypes.missing import isna, na_value_for_dtype

('pandas/core', 'algorithms.py')
-from pandas.core import common as com

('pandas/core', 'algorithms.py')
+from pandas.core.dtypes.concat import concat_compat

('pandas/core', 'algorithms.py')
+from pandas.core.dtypes.dtypes import (

('pandas/core', 'algorithms.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'algorithms.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'algorithms.py')
+from pandas.core.array_algos.take import take_nd

('pandas/core', 'algorithms.py')
+from pandas.core.construction import (

('pandas/core', 'algorithms.py')
+from pandas.core.indexers import validate_indices

('pandas/core', 'algorithms.py')
+    from pandas._typing import (

('pandas/core', 'algorithms.py')
+    from pandas import (

('pandas/core', 'algorithms.py')
+    from pandas.core.arrays import (

('pandas/core', 'algorithms.py')
-            from pandas import PeriodIndex

('pandas/core', 'algorithms.py')
-            from pandas import TimedeltaIndex

('pandas/core', 'algorithms.py')
-            from pandas import DatetimeIndex

('pandas/core', 'algorithms.py')
-    from pandas import Index

('pandas/core', 'algorithms.py')
-        from pandas import Series

('pandas/core', 'algorithms.py')
+            from pandas import Index

('pandas/core', 'algorithms.py')
-        from pandas.core.sorting import safe_sort

('pandas/core', 'algorithms.py')
-    from pandas.core.series import Series, Index

('pandas/core', 'algorithms.py')
+    from pandas.core.series import Series

('pandas/core', 'algorithms.py')
+        from pandas.core.reshape.tile import cut

('pandas/core', 'algorithms.py')
-            from pandas.core.reshape.tile import cut

('pandas/core', 'algorithms.py')
-    from pandas import Series

('pandas/core', 'algorithms.py')
-    >>> from scipy import stats

('pandas/core', 'algorithms.py')
+        from pandas.core.reshape.concat import concat

('pandas/core', 'algorithms.py')
+            from pandas.core.arrays import BaseMaskedArray

('pandas/core', 'algorithms.py')
-        from pandas import Int64Index

('pandas/core', 'algorithms.py')
+        from pandas.core.api import Int64Index

('pandas/core', 'algorithms.py')
-    from pandas.core.indexing import validate_indices

('pandas/core', 'algorithms.py')
-        from pandas import TimedeltaIndex

('pandas/core', 'algorithms.py')
+    from pandas.core.internals.construction import to_arrays

('pandas/core', 'algorithms.py')
+    from pandas.core.sorting import lexsort_indexer

('pandas/core', 'resample.py')
+from __future__ import annotations

('pandas/core', 'resample.py')
+from typing import (

('pandas/core', 'resample.py')
-from pandas._libs.tslibs import NaT, Timestamp

('pandas/core', 'resample.py')
-from pandas._libs.tslibs.frequencies import is_subperiod, is_superperiod

('pandas/core', 'resample.py')
-from pandas._libs.tslibs.period import IncompatibleFrequency

('pandas/core', 'resample.py')
-import pandas.compat as compat

('pandas/core', 'resample.py')
+from pandas._libs.tslibs import (

('pandas/core', 'resample.py')
+from pandas._typing import (

('pandas/core', 'resample.py')
-from pandas.util._decorators import Appender, Substitution

('pandas/core', 'resample.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries

('pandas/core', 'resample.py')
-import pandas as pd

('pandas/core', 'resample.py')
+from pandas.util._decorators import (

('pandas/core', 'resample.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'resample.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'resample.py')
-from pandas.core.generic import _shared_docs

('pandas/core', 'resample.py')
-from pandas.core.groupby.base import GroupByMixin

('pandas/core', 'resample.py')
-from pandas.core.groupby.generic import PanelGroupBy, SeriesGroupBy

('pandas/core', 'resample.py')
+from pandas.core.apply import ResamplerWindowApply

('pandas/core', 'resample.py')
+from pandas.core.base import (

('pandas/core', 'resample.py')
+import pandas.core.common as com

('pandas/core', 'resample.py')
+from pandas.core.generic import (

('pandas/core', 'resample.py')
+from pandas.core.groupby.generic import SeriesGroupBy

('pandas/core', 'resample.py')
-from pandas.core.indexes.datetimes import DatetimeIndex, date_range

('pandas/core', 'resample.py')
-from pandas.core.indexes.period import PeriodIndex

('pandas/core', 'resample.py')
-from pandas.core.indexes.timedeltas import TimedeltaIndex, timedelta_range

('pandas/core', 'resample.py')
-from pandas.tseries.frequencies import to_offset

('pandas/core', 'resample.py')
+from pandas.core.indexes.api import Index

('pandas/core', 'resample.py')
+from pandas.core.indexes.datetimes import (

('pandas/core', 'resample.py')
+from pandas.core.indexes.period import (

('pandas/core', 'resample.py')
+from pandas.core.indexes.timedeltas import (

('pandas/core', 'resample.py')
+from pandas.tseries.frequencies import (

('pandas/core', 'resample.py')
+    from pandas import (

('pandas/core', 'resample.py')
+            from pandas import Series

('pandas/core', 'resample.py')
+                from pandas import DataFrame

('pandas/core', 'resample.py')
-    from pandas.core.api import Series, DataFrame

('pandas/core', 'index.py')
-from pandas.core.indexes.api import *

('pandas/core', 'index.py')
-from pandas.core.indexes.multi import _sparsify

('pandas/core', 'index.py')
+import warnings

('pandas/core', 'index.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'index.py')
+from pandas.core.indexes.api import (  # noqa:F401

('pandas/core', 'index.py')
+from pandas.core.indexes.multi import sparsify_labels  # noqa:F401

('pandas/core', 'config_init.py')
-module is imported, register them here rather then in the module.

('pandas/core', 'config_init.py')
-import pandas.core.config as cf

('pandas/core', 'config_init.py')
-from pandas.core.config import (

('pandas/core', 'config_init.py')
-from pandas.io.formats.console import detect_console_encoding

('pandas/core', 'config_init.py')
-from pandas.io.formats.terminal import is_terminal

('pandas/core', 'config_init.py')
+module is imported, register them here rather than in the module.

('pandas/core', 'config_init.py')
+import os

('pandas/core', 'config_init.py')
+from typing import Callable

('pandas/core', 'config_init.py')
+import warnings

('pandas/core', 'config_init.py')
+import pandas._config.config as cf

('pandas/core', 'config_init.py')
+from pandas._config.config import (

('pandas/core', 'config_init.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'config_init.py')
+    from pandas.core.util import numba_

('pandas/core', 'config_init.py')
-    from pandas.io.formats.printing import _enable_data_resource_formatter

('pandas/core', 'config_init.py')
+    from pandas.io.formats.printing import enable_data_resource_formatter

('pandas/core', 'config_init.py')
+    to be set before pandas is imported).

('pandas/core', 'config_init.py')
+    from pandas.plotting._core import _get_plot_backend

('pandas/core', 'config_init.py')
-    from pandas.plotting import register_matplotlib_converters

('pandas/core', 'config_init.py')
-    from pandas.plotting import deregister_matplotlib_converters

('pandas/core', 'config_init.py')
+    from pandas.plotting import (

('pandas/core', 'generic.py')
+from __future__ import annotations

('pandas/core', 'generic.py')
-from textwrap import dedent

('pandas/core', 'generic.py')
+import pickle

('pandas/core', 'generic.py')
+import re

('pandas/core', 'generic.py')
+from typing import (

('pandas/core', 'generic.py')
-from pandas._libs import Timestamp, iNaT, properties

('pandas/core', 'generic.py')
-import pandas.compat as compat

('pandas/core', 'generic.py')
-from pandas.compat import (

('pandas/core', 'generic.py')
+from pandas._config import config

('pandas/core', 'generic.py')
+from pandas._libs import lib

('pandas/core', 'generic.py')
+from pandas._libs.tslibs import (

('pandas/core', 'generic.py')
+from pandas._typing import (

('pandas/core', 'generic.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/core', 'generic.py')
-from pandas.errors import AbstractMethodError

('pandas/core', 'generic.py')
+from pandas.errors import (

('pandas/core', 'generic.py')
-from pandas.util._validators import validate_bool_kwarg, validate_fillna_kwargs

('pandas/core', 'generic.py')
-from pandas.core.dtypes.cast import maybe_promote, maybe_upcast_putmask

('pandas/core', 'generic.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'generic.py')
+from pandas.util._validators import (

('pandas/core', 'generic.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCPanel, ABCSeries

('pandas/core', 'generic.py')
-from pandas.core.dtypes.inference import is_hashable

('pandas/core', 'generic.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core', 'generic.py')
-import pandas as pd

('pandas/core', 'generic.py')
-from pandas.core import config, missing, nanops

('pandas/core', 'generic.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'generic.py')
+from pandas.core.dtypes.inference import (

('pandas/core', 'generic.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'generic.py')
+from pandas.core import (

('pandas/core', 'generic.py')
-from pandas.core.base import PandasObject, SelectionMixin

('pandas/core', 'generic.py')
+from pandas.core.array_algos.replace import should_use_regex

('pandas/core', 'generic.py')
+from pandas.core.arrays import ExtensionArray

('pandas/core', 'generic.py')
+from pandas.core.base import PandasObject

('pandas/core', 'generic.py')
-from pandas.core.index import (

('pandas/core', 'generic.py')
-from pandas.core.indexes.datetimes import DatetimeIndex

('pandas/core', 'generic.py')
-from pandas.core.indexes.period import Period, PeriodIndex

('pandas/core', 'generic.py')
-import pandas.core.indexing as indexing

('pandas/core', 'generic.py')
-from pandas.core.internals import BlockManager

('pandas/core', 'generic.py')
-from pandas.core.ops import _align_method_FRAME

('pandas/core', 'generic.py')
-from pandas.io.formats.format import DataFrameFormatter, format_percentiles

('pandas/core', 'generic.py')
+from pandas.core.construction import (

('pandas/core', 'generic.py')
+from pandas.core.describe import describe_ndframe

('pandas/core', 'generic.py')
+from pandas.core.flags import Flags

('pandas/core', 'generic.py')
+from pandas.core.indexes.api import (

('pandas/core', 'generic.py')
+from pandas.core.internals import (

('pandas/core', 'generic.py')
+from pandas.core.internals.construction import mgr_to_mgr

('pandas/core', 'generic.py')
+from pandas.core.missing import find_valid_index

('pandas/core', 'generic.py')
+from pandas.core.ops import align_method_FRAME

('pandas/core', 'generic.py')
+from pandas.core.reshape.concat import concat

('pandas/core', 'generic.py')
+import pandas.core.sample as sample

('pandas/core', 'generic.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/core', 'generic.py')
+from pandas.core.sorting import get_indexer_indexer

('pandas/core', 'generic.py')
+from pandas.core.window import (

('pandas/core', 'generic.py')
+from pandas.io.formats import format as fmt

('pandas/core', 'generic.py')
+from pandas.io.formats.format import (

('pandas/core', 'generic.py')
-from pandas.tseries.frequencies import to_offset

('pandas/core', 'generic.py')
+    from pandas._libs.tslibs import BaseOffset

('pandas/core', 'generic.py')
+    from pandas.core.frame import DataFrame

('pandas/core', 'generic.py')
+    from pandas.core.indexers.objects import BaseIndexer

('pandas/core', 'generic.py')
+    from pandas.core.resample import Resampler

('pandas/core', 'generic.py')
+    from pandas.core.series import Series

('pandas/core', 'generic.py')
+        from pandas.core.computation.parsing import clean_column_name

('pandas/core', 'generic.py')
+        from pandas.core.computation.parsing import clean_column_name

('pandas/core', 'generic.py')
+        >>> import json

('pandas/core', 'generic.py')
-        >>> import os

('pandas/core', 'generic.py')
-        from pandas.io import packers

('pandas/core', 'generic.py')
-        >>> import os

('pandas/core', 'generic.py')
-            import xarray

('pandas/core', 'generic.py')
+        xarray = import_optional_dependency("xarray")

('pandas/core', 'generic.py')
+        >>> from pathlib import Path  # doctest: +SKIP

('pandas/core', 'generic.py')
+        >>> import os  # doctest: +SKIP

('pandas/core', 'generic.py')
-        from pandas.io.formats.csvs import CSVFormatter

('pandas/core', 'generic.py')
+        >>> from natsort import index_natsorted

('pandas/core', 'generic.py')
-        import re

('pandas/core', 'generic.py')
-        from pandas import Series

('pandas/core', 'generic.py')
-        from pandas import Series

('pandas/core', 'generic.py')
-        from pandas import Series

('pandas/core', 'generic.py')
-        from pandas import Series

('pandas/core', 'generic.py')
+        >>> from pandas.api.types import CategoricalDtype

('pandas/core', 'generic.py')
+            from pandas import Series

('pandas/core', 'generic.py')
-        from pandas import DataFrame

('pandas/core', 'generic.py')
-                    from pandas import Series

('pandas/core', 'generic.py')
-            from pandas import to_datetime

('pandas/core', 'generic.py')
-                    from pandas import Series

('pandas/core', 'generic.py')
-                from pandas import DataFrame

('pandas/core', 'generic.py')
-                from pandas import Series

('pandas/core', 'generic.py')
-        from pandas.core.groupby.groupby import groupby

('pandas/core', 'generic.py')
-        from pandas.core.resample import (resample,

('pandas/core', 'generic.py')
+        >>> from pandas.tseries.frequencies import to_offset

('pandas/core', 'generic.py')
+        from pandas.core.resample import get_resampler

('pandas/core', 'generic.py')
+        from pandas.core.reshape.concat import concat

('pandas/core', 'generic.py')
-        from pandas import DataFrame, Series

('pandas/core', 'generic.py')
-        from pandas.core import window as rwindow

('pandas/core', 'series.py')
-from __future__ import division

('pandas/core', 'series.py')
+from __future__ import annotations

('pandas/core', 'series.py')
+from typing import (

('pandas/core', 'series.py')
+import weakref

('pandas/core', 'series.py')
-from pandas._libs import iNaT, index as libindex, lib, tslibs

('pandas/core', 'series.py')
-import pandas.compat as compat

('pandas/core', 'series.py')
-from pandas.compat import PY36, OrderedDict, StringIO, u, zip

('pandas/core', 'series.py')
+from pandas._config import get_option

('pandas/core', 'series.py')
+from pandas._libs import (

('pandas/core', 'series.py')
+from pandas._libs.lib import no_default

('pandas/core', 'series.py')
+from pandas._typing import (

('pandas/core', 'series.py')
-from pandas.util._decorators import Appender, Substitution, deprecate

('pandas/core', 'series.py')
-from pandas.util._validators import validate_bool_kwarg

('pandas/core', 'series.py')
+from pandas.errors import InvalidIndexError

('pandas/core', 'series.py')
+from pandas.util._decorators import (

('pandas/core', 'series.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'series.py')
+from pandas.util._validators import (

('pandas/core', 'series.py')
+from pandas.core.dtypes.cast import (

('pandas/core', 'series.py')
-from pandas.core.dtypes.generic import (

('pandas/core', 'series.py')
+from pandas.core.dtypes.generic import ABCDataFrame

('pandas/core', 'series.py')
+from pandas.core.dtypes.inference import is_hashable

('pandas/core', 'series.py')
-from pandas.core import algorithms, base, generic, nanops, ops

('pandas/core', 'series.py')
+from pandas.core import (

('pandas/core', 'series.py')
-from pandas.core.arrays import ExtensionArray, SparseArray

('pandas/core', 'series.py')
-from pandas.core.arrays.categorical import Categorical, CategoricalAccessor

('pandas/core', 'series.py')
+from pandas.core.apply import SeriesApply

('pandas/core', 'series.py')
+from pandas.core.arrays import ExtensionArray

('pandas/core', 'series.py')
+from pandas.core.arrays.categorical import CategoricalAccessor

('pandas/core', 'series.py')
-from pandas.core.config import get_option

('pandas/core', 'series.py')
-from pandas.core.index import (

('pandas/core', 'series.py')
+from pandas.core.construction import (

('pandas/core', 'series.py')
+from pandas.core.generic import NDFrame

('pandas/core', 'series.py')
+from pandas.core.indexers import (

('pandas/core', 'series.py')
+from pandas.core.indexes.api import (

('pandas/core', 'series.py')
-from pandas.core.indexes.datetimes import DatetimeIndex

('pandas/core', 'series.py')
-from pandas.core.indexes.period import PeriodIndex

('pandas/core', 'series.py')
-from pandas.core.indexes.timedeltas import TimedeltaIndex

('pandas/core', 'series.py')
-from pandas.core.indexing import check_bool_indexer, maybe_convert_indices

('pandas/core', 'series.py')
-from pandas.core.internals import SingleBlockManager

('pandas/core', 'series.py')
-from pandas.core.internals.construction import sanitize_array

('pandas/core', 'series.py')
+from pandas.core.indexing import (

('pandas/core', 'series.py')
+from pandas.core.internals import (

('pandas/core', 'series.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/core', 'series.py')
+from pandas.core.sorting import (

('pandas/core', 'series.py')
-from pandas.io.formats.terminal import get_terminal_size

('pandas/core', 'series.py')
-import pandas.plotting._core as gfx

('pandas/core', 'series.py')
+from pandas.io.formats.info import (

('pandas/core', 'series.py')
+import pandas.plotting

('pandas/core', 'series.py')
+    from pandas._typing import (

('pandas/core', 'series.py')
+    from pandas.core.frame import DataFrame

('pandas/core', 'series.py')
+    from pandas.core.groupby.generic import SeriesGroupBy

('pandas/core', 'series.py')
+    from pandas.core.resample import Resampler

('pandas/core', 'series.py')
-            from pandas.core.sparse.series import SparseSeries

('pandas/core', 'series.py')
-        from pandas.core.sparse.series import SparseSeries

('pandas/core', 'series.py')
+        from pandas.core.groupby.generic import SeriesGroupBy

('pandas/core', 'series.py')
-        from pandas.core.frame import DataFrame

('pandas/core', 'series.py')
-            from pandas.core.sorting import lexsort_indexer

('pandas/core', 'series.py')
-            from pandas.core.sorting import nargsort

('pandas/core', 'series.py')
-            from pandas.core.frame import DataFrame

('pandas/core', 'series.py')
-        from pandas.core.frame import DataFrame

('pandas/core', 'sorting.py')
+from __future__ import annotations

('pandas/core', 'sorting.py')
+from collections import defaultdict

('pandas/core', 'sorting.py')
+from typing import (

('pandas/core', 'sorting.py')
-from pandas._libs import algos, hashtable, lib

('pandas/core', 'sorting.py')
+from pandas._libs import (

('pandas/core', 'sorting.py')
-from pandas.compat import PY3, long, string_types

('pandas/core', 'sorting.py')
-from pandas.core.dtypes.cast import infer_dtype_from_array

('pandas/core', 'sorting.py')
+from pandas._typing import (

('pandas/core', 'sorting.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'sorting.py')
-import pandas.core.algorithms as algorithms

('pandas/core', 'sorting.py')
+from pandas.core.construction import extract_array

('pandas/core', 'sorting.py')
+    from pandas import MultiIndex

('pandas/core', 'sorting.py')
+    from pandas.core.indexes.base import Index

('pandas/core', 'sorting.py')
+    from pandas.core.indexes.api import Index

('pandas/core', 'sorting.py')
-    from pandas import Index

('pandas/core', 'api.py')
+from pandas._libs import (

('pandas/core', 'api.py')
+from pandas._libs.missing import NA

('pandas/core', 'api.py')
-import numpy as np

('pandas/core', 'api.py')
+from pandas.core.dtypes.dtypes import (

('pandas/core', 'api.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'api.py')
+from pandas.core.algorithms import (

('pandas/core', 'api.py')
+from pandas.core.arrays import Categorical

('pandas/core', 'api.py')
+from pandas.core.arrays.boolean import BooleanDtype

('pandas/core', 'api.py')
+from pandas.core.arrays.floating import (

('pandas/core', 'api.py')
-from pandas.core.algorithms import factorize, unique, value_counts

('pandas/core', 'api.py')
-from pandas.core.dtypes.missing import isna, isnull, notna, notnull

('pandas/core', 'api.py')
-from pandas.core.dtypes.dtypes import (

('pandas/core', 'api.py')
+from pandas.core.arrays.string_ import StringDtype

('pandas/core', 'api.py')
+from pandas.core.construction import array

('pandas/core', 'api.py')
+from pandas.core.flags import Flags

('pandas/core', 'api.py')
+from pandas.core.groupby import (

('pandas/core', 'api.py')
-from pandas.core.arrays import Categorical, array

('pandas/core', 'api.py')
-from pandas.core.groupby import Grouper

('pandas/core', 'api.py')
-from pandas.io.formats.format import set_eng_float_format

('pandas/core', 'api.py')
-from pandas.core.index import (Index, CategoricalIndex, Int64Index,

('pandas/core', 'api.py')
-from pandas.core.indexes.period import Period, period_range

('pandas/core', 'api.py')
-from pandas.core.indexes.timedeltas import Timedelta, timedelta_range

('pandas/core', 'api.py')
-from pandas.core.indexes.datetimes import Timestamp, date_range, bdate_range

('pandas/core', 'api.py')
-from pandas.core.indexes.interval import Interval, interval_range

('pandas/core', 'api.py')
+from pandas.core.indexes.api import (

('pandas/core', 'api.py')
+from pandas.core.indexes.datetimes import (

('pandas/core', 'api.py')
+from pandas.core.indexes.interval import (

('pandas/core', 'api.py')
+from pandas.core.indexes.period import period_range

('pandas/core', 'api.py')
+from pandas.core.indexes.timedeltas import timedelta_range

('pandas/core', 'api.py')
+from pandas.core.indexing import IndexSlice

('pandas/core', 'api.py')
-from pandas.core.frame import DataFrame

('pandas/core', 'api.py')
-from pandas.core.panel import Panel

('pandas/core', 'api.py')
-# TODO: Remove import when statsmodels updates #18264

('pandas/core', 'api.py')
-from pandas.core.reshape.reshape import get_dummies

('pandas/core', 'api.py')
-from pandas.core.indexing import IndexSlice

('pandas/core', 'api.py')
+from pandas.core.tools.datetimes import to_datetime

('pandas/core', 'api.py')
-from pandas.tseries.offsets import DateOffset

('pandas/core', 'api.py')
-from pandas.core.tools.datetimes import to_datetime

('pandas/core', 'api.py')
-from pandas.core.config import (get_option, set_option, reset_option,

('pandas/core', 'api.py')
+from pandas.io.formats.format import set_eng_float_format

('pandas/core', 'api.py')
+from pandas.tseries.offsets import DateOffset

('pandas/core', 'api.py')
-        from pandas.core.resample import TimeGrouper

('pandas/core', 'api.py')
-        import warnings

('pandas/core', 'api.py')
+# DataFrame needs to be imported after NamedAgg to avoid a circular import

('pandas/core', 'api.py')
+from pandas.core.frame import DataFrame  # isort:skip

('pandas/core', 'common.py')
-import collections

('pandas/core', 'common.py')
-from datetime import datetime, timedelta

('pandas/core', 'common.py')
+from __future__ import annotations

('pandas/core', 'common.py')
+import builtins

('pandas/core', 'common.py')
+from collections import (

('pandas/core', 'common.py')
+import contextlib

('pandas/core', 'common.py')
+from typing import (

('pandas/core', 'common.py')
+import warnings

('pandas/core', 'common.py')
-from pandas._libs import lib, tslibs

('pandas/core', 'common.py')
-import pandas.compat as compat

('pandas/core', 'common.py')
-from pandas.compat import PY36, OrderedDict, iteritems

('pandas/core', 'common.py')
+from pandas._libs import lib

('pandas/core', 'common.py')
+from pandas._typing import (

('pandas/core', 'common.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'common.py')
-from pandas.core.dtypes.generic import ABCIndex, ABCIndexClass, ABCSeries

('pandas/core', 'common.py')
-from pandas.core.dtypes.inference import _iterable_not_string

('pandas/core', 'common.py')
-from pandas.core.dtypes.missing import isna, isnull, notnull  # noqa

('pandas/core', 'common.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'common.py')
+from pandas.core.dtypes.inference import iterable_not_string

('pandas/core', 'common.py')
+from pandas.core.dtypes.missing import isna

('pandas/core', 'common.py')
+    from pandas import Index

('pandas/core', 'frame.py')
-from __future__ import division

('pandas/core', 'frame.py')
+from __future__ import annotations

('pandas/core', 'frame.py')
+from collections import abc

('pandas/core', 'frame.py')
+import datetime

('pandas/core', 'frame.py')
+from io import StringIO

('pandas/core', 'frame.py')
-import sys

('pandas/core', 'frame.py')
+from textwrap import dedent

('pandas/core', 'frame.py')
+from typing import (

('pandas/core', 'frame.py')
-from textwrap import dedent

('pandas/core', 'frame.py')
-from pandas._libs import lib, algos as libalgos

('pandas/core', 'frame.py')
-from pandas.util._decorators import (Appender, Substitution,

('pandas/core', 'frame.py')
-from pandas.util._validators import (validate_bool_kwarg,

('pandas/core', 'frame.py')
-from pandas import compat

('pandas/core', 'frame.py')
-from pandas.compat import (range, map, zip, lmap, lzip, StringIO, u,

('pandas/core', 'frame.py')
+from pandas._config import get_option

('pandas/core', 'frame.py')
+from pandas._libs import (

('pandas/core', 'frame.py')
+from pandas._libs.hashtable import duplicated

('pandas/core', 'frame.py')
+from pandas._libs.lib import no_default

('pandas/core', 'frame.py')
+from pandas._typing import (

('pandas/core', 'frame.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/core', 'frame.py')
+from pandas.util._decorators import (

('pandas/core', 'frame.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'frame.py')
+from pandas.util._validators import (

('pandas/core', 'frame.py')
-from pandas.core.dtypes.generic import ABCSeries, ABCIndexClass, ABCMultiIndex

('pandas/core', 'frame.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core', 'frame.py')
-from pandas.core import algorithms

('pandas/core', 'frame.py')
-from pandas.core import common as com

('pandas/core', 'frame.py')
-from pandas.core import nanops

('pandas/core', 'frame.py')
-from pandas.core import ops

('pandas/core', 'frame.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core', 'frame.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'frame.py')
+from pandas.core import (

('pandas/core', 'frame.py')
-from pandas.core.arrays import Categorical, ExtensionArray

('pandas/core', 'frame.py')
-from pandas.core.arrays.datetimelike import (

('pandas/core', 'frame.py')
+from pandas.core.apply import (

('pandas/core', 'frame.py')
-from pandas.core.config import get_option

('pandas/core', 'frame.py')
-from pandas.core.generic import NDFrame, _shared_docs

('pandas/core', 'frame.py')
-from pandas.core.index import (Index, MultiIndex, ensure_index,

('pandas/core', 'frame.py')
-from pandas.core.indexes import base as ibase

('pandas/core', 'frame.py')
-from pandas.core.indexes.datetimes import DatetimeIndex

('pandas/core', 'frame.py')
-from pandas.core.indexes.period import PeriodIndex

('pandas/core', 'frame.py')
-from pandas.core.indexing import (maybe_droplevels, convert_to_index_sliceable,

('pandas/core', 'frame.py')
-from pandas.core.internals import BlockManager

('pandas/core', 'frame.py')
+from pandas.core.array_algos.take import take_2d_multi

('pandas/core', 'frame.py')
+from pandas.core.arraylike import OpsMixin

('pandas/core', 'frame.py')
+from pandas.core.arrays import (

('pandas/core', 'frame.py')
+from pandas.core.arrays.sparse import SparseFrameAccessor

('pandas/core', 'frame.py')
+from pandas.core.construction import (

('pandas/core', 'frame.py')
+from pandas.core.generic import NDFrame

('pandas/core', 'frame.py')
+from pandas.core.indexers import check_key_length

('pandas/core', 'frame.py')
+from pandas.core.indexes.api import (

('pandas/core', 'frame.py')
+from pandas.core.indexes.multi import (

('pandas/core', 'frame.py')
+from pandas.core.indexing import (

('pandas/core', 'frame.py')
+from pandas.core.internals import (

('pandas/core', 'frame.py')
+from pandas.core.reshape.melt import melt

('pandas/core', 'frame.py')
-from pandas.io.formats import console

('pandas/core', 'frame.py')
-from pandas.io.formats import format as fmt

('pandas/core', 'frame.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/core', 'frame.py')
-import pandas.plotting._core as gfx

('pandas/core', 'frame.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/core', 'frame.py')
+from pandas.core.sorting import (

('pandas/core', 'frame.py')
+from pandas.io.common import get_handle

('pandas/core', 'frame.py')
+from pandas.io.formats import (

('pandas/core', 'frame.py')
+from pandas.io.formats.info import (

('pandas/core', 'frame.py')
+import pandas.plotting

('pandas/core', 'frame.py')
+    from pandas.core.groupby.generic import DataFrameGroupBy

('pandas/core', 'frame.py')
+    from pandas.core.internals import SingleDataManager

('pandas/core', 'frame.py')
+    from pandas.core.resample import Resampler

('pandas/core', 'frame.py')
+    from pandas.io.formats.style import Styler

('pandas/core', 'frame.py')
+    >>> from dataclasses import make_dataclass

('pandas/core', 'frame.py')
-        from pandas.core.panel import Panel

('pandas/core', 'frame.py')
+        from pandas import option_context

('pandas/core', 'frame.py')
-        from pandas.io.parsers import read_csv

('pandas/core', 'frame.py')
-        from pandas.core.sparse.api import SparseDataFrame

('pandas/core', 'frame.py')
-            from pandas.io.stata import StataWriter117 as statawriter

('pandas/core', 'frame.py')
+            # mypy: Name 'statawriter' already defined (possibly by an import)

('pandas/core', 'frame.py')
+            from pandas.io.stata import (  # type: ignore[no-redef]

('pandas/core', 'frame.py')
+            # mypy: Name 'statawriter' already defined (possibly by an import)

('pandas/core', 'frame.py')
+            from pandas.io.stata import (  # type: ignore[no-redef]

('pandas/core', 'frame.py')
+        tabulate = import_optional_dependency("tabulate")

('pandas/core', 'frame.py')
+        >>> import io

('pandas/core', 'frame.py')
-        >>> import io

('pandas/core', 'frame.py')
+        from pandas.io.formats.xml import (

('pandas/core', 'frame.py')
+        lxml = import_optional_dependency("lxml.etree", errors="ignore")

('pandas/core', 'frame.py')
+            (like "list", "for", "import", etc) cannot be used.

('pandas/core', 'frame.py')
-        from pandas.core.sorting import get_group_index

('pandas/core', 'frame.py')
-        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT

('pandas/core', 'frame.py')
-            from pandas.core.sorting import lexsort_indexer

('pandas/core', 'frame.py')
-            from pandas.core.sorting import nargsort

('pandas/core', 'frame.py')
-            from pandas.core.sorting import lexsort_indexer

('pandas/core', 'frame.py')
-            from pandas.core.sorting import nargsort

('pandas/core', 'frame.py')
+        from pandas.core.groupby.generic import DataFrameGroupBy

('pandas/core', 'frame.py')
-        from pandas.core.reshape.reshape import stack, stack_multiple

('pandas/core', 'frame.py')
+        from pandas.core.reshape.reshape import (

('pandas/core', 'frame.py')
-        from pandas.core.reshape.melt import melt

('pandas/core', 'frame.py')
+        from pandas.core.apply import frame_apply

('pandas/core', 'frame.py')
+        from pandas.core.apply import frame_apply

('pandas/core', 'frame.py')
+        from pandas.core.reshape.concat import concat

('pandas/core', 'frame.py')
-        from pandas.core.reshape.concat import concat

('pandas/core', 'frame.py')
-                        from pandas.core.apply import frame_apply

('pandas/core', 'indexing.py')
-import textwrap

('pandas/core', 'indexing.py')
+from __future__ import annotations

('pandas/core', 'indexing.py')
+from contextlib import suppress

('pandas/core', 'indexing.py')
+from typing import (

('pandas/core', 'indexing.py')
-from pandas._libs.indexing import _NDFrameIndexerBase

('pandas/core', 'indexing.py')
-import pandas.compat as compat

('pandas/core', 'indexing.py')
-from pandas.compat import range, zip

('pandas/core', 'indexing.py')
-from pandas.errors import AbstractMethodError

('pandas/core', 'indexing.py')
-from pandas.util._decorators import Appender

('pandas/core', 'indexing.py')
+from pandas._libs.indexing import NDFrameIndexerBase

('pandas/core', 'indexing.py')
+from pandas._libs.lib import item_from_zerodim

('pandas/core', 'indexing.py')
+from pandas.errors import (

('pandas/core', 'indexing.py')
+from pandas.util._decorators import doc

('pandas/core', 'indexing.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'indexing.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCPanel, ABCSeries

('pandas/core', 'indexing.py')
-from pandas.core.dtypes.missing import _infer_fill_value, isna

('pandas/core', 'indexing.py')
+from pandas.core.dtypes.concat import concat_compat

('pandas/core', 'indexing.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'indexing.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'indexing.py')
+from pandas.core import algorithms as algos

('pandas/core', 'indexing.py')
-from pandas.core.index import Index, MultiIndex

('pandas/core', 'indexing.py')
+from pandas.core.construction import (

('pandas/core', 'indexing.py')
+from pandas.core.indexers import (

('pandas/core', 'indexing.py')
+from pandas.core.indexes.api import (

('pandas/core', 'indexing.py')
+    from pandas import (

('pandas/core', 'indexing.py')
-        from pandas import Series

('pandas/core', 'indexing.py')
+            from pandas import Series

('pandas/core', 'indexing.py')
+        from pandas import Series

('pandas/core', 'indexing.py')
+        from pandas import Series

('pandas/core', 'base.py')
+from __future__ import annotations

('pandas/core', 'base.py')
-import warnings

('pandas/core', 'base.py')
+from typing import (

('pandas/core', 'base.py')
-import pandas.compat as compat

('pandas/core', 'base.py')
-from pandas.compat import PYPY, OrderedDict, builtins, map, range

('pandas/core', 'base.py')
+from pandas._typing import (

('pandas/core', 'base.py')
+from pandas.compat import PYPY

('pandas/core', 'base.py')
-from pandas.util._decorators import Appender, Substitution, cache_readonly

('pandas/core', 'base.py')
-from pandas.util._validators import validate_bool_kwarg

('pandas/core', 'base.py')
+from pandas.util._decorators import (

('pandas/core', 'base.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCIndexClass, ABCSeries

('pandas/core', 'base.py')
-from pandas.core.dtypes.missing import isna

('pandas/core', 'base.py')
-from pandas.core import algorithms, common as com

('pandas/core', 'base.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'base.py')
+from pandas.core.dtypes.missing import (

('pandas/core', 'base.py')
+from pandas.core import (

('pandas/core', 'base.py')
-import pandas.core.nanops as nanops

('pandas/core', 'base.py')
+from pandas.core.algorithms import (

('pandas/core', 'base.py')
+from pandas.core.arraylike import OpsMixin

('pandas/core', 'base.py')
+from pandas.core.arrays import ExtensionArray

('pandas/core', 'base.py')
+from pandas.core.construction import (

('pandas/core', 'base.py')
+    from pandas._typing import (

('pandas/core', 'base.py')
+    from pandas import Categorical

('pandas/core', 'base.py')
-        from pandas.core.config import get_option

('pandas/core', 'base.py')
-            from pandas.core.reshape.concat import concat

('pandas/core', 'base.py')
-            from pandas import DataFrame, Series

('pandas/core', 'base.py')
-        from pandas.core.reshape.concat import concat

('pandas/core', 'base.py')
-            from pandas.core.dtypes.cast import is_nested_object

('pandas/core', 'base.py')
-            from pandas import Series

('pandas/core', 'base.py')
-            from pandas.arrays import DatetimeArray

('pandas/core', 'base.py')
-            from pandas.arrays import TimedeltaArray

('pandas/core', 'base.py')
-            from pandas.core.arrays.numpy_ import PandasArray

('pandas/core', 'base.py')
-                from pandas import Series

('pandas/core', 'base.py')
-        from pandas.core.algorithms import value_counts

('pandas/core', 'base.py')
-            from pandas.core.algorithms import unique1d

('pandas/core', 'base.py')
-        from pandas.core.algorithms import duplicated

('pandas/core', 'apply.py')
+from __future__ import annotations

('pandas/core', 'apply.py')
+import abc

('pandas/core', 'apply.py')
+from collections import defaultdict

('pandas/core', 'apply.py')
+from functools import partial

('pandas/core', 'apply.py')
+import inspect

('pandas/core', 'apply.py')
+import re

('pandas/core', 'apply.py')
+from typing import (

('pandas/core', 'apply.py')
-from pandas._libs import reduction

('pandas/core', 'apply.py')
-import pandas.compat as compat

('pandas/core', 'apply.py')
+from pandas._config import option_context

('pandas/core', 'apply.py')
+from pandas._libs import lib

('pandas/core', 'apply.py')
+from pandas._typing import (

('pandas/core', 'apply.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core', 'apply.py')
+from pandas.core.dtypes.cast import is_nested_object

('pandas/core', 'apply.py')
-from pandas.core.dtypes.generic import ABCSeries

('pandas/core', 'apply.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/core', 'apply.py')
+from pandas.core.dtypes.generic import (

('pandas/core', 'apply.py')
+from pandas.core.algorithms import safe_sort

('pandas/core', 'apply.py')
+from pandas.core.base import (

('pandas/core', 'apply.py')
+import pandas.core.common as com

('pandas/core', 'apply.py')
+from pandas.core.construction import (

('pandas/core', 'apply.py')
+    from pandas import (

('pandas/core', 'apply.py')
+    from pandas.core.groupby import GroupBy

('pandas/core', 'apply.py')
+    from pandas.core.resample import Resampler

('pandas/core', 'apply.py')
+    from pandas.core.window.rolling import BaseWindow

('pandas/core', 'apply.py')
+        from pandas.core.reshape.concat import concat

('pandas/core', 'apply.py')
+        from pandas.core.reshape.concat import concat

('pandas/core', 'apply.py')
+            from pandas import Series

('pandas/core', 'apply.py')
+        from pandas import Index

('pandas/core', 'apply.py')
+        from pandas.core.reshape.concat import concat

('pandas/core', 'apply.py')
+            from pandas import Series

('pandas/core', 'apply.py')
-            from pandas import Series

('pandas/core', 'apply.py')
+        from pandas import Series

('pandas/core', 'apply.py')
-            from pandas import Series

('pandas/core', 'apply.py')
+    from pandas.core.indexes.base import Index

('pandas/core', 'apply.py')
+    from pandas.core.indexes.base import Index

('pandas/core/reshape', 'tile.py')
-from functools import partial

('pandas/core/reshape', 'tile.py')
+from __future__ import annotations

('pandas/core/reshape', 'tile.py')
+from typing import (

('pandas/core/reshape', 'tile.py')
+from pandas._libs import (

('pandas/core/reshape', 'tile.py')
+from pandas.core.dtypes.generic import ABCSeries

('pandas/core/reshape', 'merge.py')
+from __future__ import annotations

('pandas/core/reshape', 'merge.py')
+import datetime

('pandas/core/reshape', 'merge.py')
+from functools import partial

('pandas/core/reshape', 'merge.py')
+import hashlib

('pandas/core/reshape', 'merge.py')
+from typing import (

('pandas/core/reshape', 'merge.py')
-from pandas._libs import hashtable as libhashtable, join as libjoin, lib

('pandas/core/reshape', 'merge.py')
-import pandas.compat as compat

('pandas/core/reshape', 'merge.py')
-from pandas.compat import filter, lzip, map, range, zip

('pandas/core/reshape', 'merge.py')
+from pandas._libs import (

('pandas/core/reshape', 'merge.py')
+from pandas._typing import (

('pandas/core/reshape', 'merge.py')
-from pandas.util._decorators import Appender, Substitution

('pandas/core/reshape', 'merge.py')
+from pandas.util._decorators import (

('pandas/core/reshape', 'merge.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/reshape', 'merge.py')
+from pandas.core.dtypes.cast import find_common_type

('pandas/core/reshape', 'merge.py')
-from pandas.core.dtypes.missing import isnull, na_value_for_dtype

('pandas/core/reshape', 'merge.py')
-from pandas import Categorical, DataFrame, Index, MultiIndex, Series, Timedelta

('pandas/core/reshape', 'merge.py')
+from pandas.core.dtypes.generic import (

('pandas/core/reshape', 'merge.py')
+from pandas.core.dtypes.missing import (

('pandas/core/reshape', 'merge.py')
+from pandas import (

('pandas/core/reshape', 'merge.py')
+from pandas.core import groupby

('pandas/core/reshape', 'merge.py')
-from pandas.core.arrays.categorical import _recode_for_categories

('pandas/core/reshape', 'merge.py')
+from pandas.core.arrays import ExtensionArray

('pandas/core/reshape', 'merge.py')
+from pandas.core.construction import extract_array

('pandas/core/reshape', 'merge.py')
-from pandas.core.internals import (

('pandas/core/reshape', 'merge.py')
-import pandas.core.sorting as sorting

('pandas/core/reshape', 'merge.py')
+from pandas.core.internals import concatenate_managers

('pandas/core/reshape', 'merge.py')
+    from pandas import DataFrame

('pandas/core/reshape', 'merge.py')
+    from pandas.core.arrays import DatetimeArray

('pandas/core/reshape', 'merge.py')
-    from functools import partial

('pandas/core/reshape', 'merge.py')
-    from functools import partial

('pandas/core/reshape', 'concat.py')
+from __future__ import annotations

('pandas/core/reshape', 'concat.py')
+from collections import abc

('pandas/core/reshape', 'concat.py')
+from typing import (

('pandas/core/reshape', 'concat.py')
+import warnings

('pandas/core/reshape', 'concat.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/reshape', 'concat.py')
-from pandas import DataFrame, Index, MultiIndex, Series, compat

('pandas/core/reshape', 'concat.py')
-from pandas.core import common as com

('pandas/core/reshape', 'concat.py')
+from pandas._typing import Axis

('pandas/core/reshape', 'concat.py')
+from pandas.util._decorators import (

('pandas/core/reshape', 'concat.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/reshape', 'concat.py')
+from pandas.core.dtypes.concat import concat_compat

('pandas/core/reshape', 'concat.py')
+from pandas.core.dtypes.generic import (

('pandas/core/reshape', 'concat.py')
+from pandas.core.dtypes.inference import is_bool

('pandas/core/reshape', 'concat.py')
+from pandas.core.dtypes.missing import isna

('pandas/core/reshape', 'concat.py')
-from pandas.core.generic import NDFrame

('pandas/core/reshape', 'concat.py')
-from pandas.core.index import (

('pandas/core/reshape', 'concat.py')
-import pandas.core.indexes.base as ibase

('pandas/core/reshape', 'concat.py')
-from pandas.core.internals import concatenate_block_managers

('pandas/core/reshape', 'concat.py')
+import pandas.core.common as com

('pandas/core/reshape', 'concat.py')
+from pandas.core.indexes.api import (

('pandas/core/reshape', 'concat.py')
+from pandas.core.internals import concatenate_managers

('pandas/core/reshape', 'concat.py')
+    from pandas import (

('pandas/core/reshape', 'concat.py')
+    from pandas.core.generic import NDFrame

('pandas/core/reshape', 'util.py')
-from pandas.core import common as com

('pandas/core/reshape', 'reshape.py')
-from functools import partial

('pandas/core/reshape', 'reshape.py')
+from __future__ import annotations

('pandas/core/reshape', 'reshape.py')
+from typing import TYPE_CHECKING

('pandas/core/reshape', 'reshape.py')
+import warnings

('pandas/core/reshape', 'reshape.py')
-from pandas._libs import algos as _algos, reshape as _reshape

('pandas/core/reshape', 'reshape.py')
+import pandas._libs.reshape as libreshape

('pandas/core/reshape', 'reshape.py')
-from pandas.compat import PY2, range, text_type, u, zip

('pandas/core/reshape', 'reshape.py')
+from pandas._typing import (

('pandas/core/reshape', 'reshape.py')
+from pandas.errors import PerformanceWarning

('pandas/core/reshape', 'reshape.py')
+from pandas.util._decorators import cache_readonly

('pandas/core/reshape', 'reshape.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/reshape', 'reshape.py')
-from pandas import compat

('pandas/core/reshape', 'reshape.py')
-from pandas.core.arrays.categorical import _factorize_from_iterable

('pandas/core/reshape', 'reshape.py')
+from pandas.core.arrays.categorical import factorize_from_iterable

('pandas/core/reshape', 'reshape.py')
+from pandas.core.construction import ensure_wrapped_if_datetimelike

('pandas/core/reshape', 'reshape.py')
-from pandas.core.index import Index, MultiIndex

('pandas/core/reshape', 'reshape.py')
-from pandas.core.internals.arrays import extract_array

('pandas/core/reshape', 'reshape.py')
+from pandas.core.indexes.api import (

('pandas/core/reshape', 'reshape.py')
+from pandas.core.indexes.frozen import FrozenList

('pandas/core/reshape', 'reshape.py')
+    from pandas.core.arrays import ExtensionArray

('pandas/core/reshape', 'reshape.py')
-    from pandas.core.reshape.concat import concat

('pandas/core/reshape', 'reshape.py')
-    from itertools import cycle

('pandas/core/reshape', 'api.py')
-from pandas.core.reshape.melt import lreshape, melt, wide_to_long

('pandas/core/reshape', 'api.py')
-from pandas.core.reshape.merge import merge, merge_asof, merge_ordered

('pandas/core/reshape', 'api.py')
-from pandas.core.reshape.pivot import crosstab, pivot, pivot_table

('pandas/core/reshape', 'api.py')
+from pandas.core.reshape.melt import (

('pandas/core/reshape', 'api.py')
+from pandas.core.reshape.merge import (

('pandas/core/reshape', 'api.py')
+from pandas.core.reshape.pivot import (

('pandas/core/reshape', 'api.py')
-from pandas.core.reshape.tile import cut, qcut

('pandas/core/reshape', 'api.py')
+from pandas.core.reshape.tile import (

('pandas/core/reshape', 'melt.py')
+from __future__ import annotations

('pandas/core/reshape', 'melt.py')
+from typing import TYPE_CHECKING

('pandas/core/reshape', 'melt.py')
+import warnings

('pandas/core/reshape', 'melt.py')
-from pandas.util._decorators import Appender

('pandas/core/reshape', 'melt.py')
-from pandas.core.dtypes.common import is_extension_type, is_list_like

('pandas/core/reshape', 'melt.py')
-from pandas.core.dtypes.generic import ABCMultiIndex

('pandas/core/reshape', 'melt.py')
+from pandas.util._decorators import (

('pandas/core/reshape', 'melt.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/reshape', 'melt.py')
+from pandas.core.dtypes.common import (

('pandas/core/reshape', 'melt.py')
+from pandas.core.dtypes.concat import concat_compat

('pandas/core/reshape', 'melt.py')
-from pandas import compat

('pandas/core/reshape', 'melt.py')
+import pandas.core.algorithms as algos

('pandas/core/reshape', 'melt.py')
-from pandas.core.frame import _shared_docs

('pandas/core/reshape', 'melt.py')
-from pandas.core.indexes.base import Index

('pandas/core/reshape', 'melt.py')
+import pandas.core.common as com

('pandas/core/reshape', 'melt.py')
+from pandas.core.indexes.api import (

('pandas/core/reshape', 'melt.py')
+from pandas.core.reshape.util import tile_compat

('pandas/core/reshape', 'melt.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/core/reshape', 'melt.py')
+    from pandas import DataFrame

('pandas/core/reshape', 'melt.py')
-        import pandas.core.dtypes.concat as _concat

('pandas/core/reshape', 'pivot.py')
+from __future__ import annotations

('pandas/core/reshape', 'pivot.py')
+from typing import (

('pandas/core/reshape', 'pivot.py')
-from pandas.compat import lrange, range, zip

('pandas/core/reshape', 'pivot.py')
-from pandas.util._decorators import Appender, Substitution

('pandas/core/reshape', 'pivot.py')
+from pandas._typing import (

('pandas/core/reshape', 'pivot.py')
+from pandas.util._decorators import (

('pandas/core/reshape', 'pivot.py')
-from pandas.core.dtypes.common import is_integer_dtype, is_list_like, is_scalar

('pandas/core/reshape', 'pivot.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries

('pandas/core/reshape', 'pivot.py')
-from pandas import compat

('pandas/core/reshape', 'pivot.py')
+from pandas.core.dtypes.common import (

('pandas/core/reshape', 'pivot.py')
+from pandas.core.dtypes.generic import (

('pandas/core/reshape', 'pivot.py')
-from pandas.core.index import Index, MultiIndex, _get_objs_combined_axis

('pandas/core/reshape', 'pivot.py')
+from pandas.core.indexes.api import (

('pandas/core/reshape', 'pivot.py')
+    from pandas import DataFrame

('pandas/core/reshape', 'pivot.py')
-        from pandas import MultiIndex

('pandas/core/reshape', 'pivot.py')
+            from pandas import DataFrame

('pandas/core/tools', 'timedeltas.py')
+from __future__ import annotations

('pandas/core/tools', 'timedeltas.py')
-from pandas._libs.tslibs.timedeltas import Timedelta, parse_timedelta_unit

('pandas/core/tools', 'timedeltas.py')
+from pandas._libs import lib

('pandas/core/tools', 'timedeltas.py')
+from pandas._libs.tslibs import (

('pandas/core/tools', 'timedeltas.py')
+from pandas._libs.tslibs.timedeltas import (

('pandas/core/tools', 'timedeltas.py')
-from pandas.core.dtypes.generic import ABCIndexClass, ABCSeries

('pandas/core/tools', 'timedeltas.py')
+from pandas.core.dtypes.generic import (

('pandas/core/tools', 'timedeltas.py')
-import pandas as pd

('pandas/core/tools', 'timedeltas.py')
-        from pandas import Series

('pandas/core/tools', 'timedeltas.py')
-        from pandas import TimedeltaIndex

('pandas/core/tools', 'timedeltas.py')
+    from pandas import TimedeltaIndex

('pandas/core/tools', 'datetimes.py')
-from datetime import datetime, time

('pandas/core/tools', 'datetimes.py')
+from __future__ import annotations

('pandas/core/tools', 'datetimes.py')
+from collections import abc

('pandas/core/tools', 'datetimes.py')
+from datetime import datetime

('pandas/core/tools', 'datetimes.py')
+from itertools import islice

('pandas/core/tools', 'datetimes.py')
+from typing import (

('pandas/core/tools', 'datetimes.py')
+import warnings

('pandas/core/tools', 'datetimes.py')
-from pandas._libs import tslib, tslibs

('pandas/core/tools', 'datetimes.py')
-from pandas._libs.tslibs import Timestamp, conversion, parsing

('pandas/core/tools', 'datetimes.py')
-from pandas._libs.tslibs.parsing import (  # noqa

('pandas/core/tools', 'datetimes.py')
+from pandas._libs import tslib

('pandas/core/tools', 'datetimes.py')
+from pandas._libs.tslibs import (

('pandas/core/tools', 'datetimes.py')
+from pandas._libs.tslibs.parsing import (  # noqa:F401

('pandas/core/tools', 'datetimes.py')
-from pandas.compat import zip

('pandas/core/tools', 'datetimes.py')
+from pandas._typing import (

('pandas/core/tools', 'datetimes.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/tools', 'datetimes.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCIndexClass, ABCSeries

('pandas/core/tools', 'datetimes.py')
+from pandas.core.dtypes.generic import (

('pandas/core/tools', 'datetimes.py')
-from pandas import compat

('pandas/core/tools', 'datetimes.py')
+from pandas.arrays import (

('pandas/core/tools', 'datetimes.py')
+from pandas.core.algorithms import unique

('pandas/core/tools', 'datetimes.py')
+from pandas.core.arrays.datetimes import (

('pandas/core/tools', 'datetimes.py')
+from pandas.core.construction import extract_array

('pandas/core/tools', 'datetimes.py')
+from pandas.core.indexes.base import Index

('pandas/core/tools', 'datetimes.py')
+from pandas.core.indexes.datetimes import DatetimeIndex

('pandas/core/tools', 'datetimes.py')
+    from pandas._libs.tslibs.nattype import NaTType

('pandas/core/tools', 'datetimes.py')
+    from pandas import Series

('pandas/core/tools', 'datetimes.py')
-        from pandas import Index

('pandas/core/tools', 'datetimes.py')
-    from pandas import Series, DatetimeIndex, Index

('pandas/core/tools', 'datetimes.py')
+    from pandas import Series

('pandas/core/tools', 'datetimes.py')
-        from pandas import Index

('pandas/core/tools', 'datetimes.py')
-    from pandas import DatetimeIndex

('pandas/core/tools', 'datetimes.py')
-    from pandas.core.arrays import DatetimeArray

('pandas/core/tools', 'datetimes.py')
-    from pandas.core.arrays.datetimes import (

('pandas/core/tools', 'datetimes.py')
-                from pandas import Index

('pandas/core/tools', 'datetimes.py')
-            from pandas import Index

('pandas/core/tools', 'datetimes.py')
+    >>> from datetime import datetime

('pandas/core/tools', 'datetimes.py')
+    >>> from datetime import datetime, timezone, timedelta

('pandas/core/tools', 'datetimes.py')
-            from pandas import Series

('pandas/core/tools', 'datetimes.py')
+            from pandas import Series

('pandas/core/tools', 'datetimes.py')
-    from pandas import to_timedelta, to_numeric, DataFrame

('pandas/core/tools', 'datetimes.py')
+    from pandas import (

('pandas/core/tools', 'datetimes.py')
-    from pandas.core.series import Series

('pandas/core/tools', 'datetimes.py')
+        "`to_time` has been moved, should be imported from pandas.core.tools.times. "

('pandas/core/tools', 'datetimes.py')
+    from pandas.core.tools.times import to_time

('pandas/core/tools', 'numeric.py')
+from __future__ import annotations

('pandas/core/tools', 'numeric.py')
-from pandas.core.dtypes.cast import maybe_downcast_to_dtype

('pandas/core/tools', 'numeric.py')
+from pandas.core.dtypes.cast import maybe_downcast_numeric

('pandas/core/tools', 'numeric.py')
-from pandas.core.dtypes.generic import ABCIndexClass, ABCSeries

('pandas/core/tools', 'numeric.py')
+from pandas.core.dtypes.generic import (

('pandas/core/tools', 'numeric.py')
+from pandas.core.arrays.numeric import NumericArray

('pandas/core/tools', 'numeric.py')
+        from pandas.core.arrays import (

('pandas/core/util', 'hashing.py')
+from __future__ import annotations

('pandas/core/util', 'hashing.py')
+from typing import (

('pandas/core/util', 'hashing.py')
-from pandas._libs import hashing, tslibs

('pandas/core/util', 'hashing.py')
-from pandas.core.dtypes.cast import infer_dtype_from_scalar

('pandas/core/util', 'hashing.py')
+from pandas._libs import lib

('pandas/core/util', 'hashing.py')
+from pandas._libs.hashing import hash_object_array

('pandas/core/util', 'hashing.py')
+from pandas._typing import ArrayLike

('pandas/core/util', 'hashing.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/util', 'hashing.py')
+    from pandas import (

('pandas/core/util', 'hashing.py')
+    from pandas import (

('pandas/core/util', 'hashing.py')
-    from pandas import Categorical, MultiIndex

('pandas/core/util', 'hashing.py')
-            from pandas import factorize, Categorical, Index

('pandas/core/util', 'hashing.py')
+            from pandas import (

('pandas/core/dtypes', 'cast.py')
-from datetime import datetime, timedelta

('pandas/core/dtypes', 'cast.py')
+from __future__ import annotations

('pandas/core/dtypes', 'cast.py')
+from datetime import (

('pandas/core/dtypes', 'cast.py')
+import functools

('pandas/core/dtypes', 'cast.py')
+import inspect

('pandas/core/dtypes', 'cast.py')
+from typing import (

('pandas/core/dtypes', 'cast.py')
+import warnings

('pandas/core/dtypes', 'cast.py')
-from pandas._libs import lib, tslib, tslibs

('pandas/core/dtypes', 'cast.py')
-from pandas._libs.tslibs import NaT, OutOfBoundsDatetime, Period, iNaT

('pandas/core/dtypes', 'cast.py')
-from pandas.compat import PY3, string_types, text_type, to_str

('pandas/core/dtypes', 'cast.py')
-from .common import (

('pandas/core/dtypes', 'cast.py')
-from .dtypes import (

('pandas/core/dtypes', 'cast.py')
-from .generic import (

('pandas/core/dtypes', 'cast.py')
-from .inference import is_list_like

('pandas/core/dtypes', 'cast.py')
-from .missing import isna, notna

('pandas/core/dtypes', 'cast.py')
+from pandas._libs import lib

('pandas/core/dtypes', 'cast.py')
+from pandas._libs.tslibs import (

('pandas/core/dtypes', 'cast.py')
+from pandas._libs.tslibs.timedeltas import array_to_timedelta64

('pandas/core/dtypes', 'cast.py')
+from pandas._typing import (

('pandas/core/dtypes', 'cast.py')
+from pandas.errors import IntCastingNaNError

('pandas/core/dtypes', 'cast.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/dtypes', 'cast.py')
+from pandas.util._validators import validate_bool_kwarg

('pandas/core/dtypes', 'cast.py')
+from pandas.core.dtypes.common import (

('pandas/core/dtypes', 'cast.py')
+from pandas.core.dtypes.dtypes import (

('pandas/core/dtypes', 'cast.py')
+from pandas.core.dtypes.generic import (

('pandas/core/dtypes', 'cast.py')
+from pandas.core.dtypes.inference import is_list_like

('pandas/core/dtypes', 'cast.py')
+from pandas.core.dtypes.missing import (

('pandas/core/dtypes', 'cast.py')
+    from pandas.core.arrays import (

('pandas/core/dtypes', 'cast.py')
-                    from pandas import to_datetime

('pandas/core/dtypes', 'cast.py')
-            from pandas.core.arrays import PeriodArray

('pandas/core/dtypes', 'cast.py')
+    from pandas.core.arrays.string_ import BaseStringArray

('pandas/core/dtypes', 'cast.py')
+    from pandas.core.construction import ensure_wrapped_if_datetimelike

('pandas/core/dtypes', 'cast.py')
+        from pandas.core.construction import ensure_wrapped_if_datetimelike

('pandas/core/dtypes', 'cast.py')
-            from pandas.core.tools.timedeltas import to_timedelta

('pandas/core/dtypes', 'cast.py')
-            from pandas import to_datetime

('pandas/core/dtypes', 'cast.py')
-            from pandas import to_timedelta

('pandas/core/dtypes', 'cast.py')
-            from pandas import to_numeric

('pandas/core/dtypes', 'cast.py')
+                from pandas.core.arrays.integer import INT_STR_TO_DTYPE

('pandas/core/dtypes', 'cast.py')
+                from pandas.core.arrays.floating import FLOAT_STR_TO_DTYPE

('pandas/core/dtypes', 'cast.py')
+        from pandas.core.arrays.datetimes import sequence_to_datetimes

('pandas/core/dtypes', 'cast.py')
-                from pandas._libs.tslibs import conversion

('pandas/core/dtypes', 'cast.py')
-                from pandas import DatetimeIndex

('pandas/core/dtypes', 'cast.py')
-        from pandas import to_timedelta

('pandas/core/dtypes', 'cast.py')
+            #  does not require a circular import.

('pandas/core/dtypes', 'cast.py')
-    from pandas.core.tools.timedeltas import to_timedelta

('pandas/core/dtypes', 'cast.py')
-    from pandas.core.tools.datetimes import to_datetime

('pandas/core/dtypes', 'cast.py')
+    from pandas.core.arrays.datetimes import sequence_to_datetimes

('pandas/core/dtypes', 'cast.py')
+    from pandas.core.arrays.timedeltas import TimedeltaArray

('pandas/core/dtypes', 'cast.py')
+                    #  once we can reliably import it in all supported versions

('pandas/core/dtypes', 'cast.py')
-        from pandas import DatetimeIndex

('pandas/core/dtypes', 'cast.py')
-        from pandas import Categorical

('pandas/core/dtypes', 'missing.py')
+from __future__ import annotations

('pandas/core/dtypes', 'missing.py')
+from decimal import Decimal

('pandas/core/dtypes', 'missing.py')
+from functools import partial

('pandas/core/dtypes', 'missing.py')
-from pandas._libs import lib, missing as libmissing

('pandas/core/dtypes', 'missing.py')
-from pandas._libs.tslibs import NaT, iNaT

('pandas/core/dtypes', 'missing.py')
-from .common import (

('pandas/core/dtypes', 'missing.py')
-from .generic import (

('pandas/core/dtypes', 'missing.py')
-from .inference import is_list_like

('pandas/core/dtypes', 'missing.py')
+from pandas._config import get_option

('pandas/core/dtypes', 'missing.py')
+from pandas._libs import lib

('pandas/core/dtypes', 'missing.py')
+import pandas._libs.missing as libmissing

('pandas/core/dtypes', 'missing.py')
+from pandas._libs.tslibs import (

('pandas/core/dtypes', 'missing.py')
+from pandas._typing import (

('pandas/core/dtypes', 'missing.py')
+from pandas.core.dtypes.common import (

('pandas/core/dtypes', 'missing.py')
+from pandas.core.dtypes.dtypes import (

('pandas/core/dtypes', 'missing.py')
+from pandas.core.dtypes.generic import (

('pandas/core/dtypes', 'missing.py')
+from pandas.core.dtypes.inference import is_list_like

('pandas/core/dtypes', 'missing.py')
-    from pandas.core.config import get_option

('pandas/core/dtypes', 'missing.py')
-        from pandas import Series

('pandas/core/dtypes', 'missing.py')
-        from pandas import Series

('pandas/core/dtypes', 'concat.py')
+from typing import (

('pandas/core/dtypes', 'concat.py')
+import warnings

('pandas/core/dtypes', 'concat.py')
-from pandas._libs import tslib, tslibs

('pandas/core/dtypes', 'concat.py')
+from pandas._typing import (

('pandas/core/dtypes', 'concat.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/dtypes', 'concat.py')
+from pandas.core.dtypes.cast import (

('pandas/core/dtypes', 'concat.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/dtypes', 'concat.py')
-from pandas import compat

('pandas/core/dtypes', 'concat.py')
-    from pandas import SparseSeries, SparseDataFrame, DataFrame

('pandas/core/dtypes', 'concat.py')
-        from pandas.core.sparse.api import SparseDataFrame

('pandas/core/dtypes', 'concat.py')
+    from pandas.core.arrays.sparse import SparseArray

('pandas/core/dtypes', 'concat.py')
-    from pandas import Index, Categorical, CategoricalIndex, Series

('pandas/core/dtypes', 'concat.py')
-    from pandas.core.arrays.categorical import _recode_for_categories

('pandas/core/dtypes', 'concat.py')
+    from pandas import Categorical

('pandas/core/dtypes', 'concat.py')
+    from pandas.core.arrays.categorical import recode_for_categories

('pandas/core/dtypes', 'concat.py')
-            from pandas.core.algorithms import take_1d

('pandas/core/dtypes', 'concat.py')
+            from pandas.core.algorithms import take_nd

('pandas/core/dtypes', 'concat.py')
+    from pandas.core.construction import ensure_wrapped_if_datetimelike

('pandas/core/dtypes', 'concat.py')
-    from pandas import Index

('pandas/core/dtypes', 'concat.py')
-    from pandas.core.arrays import ExtensionArray

('pandas/core/dtypes', 'concat.py')
-    from pandas.core.arrays import SparseArray

('pandas/core/dtypes', 'concat.py')
-    from pandas import Int64Index, RangeIndex

('pandas/core/dtypes', 'generic.py')
+from __future__ import annotations

('pandas/core/dtypes', 'generic.py')
+from typing import (

('pandas/core/dtypes', 'generic.py')
+    from pandas import (

('pandas/core/dtypes', 'generic.py')
+    from pandas.core.arrays import (

('pandas/core/dtypes', 'generic.py')
+    from pandas.core.generic import NDFrame

('pandas/core/dtypes', 'dtypes.py')
+from __future__ import annotations

('pandas/core/dtypes', 'dtypes.py')
-import warnings

('pandas/core/dtypes', 'dtypes.py')
+from typing import (

('pandas/core/dtypes', 'dtypes.py')
-from pandas._libs.tslibs import NaT, Period, Timestamp, timezones

('pandas/core/dtypes', 'dtypes.py')
-from pandas.core.dtypes.generic import ABCCategoricalIndex, ABCIndexClass

('pandas/core/dtypes', 'dtypes.py')
-from pandas import compat

('pandas/core/dtypes', 'dtypes.py')
-from .base import ExtensionDtype, _DtypeOpsMixin

('pandas/core/dtypes', 'dtypes.py')
-from .inference import is_list_like

('pandas/core/dtypes', 'dtypes.py')
-    >>> from pandas.api.extensions import register_extension_dtype

('pandas/core/dtypes', 'dtypes.py')
-    >>> from pandas.api.extensions import ExtensionDtype

('pandas/core/dtypes', 'dtypes.py')
+from pandas._libs.properties import cache_readonly

('pandas/core/dtypes', 'dtypes.py')
+from pandas._libs.tslibs import (

('pandas/core/dtypes', 'dtypes.py')
+from pandas._typing import (

('pandas/core/dtypes', 'dtypes.py')
+from pandas.core.dtypes.base import (

('pandas/core/dtypes', 'dtypes.py')
+from pandas.core.dtypes.generic import (

('pandas/core/dtypes', 'dtypes.py')
+from pandas.core.dtypes.inference import (

('pandas/core/dtypes', 'dtypes.py')
+    from datetime import tzinfo

('pandas/core/dtypes', 'dtypes.py')
+    import pyarrow

('pandas/core/dtypes', 'dtypes.py')
+    from pandas import (

('pandas/core/dtypes', 'dtypes.py')
+    from pandas.core.arrays import (

('pandas/core/dtypes', 'dtypes.py')
-        from pandas.core.config import get_option

('pandas/core/dtypes', 'dtypes.py')
-        from pandas.core.dtypes.common import is_categorical

('pandas/core/dtypes', 'dtypes.py')
-        from pandas.core.dtypes.common import is_datetime64tz_dtype, _NS_DTYPE

('pandas/core/dtypes', 'dtypes.py')
-        from pandas.core.dtypes.common import is_bool

('pandas/core/dtypes', 'dtypes.py')
-        from pandas import Index

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.indexes.base import Index

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.arrays.sparse import SparseDtype

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.dtypes.cast import find_common_type

('pandas/core/dtypes', 'dtypes.py')
-        from pandas.tseries.offsets import DateOffset

('pandas/core/dtypes', 'dtypes.py')
-            from pandas.tseries.frequencies import to_offset

('pandas/core/dtypes', 'dtypes.py')
-        from pandas.tseries.offsets import DateOffset

('pandas/core/dtypes', 'dtypes.py')
+        import pyarrow

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.arrays import PeriodArray

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.arrays._arrow_utils import pyarrow_array_to_numpy_and_mask

('pandas/core/dtypes', 'dtypes.py')
+        import pyarrow

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.arrays import IntervalArray

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.dtypes.cast import find_common_type

('pandas/core/dtypes', 'dtypes.py')
+        from pandas.core.arrays import PandasArray

('pandas/core/dtypes', 'api.py')
-from .common import (

('pandas/core/dtypes', 'api.py')
+from pandas.core.dtypes.common import (

('pandas/core/dtypes', 'common.py')
+from __future__ import annotations

('pandas/core/dtypes', 'common.py')
+from typing import (

('pandas/core/dtypes', 'common.py')
-from pandas._libs import algos, lib

('pandas/core/dtypes', 'common.py')
+from pandas._libs import (

('pandas/core/dtypes', 'common.py')
-from pandas.compat import PY3, PY36, string_types

('pandas/core/dtypes', 'common.py')
+from pandas._typing import (

('pandas/core/dtypes', 'common.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/dtypes', 'common.py')
+from pandas.core.dtypes.base import _registry as registry

('pandas/core/dtypes', 'common.py')
-        from pandas import Categorical

('pandas/core/dtypes', 'common.py')
+    >>> from datetime import datetime

('pandas/core/dtypes', 'common.py')
+    from pandas.core.arrays import (

('pandas/core/dtypes', 'inference.py')
+from collections import abc

('pandas/core/dtypes', 'inference.py')
+from typing import Pattern

('pandas/core/dtypes', 'inference.py')
-from pandas.compat import (

('pandas/core/dtypes', 'inference.py')
-from pandas import compat

('pandas/core/dtypes', 'inference.py')
+from pandas._typing import ArrayLike

('pandas/core/dtypes', 'inference.py')
+    >>> from pandas.api.types import is_number

('pandas/core/dtypes', 'inference.py')
+    >>> import io

('pandas/core/dtypes', 'inference.py')
+    >>> from collections import namedtuple

('pandas/core/dtypes', 'inference.py')
+    >>> import collections

('pandas/core/dtypes', 'inference.py')
+    >>> from dataclasses import dataclass

('pandas/core/dtypes', 'inference.py')
+        from dataclasses import is_dataclass

('pandas/core/dtypes', 'base.py')
+from __future__ import annotations

('pandas/core/dtypes', 'base.py')
+from typing import (

('pandas/core/dtypes', 'base.py')
+from pandas._libs.hashtable import object_hash

('pandas/core/dtypes', 'base.py')
+from pandas._typing import (

('pandas/core/dtypes', 'base.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCIndexClass, ABCSeries

('pandas/core/dtypes', 'base.py')
-from pandas import compat

('pandas/core/dtypes', 'base.py')
+from pandas.core.dtypes.generic import (

('pandas/core/dtypes', 'base.py')
+    from pandas.core.arrays import ExtensionArray

('pandas/core/dtypes', 'base.py')
+    >>> from pandas.api.extensions import register_extension_dtype, ExtensionDtype

('pandas/core/groupby', 'categorical.py')
+from __future__ import annotations

('pandas/core/groupby', 'categorical.py')
+from pandas.core.indexes.api import CategoricalIndex

('pandas/core/groupby', 'generic.py')
-import collections

('pandas/core/groupby', 'generic.py')
-import copy

('pandas/core/groupby', 'generic.py')
+from __future__ import annotations

('pandas/core/groupby', 'generic.py')
+from collections import abc

('pandas/core/groupby', 'generic.py')
+from typing import (

('pandas/core/groupby', 'generic.py')
-from pandas._libs import Timestamp, lib

('pandas/core/groupby', 'generic.py')
-import pandas.compat as compat

('pandas/core/groupby', 'generic.py')
-from pandas.compat import lzip, map

('pandas/core/groupby', 'generic.py')
-from pandas.compat.numpy import _np_version_under1p13

('pandas/core/groupby', 'generic.py')
-from pandas.errors import AbstractMethodError

('pandas/core/groupby', 'generic.py')
-from pandas.util._decorators import Appender, Substitution

('pandas/core/groupby', 'generic.py')
-from pandas.core.dtypes.cast import maybe_downcast_to_dtype

('pandas/core/groupby', 'generic.py')
+from pandas._libs import reduction as libreduction

('pandas/core/groupby', 'generic.py')
+from pandas._typing import (

('pandas/core/groupby', 'generic.py')
+from pandas.util._decorators import (

('pandas/core/groupby', 'generic.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/groupby', 'generic.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core/groupby', 'generic.py')
-import pandas.core.algorithms as algorithms

('pandas/core/groupby', 'generic.py')
-from pandas.core.arrays import Categorical

('pandas/core/groupby', 'generic.py')
-from pandas.core.base import DataError, SpecificationError

('pandas/core/groupby', 'generic.py')
+from pandas.core.dtypes.missing import (

('pandas/core/groupby', 'generic.py')
+from pandas.core import (

('pandas/core/groupby', 'generic.py')
+from pandas.core.apply import (

('pandas/core/groupby', 'generic.py')
+from pandas.core.base import SpecificationError

('pandas/core/groupby', 'generic.py')
+from pandas.core.construction import create_series_with_explicit_dtype

('pandas/core/groupby', 'generic.py')
-from pandas.core.generic import NDFrame, _shared_docs

('pandas/core/groupby', 'generic.py')
+from pandas.core.generic import NDFrame

('pandas/core/groupby', 'generic.py')
-from pandas.core.index import CategoricalIndex, Index, MultiIndex

('pandas/core/groupby', 'generic.py')
-import pandas.core.indexes.base as ibase

('pandas/core/groupby', 'generic.py')
-from pandas.core.internals import BlockManager, make_block

('pandas/core/groupby', 'generic.py')
-from pandas.core.panel import Panel

('pandas/core/groupby', 'generic.py')
+from pandas.core.groupby.grouper import get_grouper

('pandas/core/groupby', 'generic.py')
+from pandas.core.indexes.api import (

('pandas/core/groupby', 'generic.py')
-from pandas.plotting._core import boxplot_frame_groupby

('pandas/core/groupby', 'generic.py')
+from pandas.core.util.numba_ import maybe_use_numba

('pandas/core/groupby', 'generic.py')
+from pandas.plotting import boxplot_frame_groupby

('pandas/core/groupby', 'generic.py')
+            from pandas import concat

('pandas/core/groupby', 'generic.py')
+            from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'generic.py')
-                from pandas.core.groupby.groupby import groupby

('pandas/core/groupby', 'generic.py')
+        from pandas.core.reshape.merge import get_join_indexers

('pandas/core/groupby', 'generic.py')
+        from pandas.core.reshape.tile import cut

('pandas/core/groupby', 'generic.py')
-        from pandas.core.index import _all_indexes_same

('pandas/core/groupby', 'generic.py')
-        from pandas.core.tools.numeric import to_numeric

('pandas/core/groupby', 'generic.py')
-                            from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'generic.py')
-                            from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'generic.py')
+                from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'generic.py')
-            from pandas import concat

('pandas/core/groupby', 'generic.py')
-        from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'generic.py')
-        from pandas.core.reshape.tile import cut

('pandas/core/groupby', 'generic.py')
-        from pandas.core.reshape.merge import _get_join_indexers

('pandas/core/groupby', 'generic.py')
-        from pandas import concat

('pandas/core/groupby', 'generic.py')
-        from pandas.core.dtypes.missing import _isna_ndarraylike as _isna

('pandas/core/groupby', 'generic.py')
-            from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'generic.py')
+    from pandas import concat

('pandas/core/groupby', '__init__.py')
-from pandas.core.groupby.groupby import GroupBy  # noqa: F401

('pandas/core/groupby', '__init__.py')
-from pandas.core.groupby.generic import (  # noqa: F401

('pandas/core/groupby', '__init__.py')
-from pandas.core.groupby.grouper import Grouper  # noqa: F401

('pandas/core/groupby', '__init__.py')
+from pandas.core.groupby.generic import (

('pandas/core/groupby', '__init__.py')
+from pandas.core.groupby.groupby import GroupBy

('pandas/core/groupby', '__init__.py')
+from pandas.core.groupby.grouper import Grouper

('pandas/core/groupby', 'ops.py')
+from __future__ import annotations

('pandas/core/groupby', 'ops.py')
+import functools

('pandas/core/groupby', 'ops.py')
+from typing import (

('pandas/core/groupby', 'ops.py')
-from pandas._libs import NaT, groupby as libgroupby, iNaT, lib, reduction

('pandas/core/groupby', 'ops.py')
-from pandas.compat import lzip, range, zip

('pandas/core/groupby', 'ops.py')
+from pandas._libs import (

('pandas/core/groupby', 'ops.py')
+import pandas._libs.groupby as libgroupby

('pandas/core/groupby', 'ops.py')
+import pandas._libs.reduction as libreduction

('pandas/core/groupby', 'ops.py')
+from pandas._typing import (

('pandas/core/groupby', 'ops.py')
+from pandas.core.dtypes.cast import (

('pandas/core/groupby', 'ops.py')
-from pandas.core.dtypes.missing import _maybe_fill, isna

('pandas/core/groupby', 'ops.py')
-import pandas.core.algorithms as algorithms

('pandas/core/groupby', 'ops.py')
-from pandas.core.base import SelectionMixin

('pandas/core/groupby', 'ops.py')
-import pandas.core.common as com

('pandas/core/groupby', 'ops.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/groupby', 'ops.py')
+from pandas.core.dtypes.missing import (

('pandas/core/groupby', 'ops.py')
+from pandas.core.arrays import (

('pandas/core/groupby', 'ops.py')
+from pandas.core.arrays.boolean import BooleanDtype

('pandas/core/groupby', 'ops.py')
+from pandas.core.arrays.floating import (

('pandas/core/groupby', 'ops.py')
+from pandas.core.arrays.integer import (

('pandas/core/groupby', 'ops.py')
+from pandas.core.arrays.masked import (

('pandas/core/groupby', 'ops.py')
+from pandas.core.arrays.string_ import StringDtype

('pandas/core/groupby', 'ops.py')
-from pandas.core.groupby import base

('pandas/core/groupby', 'ops.py')
-from pandas.core.index import Index, MultiIndex, ensure_index

('pandas/core/groupby', 'ops.py')
+from pandas.core.groupby import grouper

('pandas/core/groupby', 'ops.py')
+from pandas.core.indexes.api import (

('pandas/core/groupby', 'ops.py')
-        from pandas.core.groupby.grouper import Grouping

('pandas/core/groupby', 'grouper.py')
+from __future__ import annotations

('pandas/core/groupby', 'grouper.py')
+from typing import (

('pandas/core/groupby', 'grouper.py')
-import pandas.compat as compat

('pandas/core/groupby', 'grouper.py')
-from pandas.compat import callable, zip

('pandas/core/groupby', 'grouper.py')
+from pandas._typing import (

('pandas/core/groupby', 'grouper.py')
+from pandas.errors import InvalidIndexError

('pandas/core/groupby', 'grouper.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/groupby', 'grouper.py')
+from pandas.core.dtypes.cast import sanitize_to_nanoseconds

('pandas/core/groupby', 'grouper.py')
-from pandas.core.dtypes.generic import ABCSeries

('pandas/core/groupby', 'grouper.py')
-from pandas.core.arrays import Categorical, ExtensionArray

('pandas/core/groupby', 'grouper.py')
+from pandas.core.arrays import (

('pandas/core/groupby', 'grouper.py')
-from pandas.core.groupby.ops import BaseGrouper

('pandas/core/groupby', 'grouper.py')
-from pandas.core.index import CategoricalIndex, Index, MultiIndex

('pandas/core/groupby', 'grouper.py')
+from pandas.core.groupby import ops

('pandas/core/groupby', 'grouper.py')
+from pandas.core.groupby.categorical import (

('pandas/core/groupby', 'grouper.py')
+from pandas.core.indexes.api import (

('pandas/core/groupby', 'grouper.py')
+    from pandas.core.generic import NDFrame

('pandas/core/groupby', 'grouper.py')
-                from pandas.core.groupby.categorical import recode_for_groupby

('pandas/core/groupby', 'grouper.py')
-                from pandas import to_datetime

('pandas/core/groupby', 'grouper.py')
-                from pandas import to_timedelta

('pandas/core/groupby', 'grouper.py')
-            from pandas.core.groupby.categorical import recode_from_groupby

('pandas/core/groupby', 'grouper.py')
+            "\n>>> from pandas.tseries.frequencies import to_offset"

('pandas/core/groupby', 'groupby.py')
-import collections

('pandas/core/groupby', 'groupby.py')
+from __future__ import annotations

('pandas/core/groupby', 'groupby.py')
-from functools import partial, wraps

('pandas/core/groupby', 'groupby.py')
+from functools import (

('pandas/core/groupby', 'groupby.py')
+import inspect

('pandas/core/groupby', 'groupby.py')
+from textwrap import dedent

('pandas/core/groupby', 'groupby.py')
+from typing import (

('pandas/core/groupby', 'groupby.py')
-from pandas._libs import Timestamp, groupby as libgroupby

('pandas/core/groupby', 'groupby.py')
-import pandas.compat as compat

('pandas/core/groupby', 'groupby.py')
-from pandas.compat import callable, range, set_function_name, zip

('pandas/core/groupby', 'groupby.py')
+from pandas._config.config import option_context

('pandas/core/groupby', 'groupby.py')
+from pandas._libs import (

('pandas/core/groupby', 'groupby.py')
+import pandas._libs.groupby as libgroupby

('pandas/core/groupby', 'groupby.py')
+from pandas._typing import (

('pandas/core/groupby', 'groupby.py')
-from pandas.util._decorators import Appender, Substitution, cache_readonly

('pandas/core/groupby', 'groupby.py')
-from pandas.util._validators import validate_kwargs

('pandas/core/groupby', 'groupby.py')
-from pandas.core.dtypes.cast import maybe_downcast_to_dtype

('pandas/core/groupby', 'groupby.py')
+from pandas.util._decorators import (

('pandas/core/groupby', 'groupby.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/groupby', 'groupby.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core/groupby', 'groupby.py')
+from pandas.core.dtypes.missing import (

('pandas/core/groupby', 'groupby.py')
+from pandas.core import nanops

('pandas/core/groupby', 'groupby.py')
+from pandas.core._numba import executor

('pandas/core/groupby', 'groupby.py')
+from pandas.core.arrays import (

('pandas/core/groupby', 'groupby.py')
-from pandas.core.config import option_context

('pandas/core/groupby', 'groupby.py')
-from pandas.core.groupby import base

('pandas/core/groupby', 'groupby.py')
-from pandas.core.index import Index, MultiIndex

('pandas/core/groupby', 'groupby.py')
+from pandas.core.groupby import (

('pandas/core/groupby', 'groupby.py')
+from pandas.core.groupby.indexing import (

('pandas/core/groupby', 'groupby.py')
+from pandas.core.indexes.api import (

('pandas/core/groupby', 'groupby.py')
+from pandas.core.internals.blocks import ensure_block_shape

('pandas/core/groupby', 'groupby.py')
+import pandas.core.sample as sample

('pandas/core/groupby', 'groupby.py')
+from pandas.core.util.numba_ import (

('pandas/core/groupby', 'groupby.py')
-            from pandas.core.groupby.grouper import _get_grouper

('pandas/core/groupby', 'groupby.py')
+            from pandas.core.groupby.grouper import get_grouper

('pandas/core/groupby', 'groupby.py')
+        from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'groupby.py')
-        from pandas.core.reshape.concat import concat

('pandas/core/groupby', 'groupby.py')
+            from pandas.core._numba.kernels import sliding_mean

('pandas/core/groupby', 'groupby.py')
+            from pandas.core._numba.kernels import sliding_var

('pandas/core/groupby', 'groupby.py')
+            from pandas.core._numba.kernels import sliding_var

('pandas/core/groupby', 'groupby.py')
+            from pandas.core._numba.kernels import sliding_sum

('pandas/core/groupby', 'groupby.py')
+        from pandas.core.window import ExponentialMovingWindowGroupby

('pandas/core/groupby', 'groupby.py')
-            from pandas.core.groupby.grouper import _get_grouper

('pandas/core/groupby', 'groupby.py')
+            from pandas.core.groupby.grouper import get_grouper

('pandas/core/groupby', 'base.py')
+from __future__ import annotations

('pandas/core/groupby', 'base.py')
-import types

('pandas/core/groupby', 'base.py')
-from pandas.util._decorators import make_signature

('pandas/core/groupby', 'base.py')
-from pandas.core.dtypes.common import is_list_like, is_scalar

('pandas/core/groupby', 'base.py')
+import dataclasses

('pandas/core/groupby', 'base.py')
+from typing import Hashable

('pandas/core/internals', 'concat.py')
-from collections import defaultdict

('pandas/core/internals', 'concat.py')
-import copy

('pandas/core/internals', 'concat.py')
+from __future__ import annotations

('pandas/core/internals', 'concat.py')
+import itertools

('pandas/core/internals', 'concat.py')
+from typing import (

('pandas/core/internals', 'concat.py')
-from pandas._libs import internals as libinternals, tslibs

('pandas/core/internals', 'concat.py')
+from pandas._libs import (

('pandas/core/internals', 'concat.py')
+from pandas._typing import (

('pandas/core/internals', 'concat.py')
-from pandas.core.dtypes.cast import maybe_promote

('pandas/core/internals', 'concat.py')
+from pandas.core.dtypes.cast import (

('pandas/core/internals', 'concat.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/internals', 'concat.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/internals', 'concat.py')
-import pandas.core.algorithms as algos

('pandas/core/internals', 'concat.py')
+from pandas.core.dtypes.concat import (

('pandas/core/internals', 'concat.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/internals', 'concat.py')
+from pandas.core.arrays import (

('pandas/core/internals', 'concat.py')
+from pandas.core.construction import ensure_wrapped_if_datetimelike

('pandas/core/internals', 'concat.py')
+from pandas.core.internals.array_manager import (

('pandas/core/internals', 'concat.py')
+from pandas.core.internals.blocks import (

('pandas/core/internals', 'concat.py')
+from pandas.core.internals.managers import BlockManager

('pandas/core/internals', 'concat.py')
+    from pandas import Index

('pandas/core/internals', 'concat.py')
+    from pandas.core.internals.blocks import Block

('pandas/core/internals', 'construction.py')
-from collections import OrderedDict

('pandas/core/internals', 'construction.py')
+from __future__ import annotations

('pandas/core/internals', 'construction.py')
+from collections import abc

('pandas/core/internals', 'construction.py')
+from typing import (

('pandas/core/internals', 'construction.py')
+import warnings

('pandas/core/internals', 'construction.py')
-from pandas._libs.tslibs import IncompatibleFrequency

('pandas/core/internals', 'construction.py')
-import pandas.compat as compat

('pandas/core/internals', 'construction.py')
-from pandas.compat import (

('pandas/core/internals', 'construction.py')
+from pandas._typing import (

('pandas/core/internals', 'construction.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/internals', 'construction.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/internals', 'construction.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/internals', 'construction.py')
-from pandas.core import algorithms, common as com

('pandas/core/internals', 'construction.py')
-from pandas.core.arrays import Categorical, ExtensionArray, period_array

('pandas/core/internals', 'construction.py')
-from pandas.core.index import (

('pandas/core/internals', 'construction.py')
-from pandas.core.indexes import base as ibase

('pandas/core/internals', 'construction.py')
-from pandas.core.internals import (

('pandas/core/internals', 'construction.py')
-from pandas.core.internals.arrays import extract_array

('pandas/core/internals', 'construction.py')
+from pandas.core import (

('pandas/core/internals', 'construction.py')
+from pandas.core.arrays import (

('pandas/core/internals', 'construction.py')
+from pandas.core.construction import (

('pandas/core/internals', 'construction.py')
+from pandas.core.indexes.api import (

('pandas/core/internals', 'construction.py')
+from pandas.core.internals.array_manager import (

('pandas/core/internals', 'construction.py')
+from pandas.core.internals.blocks import (

('pandas/core/internals', 'construction.py')
+from pandas.core.internals.managers import (

('pandas/core/internals', 'construction.py')
+    from numpy.ma.mrecords import MaskedRecords

('pandas/core/internals', 'construction.py')
+        #  parent class MaskedArray to avoid the need to import MaskedRecords

('pandas/core/internals', 'construction.py')
+    >>> from dataclasses import dataclass

('pandas/core/internals', 'construction.py')
+    from dataclasses import asdict

('pandas/core/internals', '__init__.py')
-from .blocks import (  # noqa:F401

('pandas/core/internals', '__init__.py')
-from .managers import (  # noqa:F401

('pandas/core/internals', '__init__.py')
+from pandas.core.internals.api import make_block

('pandas/core/internals', '__init__.py')
+from pandas.core.internals.array_manager import (

('pandas/core/internals', '__init__.py')
+from pandas.core.internals.base import (

('pandas/core/internals', '__init__.py')
+from pandas.core.internals.blocks import (  # io.pytables, io.packers

('pandas/core/internals', '__init__.py')
+from pandas.core.internals.concat import concatenate_managers

('pandas/core/internals', '__init__.py')
+from pandas.core.internals.managers import (

('pandas/core/internals', '__init__.py')
+    import warnings

('pandas/core/internals', '__init__.py')
+    from pandas.util._exceptions import find_stack_level

('pandas/core/internals', '__init__.py')
+        from pandas.core.internals.blocks import CategoricalBlock

('pandas/core/internals', 'blocks.py')
-from datetime import date, datetime, timedelta

('pandas/core/internals', 'blocks.py')
-import functools

('pandas/core/internals', 'blocks.py')
-import inspect

('pandas/core/internals', 'blocks.py')
+from __future__ import annotations

('pandas/core/internals', 'blocks.py')
+from functools import wraps

('pandas/core/internals', 'blocks.py')
+from typing import (

('pandas/core/internals', 'blocks.py')
-from pandas._libs import internals as libinternals, lib, tslib, tslibs

('pandas/core/internals', 'blocks.py')
-from pandas._libs.tslibs import Timedelta, conversion, is_null_datetimelike

('pandas/core/internals', 'blocks.py')
-import pandas.compat as compat

('pandas/core/internals', 'blocks.py')
-from pandas.compat import range, zip

('pandas/core/internals', 'blocks.py')
+from pandas._libs import (

('pandas/core/internals', 'blocks.py')
+from pandas._libs.internals import BlockPlacement

('pandas/core/internals', 'blocks.py')
+from pandas._typing import (

('pandas/core/internals', 'blocks.py')
+from pandas.compat import np_version_under1p20

('pandas/core/internals', 'blocks.py')
+from pandas.util._decorators import cache_readonly

('pandas/core/internals', 'blocks.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/internals', 'blocks.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/internals', 'blocks.py')
+from pandas.core.dtypes.inference import is_inferred_bool_dtype

('pandas/core/internals', 'blocks.py')
+from pandas.core.array_algos.putmask import (

('pandas/core/internals', 'blocks.py')
+from pandas.core.array_algos.quantile import quantile_compat

('pandas/core/internals', 'blocks.py')
+from pandas.core.array_algos.replace import (

('pandas/core/internals', 'blocks.py')
+from pandas.core.array_algos.take import take_nd

('pandas/core/internals', 'blocks.py')
+from pandas.core.array_algos.transforms import shift

('pandas/core/internals', 'blocks.py')
+from pandas.core.arrays._mixins import NDArrayBackedExtensionArray

('pandas/core/internals', 'blocks.py')
+from pandas.core.arrays.sparse import SparseDtype

('pandas/core/internals', 'blocks.py')
-from pandas.core.indexes.datetimes import DatetimeIndex

('pandas/core/internals', 'blocks.py')
-from pandas.core.indexing import check_setitem_lengths

('pandas/core/internals', 'blocks.py')
-from pandas.core.internals.arrays import extract_array

('pandas/core/internals', 'blocks.py')
+import pandas.core.computation.expressions as expressions

('pandas/core/internals', 'blocks.py')
+from pandas.core.construction import (

('pandas/core/internals', 'blocks.py')
+from pandas.core.indexers import (

('pandas/core/internals', 'blocks.py')
-from pandas.core.nanops import nanpercentile

('pandas/core/internals', 'blocks.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/core/internals', 'blocks.py')
+    from pandas import (

('pandas/core/internals', 'blocks.py')
-        import pandas.core.computation.expressions as expressions

('pandas/core/internals', 'blocks.py')
-        # output (important for appropriate 'quoting' behaviour),

('pandas/core/internals', 'blocks.py')
-        from pandas.io.formats.format import FloatArrayFormatter

('pandas/core/internals', 'blocks.py')
-        from pandas.io.formats.format import _get_format_datetime64_from_values

('pandas/core/internals', 'blocks.py')
-        from pandas.core.arrays.categorical import _maybe_to_categorical

('pandas/core/internals', 'blocks.py')
-    from pandas.core.internals import BlockManager

('pandas/core/internals', 'blocks.py')
+        # output (important for appropriate 'quoting' behaviour),

('pandas/core/internals', 'blocks.py')
+        from pandas.io.formats.format import FloatArrayFormatter

('pandas/core/internals', 'managers.py')
-from collections import defaultdict

('pandas/core/internals', 'managers.py')
-from functools import partial

('pandas/core/internals', 'managers.py')
+from __future__ import annotations

('pandas/core/internals', 'managers.py')
-import operator

('pandas/core/internals', 'managers.py')
-import re

('pandas/core/internals', 'managers.py')
+from typing import (

('pandas/core/internals', 'managers.py')
+import warnings

('pandas/core/internals', 'managers.py')
-from pandas._libs import internals as libinternals, lib

('pandas/core/internals', 'managers.py')
-from pandas.compat import map, range, zip

('pandas/core/internals', 'managers.py')
+from pandas._libs import (

('pandas/core/internals', 'managers.py')
+from pandas._libs.internals import BlockPlacement

('pandas/core/internals', 'managers.py')
+from pandas._typing import (

('pandas/core/internals', 'managers.py')
+from pandas.errors import PerformanceWarning

('pandas/core/internals', 'managers.py')
+from pandas.util._decorators import cache_readonly

('pandas/core/internals', 'managers.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/internals', 'managers.py')
-from pandas.core.dtypes.cast import (

('pandas/core/internals', 'managers.py')
+from pandas.core.dtypes.cast import infer_dtype_from_scalar

('pandas/core/internals', 'managers.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/internals', 'managers.py')
-from pandas.core.dtypes.generic import ABCExtensionArray, ABCSeries

('pandas/core/internals', 'managers.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/internals', 'managers.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/internals', 'managers.py')
+from pandas.core.dtypes.generic import (

('pandas/core/internals', 'managers.py')
+from pandas.core.dtypes.missing import (

('pandas/core/internals', 'managers.py')
-from pandas.core.arrays.sparse import _maybe_to_sparse

('pandas/core/internals', 'managers.py')
-from pandas.core.base import PandasObject

('pandas/core/internals', 'managers.py')
-from pandas.core.index import Index, MultiIndex, ensure_index

('pandas/core/internals', 'managers.py')
-from pandas.core.indexing import maybe_convert_indices

('pandas/core/internals', 'managers.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/core/internals', 'managers.py')
-from .blocks import (

('pandas/core/internals', 'managers.py')
-from .concat import (  # all for concatenate_block_managers

('pandas/core/internals', 'managers.py')
+from pandas.core.arrays._mixins import NDArrayBackedExtensionArray

('pandas/core/internals', 'managers.py')
+from pandas.core.arrays.sparse import SparseDtype

('pandas/core/internals', 'managers.py')
+from pandas.core.construction import (

('pandas/core/internals', 'managers.py')
+from pandas.core.indexers import maybe_convert_indices

('pandas/core/internals', 'managers.py')
+from pandas.core.indexes.api import (

('pandas/core/internals', 'managers.py')
+from pandas.core.internals.base import (

('pandas/core/internals', 'managers.py')
+from pandas.core.internals.blocks import (

('pandas/core/internals', 'managers.py')
+from pandas.core.internals.ops import (

('pandas/core/internals', 'managers.py')
-            from pandas import Float64Index

('pandas/core/internals', 'managers.py')
-        from pandas.core.dtypes.common import is_sparse

('pandas/core/computation', 'check.py')
-from distutils.version import LooseVersion

('pandas/core/computation', 'check.py')
-import warnings

('pandas/core/computation', 'check.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/core/computation', 'check.py')
+ne = import_optional_dependency("numexpr", errors="warn")

('pandas/core/computation', 'check.py')
-    import numexpr as ne

('pandas/core/computation', 'align.py')
-from functools import partial, wraps

('pandas/core/computation', 'align.py')
+from __future__ import annotations

('pandas/core/computation', 'align.py')
+from functools import (

('pandas/core/computation', 'align.py')
+from typing import (

('pandas/core/computation', 'align.py')
-from pandas.compat import range, zip

('pandas/core/computation', 'align.py')
-import pandas as pd

('pandas/core/computation', 'align.py')
-from pandas import compat

('pandas/core/computation', 'align.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/computation', 'align.py')
+from pandas.core.dtypes.generic import (

('pandas/core/computation', 'align.py')
+from pandas.core.base import PandasObject

('pandas/core/computation', 'align.py')
-from pandas.core.computation.common import _result_type_many

('pandas/core/computation', 'align.py')
+from pandas.core.computation.common import result_type_many

('pandas/core/computation', 'align.py')
+    from pandas.core.generic import NDFrame

('pandas/core/computation', 'align.py')
+    from pandas.core.indexes.api import Index

('pandas/core/computation', 'align.py')
+    from pandas import Series

('pandas/core/computation', 'pytables.py')
+from __future__ import annotations

('pandas/core/computation', 'pytables.py')
+from typing import Any

('pandas/core/computation', 'pytables.py')
-from pandas.compat import DeepChainMap, string_types, u

('pandas/core/computation', 'pytables.py')
+from pandas._libs.tslibs import (

('pandas/core/computation', 'pytables.py')
+from pandas._typing import npt

('pandas/core/computation', 'pytables.py')
+from pandas.compat.chainmap import DeepChainMap

('pandas/core/computation', 'pytables.py')
-import pandas as pd

('pandas/core/computation', 'pytables.py')
-from pandas.core.base import StringMixin

('pandas/core/computation', 'pytables.py')
-from pandas.core.computation import expr, ops

('pandas/core/computation', 'pytables.py')
-from pandas.core.computation.common import _ensure_decoded

('pandas/core/computation', 'pytables.py')
+from pandas.core.computation import (

('pandas/core/computation', 'pytables.py')
+from pandas.core.computation.common import ensure_decoded

('pandas/core/computation', 'pytables.py')
-from pandas.core.computation.ops import UndefinedVariableError, is_term

('pandas/core/computation', 'pytables.py')
-from pandas.io.formats.printing import pprint_thing, pprint_thing_encoded

('pandas/core/computation', 'pytables.py')
+from pandas.core.computation.ops import (

('pandas/core/computation', 'pytables.py')
+from pandas.core.construction import extract_array

('pandas/core/computation', 'pytables.py')
+from pandas.core.indexes.base import Index

('pandas/core/computation', 'pytables.py')
+from pandas.io.formats.printing import (

('pandas/core/computation', 'engines.py')
+from __future__ import annotations

('pandas/core/computation', 'engines.py')
-from pandas.compat import map

('pandas/core/computation', 'engines.py')
-from pandas import compat

('pandas/core/computation', 'engines.py')
-from pandas.core.computation.align import _align, _reconstruct_object

('pandas/core/computation', 'engines.py')
+from pandas.core.computation.align import (

('pandas/core/computation', 'engines.py')
+from pandas.core.computation.expr import Expr

('pandas/core/computation', 'expressions.py')
+from __future__ import annotations

('pandas/core/computation', 'expressions.py')
+import operator

('pandas/core/computation', 'expressions.py')
-from pandas.core.dtypes.generic import ABCDataFrame

('pandas/core/computation', 'expressions.py')
-import pandas.core.common as com

('pandas/core/computation', 'expressions.py')
-from pandas.core.computation.check import _NUMEXPR_INSTALLED

('pandas/core/computation', 'expressions.py')
-from pandas.core.config import get_option

('pandas/core/computation', 'expressions.py')
+from pandas._config import get_option

('pandas/core/computation', 'expressions.py')
+from pandas._typing import FuncType

('pandas/core/computation', 'expressions.py')
+from pandas.core.computation.check import NUMEXPR_INSTALLED

('pandas/core/computation', 'expressions.py')
+from pandas.core.ops import roperator

('pandas/core/computation', 'ops.py')
+from __future__ import annotations

('pandas/core/computation', 'ops.py')
-from distutils.version import LooseVersion

('pandas/core/computation', 'ops.py')
-import operator as op

('pandas/core/computation', 'ops.py')
+import operator

('pandas/core/computation', 'ops.py')
+from typing import (

('pandas/core/computation', 'ops.py')
-from pandas.compat import PY3, string_types, text_type

('pandas/core/computation', 'ops.py')
-from pandas.core.dtypes.common import is_list_like, is_scalar

('pandas/core/computation', 'ops.py')
-import pandas as pd

('pandas/core/computation', 'ops.py')
-from pandas.core.base import StringMixin

('pandas/core/computation', 'ops.py')
+from pandas._libs.tslibs import Timestamp

('pandas/core/computation', 'ops.py')
+from pandas.core.dtypes.common import (

('pandas/core/computation', 'ops.py')
-from pandas.core.computation.common import _ensure_decoded, _result_type_many

('pandas/core/computation', 'ops.py')
-from pandas.core.computation.scope import _DEFAULT_GLOBALS

('pandas/core/computation', 'ops.py')
-from pandas.io.formats.printing import pprint_thing, pprint_thing_encoded

('pandas/core/computation', 'ops.py')
+from pandas.core.computation.common import (

('pandas/core/computation', 'ops.py')
+from pandas.core.computation.scope import DEFAULT_GLOBALS

('pandas/core/computation', 'ops.py')
+from pandas.io.formats.printing import (

('pandas/core/computation', 'ops.py')
+                from pandas.core.computation.eval import eval

('pandas/core/computation', 'ops.py')
-        from pandas.core.computation.check import (_NUMEXPR_INSTALLED,

('pandas/core/computation', 'common.py')
+from functools import reduce

('pandas/core/computation', 'common.py')
-from pandas.compat import reduce

('pandas/core/computation', 'common.py')
-import pandas as pd

('pandas/core/computation', 'common.py')
+from pandas._config import get_option

('pandas/core/computation', 'eval.py')
+from __future__ import annotations

('pandas/core/computation', 'eval.py')
-from pandas.compat import string_types

('pandas/core/computation', 'eval.py')
+from pandas._libs.lib import no_default

('pandas/core/computation', 'eval.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/computation', 'eval.py')
-from pandas.core.computation.engines import _engines

('pandas/core/computation', 'eval.py')
-from pandas.core.computation.scope import _ensure_scope

('pandas/core/computation', 'eval.py')
+from pandas.core.computation.engines import ENGINES

('pandas/core/computation', 'eval.py')
+from pandas.core.computation.expr import (

('pandas/core/computation', 'eval.py')
+from pandas.core.computation.ops import BinOp

('pandas/core/computation', 'eval.py')
+from pandas.core.computation.parsing import tokenize_string

('pandas/core/computation', 'eval.py')
+from pandas.core.computation.scope import ensure_scope

('pandas/core/computation', 'eval.py')
-    from pandas.core.computation.check import _NUMEXPR_INSTALLED

('pandas/core/computation', 'eval.py')
+    from pandas.core.computation.check import NUMEXPR_INSTALLED

('pandas/core/computation', 'eval.py')
+    from pandas.core.computation.expressions import USE_NUMEXPR

('pandas/core/computation', 'eval.py')
-    from pandas.core.computation.expr import _parsers

('pandas/core/computation', 'eval.py')
-    from pandas.core.computation.expr import tokenize_string

('pandas/core/computation', 'eval.py')
-    from pandas.core.computation.expr import Expr

('pandas/core/computation', 'scope.py')
+from __future__ import annotations

('pandas/core/computation', 'scope.py')
+from io import StringIO

('pandas/core/computation', 'scope.py')
-from pandas.compat import DeepChainMap, StringIO, map

('pandas/core/computation', 'scope.py')
-import pandas as pd  # noqa

('pandas/core/computation', 'scope.py')
-from pandas.core.base import StringMixin

('pandas/core/computation', 'scope.py')
-import pandas.core.computation as compu

('pandas/core/computation', 'scope.py')
+from pandas._libs.tslibs import Timestamp

('pandas/core/computation', 'scope.py')
+from pandas.compat.chainmap import DeepChainMap

('pandas/core/computation', 'scope.py')
+                # runtime import because ops imports from scope

('pandas/core/computation', 'scope.py')
+                from pandas.core.computation.ops import UndefinedVariableError

('pandas/core/computation', 'expr.py')
+from __future__ import annotations

('pandas/core/computation', 'expr.py')
-from functools import partial

('pandas/core/computation', 'expr.py')
+from functools import (

('pandas/core/computation', 'expr.py')
+from keyword import iskeyword

('pandas/core/computation', 'expr.py')
+from typing import (

('pandas/core/computation', 'expr.py')
-from pandas.compat import StringIO, lmap, reduce, string_types, zip

('pandas/core/computation', 'expr.py')
-import pandas as pd

('pandas/core/computation', 'expr.py')
-from pandas import compat

('pandas/core/computation', 'expr.py')
-from pandas.core import common as com

('pandas/core/computation', 'expr.py')
-from pandas.core.base import StringMixin

('pandas/core/computation', 'expr.py')
+from pandas.compat import PY39

('pandas/core/computation', 'expr.py')
+import pandas.core.common as com

('pandas/core/computation', 'expr.py')
+from pandas.core.computation.parsing import (

('pandas/core/computation', 'expr.py')
-                from keyword import iskeyword

('pandas/core/computation', 'expr.py')
+        from pandas import eval as pd_eval

('pandas/core/arrays', 'categorical.py')
-import textwrap

('pandas/core/arrays', 'categorical.py')
-from warnings import warn

('pandas/core/arrays', 'categorical.py')
+from __future__ import annotations

('pandas/core/arrays', 'categorical.py')
+from csv import QUOTE_NONNUMERIC

('pandas/core/arrays', 'categorical.py')
+from functools import partial

('pandas/core/arrays', 'categorical.py')
+import operator

('pandas/core/arrays', 'categorical.py')
+from shutil import get_terminal_size

('pandas/core/arrays', 'categorical.py')
+from typing import (

('pandas/core/arrays', 'categorical.py')
+from warnings import (

('pandas/core/arrays', 'categorical.py')
-from pandas._libs import algos as libalgos, lib

('pandas/core/arrays', 'categorical.py')
-import pandas.compat as compat

('pandas/core/arrays', 'categorical.py')
-from pandas.compat import lzip, u

('pandas/core/arrays', 'categorical.py')
+from pandas._config import get_option

('pandas/core/arrays', 'categorical.py')
+from pandas._libs import (

('pandas/core/arrays', 'categorical.py')
+from pandas._libs.arrays import NDArrayBacked

('pandas/core/arrays', 'categorical.py')
+from pandas._libs.lib import no_default

('pandas/core/arrays', 'categorical.py')
+from pandas._typing import (

('pandas/core/arrays', 'categorical.py')
-from pandas.util._validators import validate_bool_kwarg, validate_fillna_kwargs

('pandas/core/arrays', 'categorical.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/arrays', 'categorical.py')
+from pandas.util._validators import validate_bool_kwarg

('pandas/core/arrays', 'categorical.py')
-from pandas.core.dtypes.dtypes import CategoricalDtype

('pandas/core/arrays', 'categorical.py')
+from pandas.core.dtypes.dtypes import (

('pandas/core/arrays', 'categorical.py')
-from pandas.core.dtypes.inference import is_hashable

('pandas/core/arrays', 'categorical.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core/arrays', 'categorical.py')
-from pandas.core.accessor import PandasDelegate, delegate_names

('pandas/core/arrays', 'categorical.py')
+from pandas.core.dtypes.missing import (

('pandas/core/arrays', 'categorical.py')
+from pandas.core import (

('pandas/core/arrays', 'categorical.py')
+from pandas.core.accessor import (

('pandas/core/arrays', 'categorical.py')
-from pandas.core.algorithms import factorize, take, take_1d, unique1d

('pandas/core/arrays', 'categorical.py')
-from pandas.core.base import NoNewAttributesMixin, PandasObject, _shared_docs

('pandas/core/arrays', 'categorical.py')
+from pandas.core.algorithms import (

('pandas/core/arrays', 'categorical.py')
+from pandas.core.arrays._mixins import (

('pandas/core/arrays', 'categorical.py')
+from pandas.core.base import (

('pandas/core/arrays', 'categorical.py')
-from pandas.core.config import get_option

('pandas/core/arrays', 'categorical.py')
-from pandas.core.missing import interpolate_2d

('pandas/core/arrays', 'categorical.py')
+from pandas.core.construction import (

('pandas/core/arrays', 'categorical.py')
+from pandas.core.ops.common import unpack_zerodim_and_defer

('pandas/core/arrays', 'categorical.py')
+from pandas.core.strings.object_array import ObjectStringArrayMixin

('pandas/core/arrays', 'categorical.py')
-from pandas.io.formats.terminal import get_terminal_size

('pandas/core/arrays', 'categorical.py')
-from .base import ExtensionArray, _extension_array_shared_docs

('pandas/core/arrays', 'categorical.py')
+    from pandas import Index

('pandas/core/arrays', 'categorical.py')
-                from pandas.core.internals.construction import sanitize_array

('pandas/core/arrays', 'categorical.py')
-        from pandas import Index, to_numeric, to_datetime, to_timedelta

('pandas/core/arrays', 'categorical.py')
+        from pandas import (

('pandas/core/arrays', 'categorical.py')
-        from pandas.core.series import Series

('pandas/core/arrays', 'categorical.py')
-        from numpy import bincount

('pandas/core/arrays', 'categorical.py')
-        from pandas import Series, CategoricalIndex

('pandas/core/arrays', 'categorical.py')
+        from pandas import (

('pandas/core/arrays', 'categorical.py')
-        from pandas.core.internals.arrays import extract_array

('pandas/core/arrays', 'categorical.py')
-        import pandas._libs.hashtable as htable

('pandas/core/arrays', 'categorical.py')
+        from pandas.core.dtypes.concat import union_categoricals

('pandas/core/arrays', 'categorical.py')
+        from pandas import Index

('pandas/core/arrays', 'categorical.py')
-        from pandas.core.dtypes.concat import _concat_categorical

('pandas/core/arrays', 'categorical.py')
-        from pandas.core.internals.construction import sanitize_array

('pandas/core/arrays', 'categorical.py')
+        from pandas.core.arrays import PandasArray

('pandas/core/arrays', 'categorical.py')
+        from pandas.core.arrays import PandasArray

('pandas/core/arrays', 'categorical.py')
-    from pandas.core.algorithms import _get_data_algo, _hashtables

('pandas/core/arrays', 'categorical.py')
-    from pandas.core.algorithms import take_1d

('pandas/core/arrays', 'categorical.py')
-    from pandas.core.indexes.category import CategoricalIndex

('pandas/core/arrays', 'categorical.py')
+    from pandas import CategoricalIndex

('pandas/core/arrays', 'interval.py')
-from operator import le, lt

('pandas/core/arrays', 'interval.py')
+from __future__ import annotations

('pandas/core/arrays', 'interval.py')
+import operator

('pandas/core/arrays', 'interval.py')
+from operator import (

('pandas/core/arrays', 'interval.py')
+from typing import (

('pandas/core/arrays', 'interval.py')
+from pandas._config import get_option

('pandas/core/arrays', 'interval.py')
+from pandas._libs import (

('pandas/core/arrays', 'interval.py')
-from pandas.compat import add_metaclass

('pandas/core/arrays', 'interval.py')
+from pandas._libs.missing import NA

('pandas/core/arrays', 'interval.py')
+from pandas._typing import (

('pandas/core/arrays', 'interval.py')
-from pandas.util._doctools import _WritableDoc

('pandas/core/arrays', 'interval.py')
-from pandas.core.dtypes.cast import maybe_convert_platform

('pandas/core/arrays', 'interval.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core/arrays', 'interval.py')
+from pandas.core.dtypes.missing import (

('pandas/core/arrays', 'interval.py')
+from pandas.core.algorithms import (

('pandas/core/arrays', 'interval.py')
-from pandas.core.arrays.categorical import Categorical

('pandas/core/arrays', 'interval.py')
-from pandas.core.config import get_option

('pandas/core/arrays', 'interval.py')
-from pandas.core.indexes.base import Index, ensure_index

('pandas/core/arrays', 'interval.py')
+from pandas.core.construction import (

('pandas/core/arrays', 'interval.py')
+from pandas.core.indexers import check_array_indexer

('pandas/core/arrays', 'interval.py')
+from pandas.core.indexes.base import ensure_index

('pandas/core/arrays', 'interval.py')
+from pandas.core.ops import (

('pandas/core/arrays', 'interval.py')
+                from pandas.core.arrays import BooleanArray

('pandas/core/arrays', 'interval.py')
+        from pandas import Index

('pandas/core/arrays', 'interval.py')
+            from pandas import Index

('pandas/core/arrays', 'interval.py')
-        from pandas.core.algorithms import take

('pandas/core/arrays', 'interval.py')
-        from pandas.core.algorithms import value_counts

('pandas/core/arrays', 'interval.py')
+        from pandas import Index

('pandas/core/arrays', 'interval.py')
+        from pandas import Index

('pandas/core/arrays', 'interval.py')
+        import pyarrow

('pandas/core/arrays', 'interval.py')
+        from pandas.core.arrays._arrow_utils import ArrowIntervalType

('pandas/core/arrays', 'timedeltas.py')
-from __future__ import division

('pandas/core/arrays', 'timedeltas.py')
+from __future__ import annotations

('pandas/core/arrays', 'timedeltas.py')
-import textwrap

('pandas/core/arrays', 'timedeltas.py')
-import warnings

('pandas/core/arrays', 'timedeltas.py')
+from typing import TYPE_CHECKING

('pandas/core/arrays', 'timedeltas.py')
-from pandas._libs import lib, tslibs

('pandas/core/arrays', 'timedeltas.py')
-from pandas._libs.tslibs import NaT, Timedelta, Timestamp, iNaT

('pandas/core/arrays', 'timedeltas.py')
+from pandas._libs import (

('pandas/core/arrays', 'timedeltas.py')
+from pandas._libs.arrays import NDArrayBacked

('pandas/core/arrays', 'timedeltas.py')
+from pandas._libs.tslibs import (

('pandas/core/arrays', 'timedeltas.py')
+from pandas._libs.tslibs.conversion import (

('pandas/core/arrays', 'timedeltas.py')
-import pandas.compat as compat

('pandas/core/arrays', 'timedeltas.py')
-from pandas.util._decorators import Appender

('pandas/core/arrays', 'timedeltas.py')
+from pandas._typing import (

('pandas/core/arrays', 'timedeltas.py')
+from pandas.compat.numpy import function as nv

('pandas/core/arrays', 'timedeltas.py')
+from pandas.util._validators import validate_endpoints

('pandas/core/arrays', 'timedeltas.py')
+from pandas.core.dtypes.cast import astype_td64_unit_conversion

('pandas/core/arrays', 'timedeltas.py')
-from pandas.core import ops

('pandas/core/arrays', 'timedeltas.py')
+from pandas.core import nanops

('pandas/core/arrays', 'timedeltas.py')
+from pandas.core.arrays import (

('pandas/core/arrays', 'timedeltas.py')
+from pandas.core.arrays._ranges import generate_regular_range

('pandas/core/arrays', 'timedeltas.py')
-from pandas.tseries.frequencies import to_offset

('pandas/core/arrays', 'timedeltas.py')
-from pandas.tseries.offsets import Tick

('pandas/core/arrays', 'timedeltas.py')
-from . import datetimelike as dtl

('pandas/core/arrays', 'timedeltas.py')
+from pandas.core.construction import extract_array

('pandas/core/arrays', 'timedeltas.py')
+from pandas.core.ops.common import unpack_zerodim_and_defer

('pandas/core/arrays', 'timedeltas.py')
+    from pandas import DataFrame

('pandas/core/arrays', 'timedeltas.py')
+    from pandas.core.arrays import (

('pandas/core/arrays', 'timedeltas.py')
-        from pandas.io.formats.format import _get_format_timedelta64

('pandas/core/arrays', 'timedeltas.py')
-        from pandas.io.formats.format import _get_format_timedelta64

('pandas/core/arrays', 'timedeltas.py')
+        from pandas.io.formats.format import get_format_timedelta64

('pandas/core/arrays', 'timedeltas.py')
+        from pandas.io.formats.format import get_format_timedelta64

('pandas/core/arrays', 'timedeltas.py')
+        from pandas.core.arrays.period import PeriodArray

('pandas/core/arrays', 'datetimes.py')
-from datetime import datetime, time, timedelta

('pandas/core/arrays', 'datetimes.py')
-import textwrap

('pandas/core/arrays', 'datetimes.py')
+from __future__ import annotations

('pandas/core/arrays', 'datetimes.py')
+from datetime import (

('pandas/core/arrays', 'datetimes.py')
+from typing import (

('pandas/core/arrays', 'datetimes.py')
-from pytz import utc

('pandas/core/arrays', 'datetimes.py')
-from pandas._libs import lib, tslib

('pandas/core/arrays', 'datetimes.py')
+from pandas._libs import (

('pandas/core/arrays', 'datetimes.py')
+from pandas._libs.arrays import NDArrayBacked

('pandas/core/arrays', 'datetimes.py')
-import pandas.compat as compat

('pandas/core/arrays', 'datetimes.py')
+from pandas._typing import npt

('pandas/core/arrays', 'datetimes.py')
-from pandas.util._decorators import Appender

('pandas/core/arrays', 'datetimes.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/arrays', 'datetimes.py')
+from pandas.util._validators import validate_inclusive

('pandas/core/arrays', 'datetimes.py')
+from pandas.core.dtypes.cast import astype_dt64_to_dt64tz

('pandas/core/arrays', 'datetimes.py')
-from pandas.core.dtypes.generic import (

('pandas/core/arrays', 'datetimes.py')
+from pandas.core.dtypes.generic import ABCMultiIndex

('pandas/core/arrays', 'datetimes.py')
-from pandas.core import ops

('pandas/core/arrays', 'datetimes.py')
-from pandas.core.arrays import datetimelike as dtl

('pandas/core/arrays', 'datetimes.py')
+from pandas.core.arrays import (

('pandas/core/arrays', 'datetimes.py')
+from pandas.core.arrays.integer import IntegerArray

('pandas/core/arrays', 'datetimes.py')
-from pandas.tseries.frequencies import get_period_alias, to_offset

('pandas/core/arrays', 'datetimes.py')
-from pandas.tseries.offsets import Day, Tick

('pandas/core/arrays', 'datetimes.py')
+from pandas.core.construction import extract_array

('pandas/core/arrays', 'datetimes.py')
+from pandas.tseries.frequencies import get_period_alias

('pandas/core/arrays', 'datetimes.py')
+from pandas.tseries.offsets import (

('pandas/core/arrays', 'datetimes.py')
+    from pandas import DataFrame

('pandas/core/arrays', 'datetimes.py')
+    from pandas.core.arrays import (

('pandas/core/arrays', 'datetimes.py')
-        from pandas.io.formats.format import _get_format_datetime64_from_values

('pandas/core/arrays', 'datetimes.py')
+        from pandas.io.formats.format import get_format_datetime64_from_values

('pandas/core/arrays', 'datetimes.py')
+        from pandas import DataFrame

('pandas/core/arrays', 'datetimes.py')
+        from pandas.core.arrays import TimedeltaArray

('pandas/core/arrays', '__init__.py')
-from .array_ import array  # noqa

('pandas/core/arrays', '__init__.py')
-from .base import (ExtensionArray,    # noqa

('pandas/core/arrays', '__init__.py')
-from .categorical import Categorical  # noqa

('pandas/core/arrays', '__init__.py')
-from .datetimes import DatetimeArray  # noqa

('pandas/core/arrays', '__init__.py')
-from .interval import IntervalArray  # noqa

('pandas/core/arrays', '__init__.py')
-from .period import PeriodArray, period_array  # noqa

('pandas/core/arrays', '__init__.py')
-from .timedeltas import TimedeltaArray  # noqa

('pandas/core/arrays', '__init__.py')
-from .integer import (  # noqa

('pandas/core/arrays', '__init__.py')
-from .sparse import SparseArray  # noqa

('pandas/core/arrays', '__init__.py')
-from .numpy_ import PandasArray, PandasDtype  # noqa

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.base import (

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.boolean import BooleanArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.categorical import Categorical

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.datetimes import DatetimeArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.floating import FloatingArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.integer import IntegerArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.interval import IntervalArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.masked import BaseMaskedArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.numpy_ import PandasArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.period import (

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.sparse import SparseArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.string_ import StringArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.string_arrow import ArrowStringArray

('pandas/core/arrays', '__init__.py')
+from pandas.core.arrays.timedeltas import TimedeltaArray

('pandas/core/arrays', 'numpy_.py')
-import numbers

('pandas/core/arrays', 'numpy_.py')
+from __future__ import annotations

('pandas/core/arrays', 'numpy_.py')
+from pandas._typing import (

('pandas/core/arrays', 'numpy_.py')
-from pandas.util._validators import validate_fillna_kwargs

('pandas/core/arrays', 'numpy_.py')
-from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/arrays', 'numpy_.py')
-from pandas.core.dtypes.generic import ABCIndexClass, ABCSeries

('pandas/core/arrays', 'numpy_.py')
-from pandas.core.dtypes.inference import is_array_like, is_list_like

('pandas/core/arrays', 'numpy_.py')
-from pandas import compat

('pandas/core/arrays', 'numpy_.py')
-from pandas.core import nanops

('pandas/core/arrays', 'numpy_.py')
-from pandas.core.missing import backfill_1d, pad_1d

('pandas/core/arrays', 'numpy_.py')
-from .base import ExtensionArray, ExtensionOpsMixin

('pandas/core/arrays', 'numpy_.py')
-    from numpy.lib.mixins import NDArrayOperatorsMixin

('pandas/core/arrays', 'numpy_.py')
+from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike

('pandas/core/arrays', 'numpy_.py')
+from pandas.core.dtypes.dtypes import PandasDtype

('pandas/core/arrays', 'numpy_.py')
+from pandas.core.dtypes.missing import isna

('pandas/core/arrays', 'numpy_.py')
+from pandas.core import (

('pandas/core/arrays', 'numpy_.py')
+from pandas.core.arraylike import OpsMixin

('pandas/core/arrays', 'numpy_.py')
+from pandas.core.arrays._mixins import NDArrayBackedExtensionArray

('pandas/core/arrays', 'numpy_.py')
+from pandas.core.construction import ensure_wrapped_if_datetimelike

('pandas/core/arrays', 'numpy_.py')
+from pandas.core.strings.object_array import ObjectStringArrayMixin

('pandas/core/arrays', 'numpy_.py')
-        from pandas.core.internals.arrays import extract_array

('pandas/core/arrays', 'numpy_.py')
-        from pandas import isna

('pandas/core/arrays', 'numpy_.py')
-        from pandas.core.algorithms import take

('pandas/core/arrays', 'numpy_.py')
+            from pandas.core.arrays import TimedeltaArray

('pandas/core/arrays', 'numpy_.py')
-        from pandas import unique

('pandas/core/arrays', '_ranges.py')
+from __future__ import annotations

('pandas/core/arrays', '_ranges.py')
-from pandas._libs.tslibs import OutOfBoundsDatetime, Timestamp

('pandas/core/arrays', '_ranges.py')
-from pandas.tseries.offsets import Tick, generate_range

('pandas/core/arrays', '_ranges.py')
+from pandas._libs.lib import i8max

('pandas/core/arrays', '_ranges.py')
+from pandas._libs.tslibs import (

('pandas/core/arrays', 'integer.py')
-import copy

('pandas/core/arrays', 'integer.py')
-import sys

('pandas/core/arrays', 'integer.py')
-import warnings

('pandas/core/arrays', 'integer.py')
+from __future__ import annotations

('pandas/core/arrays', 'integer.py')
+from typing import overload

('pandas/core/arrays', 'integer.py')
-from pandas._libs import lib

('pandas/core/arrays', 'integer.py')
-from pandas.compat import range, set_function_name, string_types

('pandas/core/arrays', 'integer.py')
+from pandas._libs import (

('pandas/core/arrays', 'integer.py')
+from pandas._typing import (

('pandas/core/arrays', 'integer.py')
-from pandas.core.dtypes.base import ExtensionDtype

('pandas/core/arrays', 'integer.py')
-from pandas.core.dtypes.cast import astype_nansafe

('pandas/core/arrays', 'integer.py')
+from pandas.core.dtypes.base import (

('pandas/core/arrays', 'integer.py')
-from pandas.core.dtypes.dtypes import register_extension_dtype

('pandas/core/arrays', 'integer.py')
-from pandas.core.dtypes.generic import ABCIndexClass, ABCSeries

('pandas/core/arrays', 'integer.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core/arrays', 'integer.py')
-from pandas.core import nanops

('pandas/core/arrays', 'integer.py')
-from pandas.core.arrays import ExtensionArray, ExtensionOpsMixin

('pandas/core/arrays', 'integer.py')
+from pandas.core.arrays import ExtensionArray

('pandas/core/arrays', 'integer.py')
+from pandas.core.arrays.masked import BaseMaskedDtype

('pandas/core/arrays', 'integer.py')
+from pandas.core.arrays.numeric import (

('pandas/core/arrays', 'integer.py')
+            from pandas.core.arrays.floating import FLOAT_STR_TO_DTYPE

('pandas/core/arrays', 'integer.py')
-        from pandas.api.extensions import take

('pandas/core/arrays', 'integer.py')
-        from pandas import Index, Series

('pandas/core/arrays', 'period.py')
+from __future__ import annotations

('pandas/core/arrays', 'period.py')
+from typing import (

('pandas/core/arrays', 'period.py')
+from pandas._libs import algos as libalgos

('pandas/core/arrays', 'period.py')
+from pandas._libs.arrays import NDArrayBacked

('pandas/core/arrays', 'period.py')
+from pandas._libs.tslibs.dtypes import FreqGroup

('pandas/core/arrays', 'period.py')
+from pandas._libs.tslibs.offsets import (

('pandas/core/arrays', 'period.py')
-from pandas._libs.tslibs.timedeltas import Timedelta, delta_to_nanoseconds

('pandas/core/arrays', 'period.py')
-import pandas.compat as compat

('pandas/core/arrays', 'period.py')
-from pandas.util._decorators import Appender, cache_readonly

('pandas/core/arrays', 'period.py')
+from pandas._typing import (

('pandas/core/arrays', 'period.py')
+from pandas.util._decorators import (

('pandas/core/arrays', 'period.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/core/arrays', 'period.py')
+from pandas.core.dtypes.missing import (

('pandas/core/arrays', 'period.py')
+from pandas.core.arrays.base import ExtensionArray

('pandas/core/arrays', 'period.py')
-from pandas.tseries import frequencies

('pandas/core/arrays', 'period.py')
-from pandas.tseries.offsets import DateOffset, Tick, _delta_to_tick

('pandas/core/arrays', 'period.py')
+    from pandas._typing import (

('pandas/core/arrays', 'period.py')
+    from pandas.core.arrays import DatetimeArray

('pandas/core/arrays', 'period.py')
+        import pyarrow

('pandas/core/arrays', 'period.py')
+        from pandas.core.arrays._arrow_utils import ArrowPeriodType

('pandas/core/arrays', 'datetimelike.py')
-from datetime import datetime, timedelta

('pandas/core/arrays', 'datetimelike.py')
+from __future__ import annotations

('pandas/core/arrays', 'datetimelike.py')
+from datetime import (

('pandas/core/arrays', 'datetimelike.py')
+from typing import (

('pandas/core/arrays', 'datetimelike.py')
-from pandas._libs import NaT, algos, iNaT, lib

('pandas/core/arrays', 'datetimelike.py')
-from pandas._libs.tslibs.period import (

('pandas/core/arrays', 'datetimelike.py')
-from pandas._libs.tslibs.timedeltas import Timedelta, delta_to_nanoseconds

('pandas/core/arrays', 'datetimelike.py')
-from pandas._libs.tslibs.timestamps import (

('pandas/core/arrays', 'datetimelike.py')
-import pandas.compat as compat

('pandas/core/arrays', 'datetimelike.py')
+from pandas._libs import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas._libs.tslibs import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas._libs.tslibs.fields import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas._libs.tslibs.timestamps import integer_op_not_supported

('pandas/core/arrays', 'datetimelike.py')
+from pandas._typing import (

('pandas/core/arrays', 'datetimelike.py')
-from pandas.util._decorators import Appender, Substitution

('pandas/core/arrays', 'datetimelike.py')
-from pandas.util._validators import validate_fillna_kwargs

('pandas/core/arrays', 'datetimelike.py')
+from pandas.util._decorators import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/arrays', 'datetimelike.py')
-from pandas.core.dtypes.generic import ABCDataFrame, ABCIndexClass, ABCSeries

('pandas/core/arrays', 'datetimelike.py')
-from pandas.core.dtypes.inference import is_array_like

('pandas/core/arrays', 'datetimelike.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/arrays', 'datetimelike.py')
-from pandas.core import missing, nanops

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.dtypes.missing import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.arraylike import OpsMixin

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.arrays._mixins import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.construction import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.indexers import (

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.ops.common import unpack_zerodim_and_defer

('pandas/core/arrays', 'datetimelike.py')
+from pandas.core.ops.invalid import (

('pandas/core/arrays', 'datetimelike.py')
-from pandas.tseries.offsets import DateOffset, Tick

('pandas/core/arrays', 'datetimelike.py')
-from .base import ExtensionArray, ExtensionOpsMixin

('pandas/core/arrays', 'datetimelike.py')
+    from pandas.core.arrays import (

('pandas/core/arrays', 'datetimelike.py')
-        from pandas import Index

('pandas/core/arrays', 'datetimelike.py')
-        from pandas import Categorical

('pandas/core/arrays', 'datetimelike.py')
-        from pandas import Series, Index

('pandas/core/arrays', 'datetimelike.py')
-            from pandas import TimedeltaIndex

('pandas/core/arrays', 'datetimelike.py')
+            from pandas.core.arrays import TimedeltaArray

('pandas/core/arrays', 'datetimelike.py')
-    from pandas import Index

('pandas/core/arrays', 'datetimelike.py')
-    from pandas.core.arrays import PeriodArray

('pandas/core/arrays', 'base.py')
+from __future__ import annotations

('pandas/core/arrays', 'base.py')
+from typing import (

('pandas/core/arrays', 'base.py')
-from pandas.compat import PY3, set_function_name

('pandas/core/arrays', 'base.py')
+from pandas._libs import lib

('pandas/core/arrays', 'base.py')
+from pandas._typing import (

('pandas/core/arrays', 'base.py')
+from pandas.compat import set_function_name

('pandas/core/arrays', 'base.py')
-from pandas.util._decorators import Appender, Substitution

('pandas/core/arrays', 'base.py')
-from pandas.core.dtypes.common import is_list_like

('pandas/core/arrays', 'base.py')
-from pandas.core.dtypes.generic import ABCIndexClass, ABCSeries

('pandas/core/arrays', 'base.py')
+from pandas.util._decorators import (

('pandas/core/arrays', 'base.py')
+from pandas.util._validators import (

('pandas/core/arrays', 'base.py')
+from pandas.core.dtypes.cast import maybe_cast_to_extension_array

('pandas/core/arrays', 'base.py')
+from pandas.core.dtypes.common import (

('pandas/core/arrays', 'base.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/arrays', 'base.py')
+from pandas.core.dtypes.generic import (

('pandas/core/arrays', 'base.py')
-from pandas.core import ops

('pandas/core/arrays', 'base.py')
+from pandas.core import (

('pandas/core/arrays', 'base.py')
+from pandas.core.algorithms import (

('pandas/core/arrays', 'base.py')
+from pandas.core.array_algos.quantile import quantile_with_mask

('pandas/core/arrays', 'base.py')
+from pandas.core.sorting import (

('pandas/core/arrays', 'base.py')
+    from pandas._typing import (

('pandas/core/arrays', 'base.py')
-        from pandas.api.types import is_array_like

('pandas/core/arrays', 'base.py')
-        from pandas.util._validators import validate_fillna_kwargs

('pandas/core/arrays', 'base.py')
-        from pandas.core.missing import pad_1d, backfill_1d

('pandas/core/arrays', 'base.py')
-        from pandas import unique

('pandas/core/arrays', 'base.py')
-        from pandas.core.algorithms import _factorize_array

('pandas/core/arrays', 'base.py')
+        from pandas.io.formats.printing import format_object_summary

('pandas/core/sparse', 'api.py')
-from pandas.core.arrays.sparse import SparseArray, SparseDtype

('pandas/core/sparse', 'api.py')
-from pandas.core.sparse.frame import SparseDataFrame

('pandas/core/sparse', 'api.py')
-from pandas.core.sparse.series import SparseSeries

('pandas/core/sparse', 'api.py')
+from pandas.core.arrays.sparse import (

('pandas/core/indexes', 'accessors.py')
+from __future__ import annotations

('pandas/core/indexes', 'accessors.py')
+from typing import TYPE_CHECKING

('pandas/core/indexes', 'accessors.py')
+import warnings

('pandas/core/indexes', 'accessors.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'accessors.py')
-from pandas.core.accessor import PandasDelegate, delegate_names

('pandas/core/indexes', 'accessors.py')
-from pandas.core.algorithms import take_1d

('pandas/core/indexes', 'accessors.py')
-from pandas.core.arrays import DatetimeArray, PeriodArray, TimedeltaArray

('pandas/core/indexes', 'accessors.py')
-from pandas.core.base import NoNewAttributesMixin, PandasObject

('pandas/core/indexes', 'accessors.py')
+from pandas.core.accessor import (

('pandas/core/indexes', 'accessors.py')
+from pandas.core.arrays import (

('pandas/core/indexes', 'accessors.py')
+from pandas.core.base import (

('pandas/core/indexes', 'accessors.py')
+    from pandas import Series

('pandas/core/indexes', 'accessors.py')
-        from pandas import Series

('pandas/core/indexes', 'interval.py')
+from __future__ import annotations

('pandas/core/indexes', 'interval.py')
+from operator import (

('pandas/core/indexes', 'interval.py')
-import warnings

('pandas/core/indexes', 'interval.py')
+from typing import (

('pandas/core/indexes', 'interval.py')
-from pandas._libs import Timedelta, Timestamp

('pandas/core/indexes', 'interval.py')
-from pandas._libs.interval import Interval, IntervalMixin, IntervalTree

('pandas/core/indexes', 'interval.py')
-from pandas.compat import add_metaclass

('pandas/core/indexes', 'interval.py')
-from pandas.util._decorators import Appender, cache_readonly

('pandas/core/indexes', 'interval.py')
-from pandas.util._doctools import _WritableDoc

('pandas/core/indexes', 'interval.py')
+from pandas._libs import lib

('pandas/core/indexes', 'interval.py')
+from pandas._libs.interval import (

('pandas/core/indexes', 'interval.py')
+from pandas._libs.tslibs import (

('pandas/core/indexes', 'interval.py')
+from pandas._typing import (

('pandas/core/indexes', 'interval.py')
+from pandas.errors import InvalidIndexError

('pandas/core/indexes', 'interval.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'interval.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/indexes', 'interval.py')
-from pandas.core.arrays.interval import IntervalArray, _interval_shared_docs

('pandas/core/indexes', 'interval.py')
+from pandas.core.dtypes.dtypes import IntervalDtype

('pandas/core/indexes', 'interval.py')
+from pandas.core.dtypes.missing import is_valid_na_for_dtype

('pandas/core/indexes', 'interval.py')
+from pandas.core.algorithms import unique

('pandas/core/indexes', 'interval.py')
+from pandas.core.arrays.interval import (

('pandas/core/indexes', 'interval.py')
-from pandas.core.config import get_option

('pandas/core/indexes', 'interval.py')
+from pandas.core.indexers import is_valid_positional_slice

('pandas/core/indexes', 'interval.py')
-from pandas.core.indexes.datetimes import DatetimeIndex, date_range

('pandas/core/indexes', 'interval.py')
+from pandas.core.indexes.datetimes import (

('pandas/core/indexes', 'interval.py')
+from pandas.core.indexes.extension import (

('pandas/core/indexes', 'interval.py')
-from pandas.core.indexes.timedeltas import TimedeltaIndex, timedelta_range

('pandas/core/indexes', 'interval.py')
-from pandas.core.ops import get_op_result_name

('pandas/core/indexes', 'interval.py')
-from pandas.tseries.frequencies import to_offset

('pandas/core/indexes', 'interval.py')
-from pandas.tseries.offsets import DateOffset

('pandas/core/indexes', 'interval.py')
+from pandas.core.indexes.timedeltas import (

('pandas/core/indexes', 'interval.py')
-        from pandas.io.formats.format import ExtensionArrayFormatter

('pandas/core/indexes', 'timedeltas.py')
-from datetime import datetime

('pandas/core/indexes', 'timedeltas.py')
-import warnings

('pandas/core/indexes', 'timedeltas.py')
-import numpy as np

('pandas/core/indexes', 'timedeltas.py')
+from __future__ import annotations

('pandas/core/indexes', 'timedeltas.py')
-import pandas.compat as compat

('pandas/core/indexes', 'timedeltas.py')
-from pandas.util._decorators import Appender, Substitution

('pandas/core/indexes', 'timedeltas.py')
+from pandas._libs.tslibs import (

('pandas/core/indexes', 'timedeltas.py')
+from pandas._typing import DtypeObj

('pandas/core/indexes', 'timedeltas.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.accessor import delegate_names

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.arrays.timedeltas import TimedeltaArray, _is_convertible_to_td

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.base import _shared_docs

('pandas/core/indexes', 'timedeltas.py')
+from pandas.core.arrays.timedeltas import TimedeltaArray

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.indexes.base import Index, _index_shared_docs

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.indexes.datetimelike import (

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.indexes.numeric import Int64Index

('pandas/core/indexes', 'timedeltas.py')
-from pandas.core.ops import get_op_result_name

('pandas/core/indexes', 'timedeltas.py')
-from pandas.tseries.frequencies import to_offset

('pandas/core/indexes', 'timedeltas.py')
+from pandas.core.indexes.base import (

('pandas/core/indexes', 'timedeltas.py')
+from pandas.core.indexes.datetimelike import DatetimeTimedeltaMixin

('pandas/core/indexes', 'timedeltas.py')
+from pandas.core.indexes.extension import inherit_names

('pandas/core/indexes', 'timedeltas.py')
-        from pandas.io.formats.format import _get_format_timedelta64

('pandas/core/indexes', 'timedeltas.py')
-        from pandas.io.formats.format import Timedelta64Formatter

('pandas/core/indexes', 'range.py')
+from __future__ import annotations

('pandas/core/indexes', 'range.py')
+from typing import (

('pandas/core/indexes', 'range.py')
-from pandas._libs import index as libindex, lib

('pandas/core/indexes', 'range.py')
-import pandas.compat as compat

('pandas/core/indexes', 'range.py')
-from pandas.compat import get_range_parameters, lrange, range

('pandas/core/indexes', 'range.py')
+from pandas._libs import (

('pandas/core/indexes', 'range.py')
+from pandas._libs.lib import no_default

('pandas/core/indexes', 'range.py')
+from pandas._typing import (

('pandas/core/indexes', 'range.py')
-from pandas.util._decorators import Appender, cache_readonly

('pandas/core/indexes', 'range.py')
-from pandas.core.dtypes import concat as _concat

('pandas/core/indexes', 'range.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'range.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'range.py')
-from pandas.core.dtypes.generic import (

('pandas/core/indexes', 'range.py')
+from pandas.core.dtypes.generic import ABCTimedeltaIndex

('pandas/core/indexes', 'range.py')
+from pandas.core.construction import extract_array

('pandas/core/indexes', 'range.py')
-from pandas.core.indexes.base import Index, _index_shared_docs

('pandas/core/indexes', 'range.py')
-from pandas.core.indexes.numeric import Int64Index

('pandas/core/indexes', 'range.py')
+from pandas.core.indexes.base import maybe_extract_name

('pandas/core/indexes', 'range.py')
+from pandas.core.indexes.numeric import (

('pandas/core/indexes', 'range.py')
+from pandas.core.ops.common import unpack_zerodim_and_defer

('pandas/core/indexes', 'range.py')
+    from pandas import Index

('pandas/core/indexes', 'datetimes.py')
-from __future__ import division

('pandas/core/indexes', 'datetimes.py')
-from datetime import datetime, time, timedelta

('pandas/core/indexes', 'datetimes.py')
+from __future__ import annotations

('pandas/core/indexes', 'datetimes.py')
+from datetime import (

('pandas/core/indexes', 'datetimes.py')
+from typing import (

('pandas/core/indexes', 'datetimes.py')
-from pandas._libs.tslibs import ccalendar, fields, parsing, timezones

('pandas/core/indexes', 'datetimes.py')
-import pandas.compat as compat

('pandas/core/indexes', 'datetimes.py')
-from pandas.util._decorators import Appender, Substitution, cache_readonly

('pandas/core/indexes', 'datetimes.py')
+from pandas._libs.tslibs import (

('pandas/core/indexes', 'datetimes.py')
+from pandas._libs.tslibs.offsets import prefix_mapping

('pandas/core/indexes', 'datetimes.py')
+from pandas._typing import (

('pandas/core/indexes', 'datetimes.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'datetimes.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'datetimes.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.dtypes.dtypes import DatetimeTZDtype

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.accessor import delegate_names

('pandas/core/indexes', 'datetimes.py')
+from pandas.core.dtypes.missing import is_valid_na_for_dtype

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.base import _shared_docs

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.indexes.base import Index

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.indexes.datetimelike import (

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.indexes.numeric import Int64Index

('pandas/core/indexes', 'datetimes.py')
-from pandas.core.ops import get_op_result_name

('pandas/core/indexes', 'datetimes.py')
-import pandas.core.tools.datetimes as tools

('pandas/core/indexes', 'datetimes.py')
-from pandas.tseries import offsets

('pandas/core/indexes', 'datetimes.py')
-from pandas.tseries.frequencies import Resolution, to_offset

('pandas/core/indexes', 'datetimes.py')
-from pandas.tseries.offsets import CDay, prefix_mapping

('pandas/core/indexes', 'datetimes.py')
+from pandas.core.indexes.base import (

('pandas/core/indexes', 'datetimes.py')
+from pandas.core.indexes.datetimelike import DatetimeTimedeltaMixin

('pandas/core/indexes', 'datetimes.py')
+from pandas.core.indexes.extension import inherit_names

('pandas/core/indexes', 'datetimes.py')
+from pandas.core.tools.times import to_time

('pandas/core/indexes', 'datetimes.py')
+    from pandas import (

('pandas/core/indexes', 'datetimes.py')
+        from pandas.core.indexes.api import PeriodIndex

('pandas/core/indexes', 'datetimes.py')
+        from pandas.core.indexes.api import TimedeltaIndex

('pandas/core/indexes', 'datetimes.py')
+        from pandas.core.indexes.api import Float64Index

('pandas/core/indexes', 'datetimes.py')
-        from pandas.io.formats.format import _is_dates_only

('pandas/core/indexes', 'datetimes.py')
+        from pandas.io.formats.format import is_dates_only

('pandas/core/indexes', 'datetimes.py')
-        from pandas.io.formats.format import _get_format_datetime64_from_values

('pandas/core/indexes', 'datetimes.py')
-        from pandas.io.formats.format import _get_format_datetime64

('pandas/core/indexes', 'datetimes.py')
+        from pandas.io.formats.format import get_format_datetime64

('pandas/core/indexes', 'datetimes.py')
-        from dateutil.parser import parse

('pandas/core/indexes', 'datetimes.py')
+            from dateutil.parser import parse

('pandas/core/indexes', 'multi.py')
-from collections import OrderedDict

('pandas/core/indexes', 'multi.py')
-import datetime

('pandas/core/indexes', 'multi.py')
+from __future__ import annotations

('pandas/core/indexes', 'multi.py')
+from functools import wraps

('pandas/core/indexes', 'multi.py')
+from typing import (

('pandas/core/indexes', 'multi.py')
+from pandas._config import get_option

('pandas/core/indexes', 'multi.py')
-import pandas.compat as compat

('pandas/core/indexes', 'multi.py')
-from pandas.compat import lrange, lzip, map, range, zip

('pandas/core/indexes', 'multi.py')
+from pandas._libs.hashtable import duplicated

('pandas/core/indexes', 'multi.py')
+from pandas._typing import (

('pandas/core/indexes', 'multi.py')
-from pandas.errors import PerformanceWarning, UnsortedIndexError

('pandas/core/indexes', 'multi.py')
-from pandas.util._decorators import Appender, cache_readonly, deprecate_kwarg

('pandas/core/indexes', 'multi.py')
+from pandas.errors import (

('pandas/core/indexes', 'multi.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'multi.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'multi.py')
+from pandas.core.dtypes.cast import coerce_indexer_dtype

('pandas/core/indexes', 'multi.py')
-from pandas.core.dtypes.dtypes import ExtensionDtype, PandasExtensionDtype

('pandas/core/indexes', 'multi.py')
-from pandas.core.dtypes.generic import ABCDataFrame

('pandas/core/indexes', 'multi.py')
-from pandas.core.dtypes.missing import array_equivalent, isna

('pandas/core/indexes', 'multi.py')
+from pandas.core.dtypes.dtypes import ExtensionDtype

('pandas/core/indexes', 'multi.py')
+from pandas.core.dtypes.generic import (

('pandas/core/indexes', 'multi.py')
+from pandas.core.dtypes.missing import (

('pandas/core/indexes', 'multi.py')
+from pandas.core.arrays import Categorical

('pandas/core/indexes', 'multi.py')
+from pandas.core.arrays.categorical import factorize_from_iterables

('pandas/core/indexes', 'multi.py')
-from pandas.core.config import get_option

('pandas/core/indexes', 'multi.py')
-from pandas.core.indexes.frozen import FrozenList, _ensure_frozen

('pandas/core/indexes', 'multi.py')
-import pandas.core.missing as missing

('pandas/core/indexes', 'multi.py')
+from pandas.core.indexes.frozen import FrozenList

('pandas/core/indexes', 'multi.py')
+from pandas.core.indexes.numeric import Int64Index

('pandas/core/indexes', 'multi.py')
+from pandas.core.ops.invalid import make_invalid_op

('pandas/core/indexes', 'multi.py')
+from pandas.core.sorting import (

('pandas/core/indexes', 'multi.py')
+    from pandas import (

('pandas/core/indexes', 'multi.py')
-        from pandas.core.arrays.categorical import _factorize_from_iterables

('pandas/core/indexes', 'multi.py')
-        from pandas.core.arrays.categorical import _factorize_from_iterables

('pandas/core/indexes', 'multi.py')
+        from pandas import Series

('pandas/core/indexes', 'multi.py')
-            from pandas.io.formats.format import _get_adjustment

('pandas/core/indexes', 'multi.py')
+            from pandas.io.formats.format import get_adjustment

('pandas/core/indexes', 'multi.py')
-        from pandas.core.util.hashing import hash_tuples

('pandas/core/indexes', 'multi.py')
-        from pandas.core.util.hashing import hash_tuples, hash_tuple

('pandas/core/indexes', 'multi.py')
-        from pandas.core.sorting import get_group_index

('pandas/core/indexes', 'multi.py')
-        from pandas._libs.hashtable import duplicated_int64

('pandas/core/indexes', 'multi.py')
-        from pandas.core.indexing import maybe_droplevels

('pandas/core/indexes', 'multi.py')
-        from pandas.core.arrays import Categorical

('pandas/core/indexes', 'multi.py')
-        from pandas.core.sorting import indexer_from_factorized

('pandas/core/indexes', 'multi.py')
-            from pandas.core.sorting import lexsort_indexer

('pandas/core/indexes', 'multi.py')
-        from .numeric import Int64Index

('pandas/core/indexes', 'api.py')
+from __future__ import annotations

('pandas/core/indexes', 'api.py')
-import warnings

('pandas/core/indexes', 'api.py')
-from pandas._libs import NaT, lib

('pandas/core/indexes', 'api.py')
-import pandas.core.common as com

('pandas/core/indexes', 'api.py')
+from pandas._libs import (

('pandas/core/indexes', 'api.py')
+from pandas.errors import InvalidIndexError

('pandas/core/indexes', 'api.py')
+from pandas.core.dtypes.common import is_dtype_equal

('pandas/core/indexes', 'api.py')
-from pandas.core.indexes.base import InvalidIndexError  # noqa:F401

('pandas/core/indexes', 'api.py')
-from pandas.core.indexes.category import CategoricalIndex  # noqa:F401

('pandas/core/indexes', 'api.py')
+from pandas.core.indexes.category import CategoricalIndex

('pandas/core/indexes', 'api.py')
-from pandas.core.indexes.interval import IntervalIndex  # noqa:F401

('pandas/core/indexes', 'api.py')
-from pandas.core.indexes.multi import MultiIndex  # noqa:F401

('pandas/core/indexes', 'api.py')
-from pandas.core.indexes.numeric import (  # noqa:F401

('pandas/core/indexes', 'api.py')
+from pandas.core.indexes.interval import IntervalIndex

('pandas/core/indexes', 'api.py')
+from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'api.py')
+from pandas.core.indexes.numeric import (

('pandas/core/indexes', 'api.py')
-from pandas.core.indexes.range import RangeIndex  # noqa:F401

('pandas/core/indexes', 'api.py')
+from pandas.core.indexes.range import RangeIndex

('pandas/core/indexes', 'period.py')
-from datetime import datetime, timedelta

('pandas/core/indexes', 'period.py')
+from __future__ import annotations

('pandas/core/indexes', 'period.py')
+from datetime import (

('pandas/core/indexes', 'period.py')
+from typing import Hashable

('pandas/core/indexes', 'period.py')
-from pandas._libs import index as libindex

('pandas/core/indexes', 'period.py')
+from pandas._libs import (

('pandas/core/indexes', 'period.py')
-from pandas._libs.tslibs.period import (

('pandas/core/indexes', 'period.py')
-from pandas.util._decorators import Appender, Substitution, cache_readonly

('pandas/core/indexes', 'period.py')
+from pandas._typing import (

('pandas/core/indexes', 'period.py')
+from pandas.util._decorators import doc

('pandas/core/indexes', 'period.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'period.py')
-from pandas import compat

('pandas/core/indexes', 'period.py')
-from pandas.core import common as com

('pandas/core/indexes', 'period.py')
-from pandas.core.accessor import delegate_names

('pandas/core/indexes', 'period.py')
-from pandas.core.algorithms import unique1d

('pandas/core/indexes', 'period.py')
+from pandas.core.dtypes.dtypes import PeriodDtype

('pandas/core/indexes', 'period.py')
+from pandas.core.dtypes.missing import is_valid_na_for_dtype

('pandas/core/indexes', 'period.py')
-from pandas.core.base import _shared_docs

('pandas/core/indexes', 'period.py')
+import pandas.core.common as com

('pandas/core/indexes', 'period.py')
-from pandas.core.indexes.base import _index_shared_docs, ensure_index

('pandas/core/indexes', 'period.py')
-from pandas.core.indexes.datetimelike import (

('pandas/core/indexes', 'period.py')
-from pandas.core.indexes.datetimes import DatetimeIndex, Index, Int64Index

('pandas/core/indexes', 'period.py')
-from pandas.core.missing import isna

('pandas/core/indexes', 'period.py')
-from pandas.core.ops import get_op_result_name

('pandas/core/indexes', 'period.py')
-from pandas.core.tools.datetimes import DateParseError, parse_time_string

('pandas/core/indexes', 'period.py')
-from pandas.tseries import frequencies

('pandas/core/indexes', 'period.py')
-from pandas.tseries.offsets import DateOffset, Tick

('pandas/core/indexes', 'period.py')
+from pandas.core.indexes.base import maybe_extract_name

('pandas/core/indexes', 'period.py')
+from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin

('pandas/core/indexes', 'period.py')
+from pandas.core.indexes.datetimes import (

('pandas/core/indexes', 'period.py')
+from pandas.core.indexes.extension import inherit_names

('pandas/core/indexes', 'period.py')
+from pandas.core.indexes.numeric import Int64Index

('pandas/core/indexes', 'frozen.py')
+from __future__ import annotations

('pandas/core/indexes', 'frozen.py')
-import warnings

('pandas/core/indexes', 'frozen.py')
-import numpy as np

('pandas/core/indexes', 'frozen.py')
-from pandas.util._decorators import deprecate_kwarg

('pandas/core/indexes', 'frozen.py')
-from pandas.core.dtypes.cast import coerce_indexer_dtype

('pandas/core/indexes', 'frozen.py')
+from typing import Any

('pandas/core/indexes', 'numeric.py')
+from __future__ import annotations

('pandas/core/indexes', 'numeric.py')
+from typing import (

('pandas/core/indexes', 'numeric.py')
-from pandas._libs import index as libindex

('pandas/core/indexes', 'numeric.py')
-import pandas.compat as compat

('pandas/core/indexes', 'numeric.py')
-from pandas.util._decorators import Appender, cache_readonly

('pandas/core/indexes', 'numeric.py')
+from pandas._libs import (

('pandas/core/indexes', 'numeric.py')
+from pandas._typing import (

('pandas/core/indexes', 'numeric.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'numeric.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'numeric.py')
+from pandas.core.dtypes.cast import astype_nansafe

('pandas/core/indexes', 'numeric.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/indexes', 'numeric.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/indexes', 'numeric.py')
-from pandas.core import algorithms

('pandas/core/indexes', 'numeric.py')
-import pandas.core.common as com

('pandas/core/indexes', 'numeric.py')
-import pandas.core.indexes.base as ibase

('pandas/core/indexes', 'numeric.py')
+from pandas.core.dtypes.generic import ABCSeries

('pandas/core/indexes', 'numeric.py')
-from pandas.core.ops import get_op_result_name

('pandas/core/indexes', 'numeric.py')
+        from pandas.io.formats.format import FloatArrayFormatter

('pandas/core/indexes', 'numeric.py')
-        from pandas.io.formats.format import FloatArrayFormatter

('pandas/core/indexes', 'datetimelike.py')
-import operator

('pandas/core/indexes', 'datetimelike.py')
+from __future__ import annotations

('pandas/core/indexes', 'datetimelike.py')
+from datetime import datetime

('pandas/core/indexes', 'datetimelike.py')
+from typing import (

('pandas/core/indexes', 'datetimelike.py')
-from pandas._libs import NaT, iNaT, lib

('pandas/core/indexes', 'datetimelike.py')
+from pandas._libs import (

('pandas/core/indexes', 'datetimelike.py')
+from pandas._libs.tslibs import (

('pandas/core/indexes', 'datetimelike.py')
-from pandas.errors import AbstractMethodError

('pandas/core/indexes', 'datetimelike.py')
-from pandas.util._decorators import Appender, cache_readonly, deprecate_kwarg

('pandas/core/indexes', 'datetimelike.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'datetimelike.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'datetimelike.py')
-from pandas.core.dtypes.generic import ABCIndex, ABCIndexClass, ABCSeries

('pandas/core/indexes', 'datetimelike.py')
-from pandas.core import algorithms, ops

('pandas/core/indexes', 'datetimelike.py')
-from pandas.core.accessor import PandasDelegate

('pandas/core/indexes', 'datetimelike.py')
-from pandas.core.arrays import ExtensionOpsMixin

('pandas/core/indexes', 'datetimelike.py')
-from pandas.core.arrays.datetimelike import (

('pandas/core/indexes', 'datetimelike.py')
+from pandas.core.dtypes.concat import concat_compat

('pandas/core/indexes', 'datetimelike.py')
+from pandas.core.arrays import (

('pandas/core/indexes', 'datetimelike.py')
+from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin

('pandas/core/indexes', 'datetimelike.py')
+import pandas.core.common as com

('pandas/core/indexes', 'datetimelike.py')
-from pandas.core.indexes.base import Index, _index_shared_docs

('pandas/core/indexes', 'datetimelike.py')
+from pandas.core.indexes.base import (

('pandas/core/indexes', 'datetimelike.py')
+from pandas.core.indexes.extension import (

('pandas/core/indexes', 'datetimelike.py')
+from pandas.core.indexes.range import RangeIndex

('pandas/core/indexes', 'datetimelike.py')
-import pandas.io.formats.printing as printing

('pandas/core/indexes', 'datetimelike.py')
+    from pandas import CategoricalIndex

('pandas/core/indexes', 'datetimelike.py')
-        from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin

('pandas/core/indexes', 'datetimelike.py')
-    # Especially important for group-by functionality

('pandas/core/indexes', 'base.py')
-from datetime import datetime, timedelta

('pandas/core/indexes', 'base.py')
+from __future__ import annotations

('pandas/core/indexes', 'base.py')
+from datetime import datetime

('pandas/core/indexes', 'base.py')
+import functools

('pandas/core/indexes', 'base.py')
+from itertools import zip_longest

('pandas/core/indexes', 'base.py')
-from textwrap import dedent

('pandas/core/indexes', 'base.py')
+from typing import (

('pandas/core/indexes', 'base.py')
+from pandas._config import get_option

('pandas/core/indexes', 'base.py')
-from pandas._libs.lib import is_datetime_array

('pandas/core/indexes', 'base.py')
-import pandas.compat as compat

('pandas/core/indexes', 'base.py')
-from pandas.compat import range, set_function_name, u

('pandas/core/indexes', 'base.py')
+import pandas._libs.join as libjoin

('pandas/core/indexes', 'base.py')
+from pandas._libs.lib import (

('pandas/core/indexes', 'base.py')
+from pandas._libs.missing import is_float_nan

('pandas/core/indexes', 'base.py')
+from pandas._libs.tslibs import (

('pandas/core/indexes', 'base.py')
+from pandas._typing import (

('pandas/core/indexes', 'base.py')
-from pandas.util._decorators import Appender, Substitution, cache_readonly

('pandas/core/indexes', 'base.py')
-from pandas.core.dtypes.cast import maybe_cast_to_integer_array

('pandas/core/indexes', 'base.py')
+from pandas.errors import (

('pandas/core/indexes', 'base.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'base.py')
+from pandas.util._exceptions import (

('pandas/core/indexes', 'base.py')
+from pandas.core.dtypes.cast import (

('pandas/core/indexes', 'base.py')
-import pandas.core.dtypes.concat as _concat

('pandas/core/indexes', 'base.py')
+from pandas.core.dtypes.concat import concat_compat

('pandas/core/indexes', 'base.py')
+from pandas.core.dtypes.dtypes import (

('pandas/core/indexes', 'base.py')
-from pandas.core.dtypes.missing import array_equivalent, isna

('pandas/core/indexes', 'base.py')
-from pandas.core import ops

('pandas/core/indexes', 'base.py')
-from pandas.core.accessor import CachedAccessor, DirNamesMixin

('pandas/core/indexes', 'base.py')
+from pandas.core.dtypes.inference import is_dict_like

('pandas/core/indexes', 'base.py')
+from pandas.core.dtypes.missing import (

('pandas/core/indexes', 'base.py')
+from pandas.core import (

('pandas/core/indexes', 'base.py')
+from pandas.core.accessor import CachedAccessor

('pandas/core/indexes', 'base.py')
-from pandas.core.arrays import ExtensionArray

('pandas/core/indexes', 'base.py')
-from pandas.core.base import IndexOpsMixin, PandasObject

('pandas/core/indexes', 'base.py')
+from pandas.core.array_algos.putmask import (

('pandas/core/indexes', 'base.py')
+from pandas.core.arrays import (

('pandas/core/indexes', 'base.py')
+from pandas.core.arrays.datetimes import (

('pandas/core/indexes', 'base.py')
+from pandas.core.arrays.masked import BaseMaskedArray

('pandas/core/indexes', 'base.py')
+from pandas.core.arrays.sparse import SparseDtype

('pandas/core/indexes', 'base.py')
+from pandas.core.base import (

('pandas/core/indexes', 'base.py')
+from pandas.core.construction import (

('pandas/core/indexes', 'base.py')
+from pandas.core.indexers import deprecate_ndim_indexing

('pandas/core/indexes', 'base.py')
-import pandas.core.missing as missing

('pandas/core/indexes', 'base.py')
-from pandas.core.ops import get_op_result_name, make_invalid_op

('pandas/core/indexes', 'base.py')
-import pandas.core.sorting as sorting

('pandas/core/indexes', 'base.py')
+from pandas.core.ops import get_op_result_name

('pandas/core/indexes', 'base.py')
+from pandas.core.ops.invalid import make_invalid_op

('pandas/core/indexes', 'base.py')
+from pandas.core.sorting import (

('pandas/core/indexes', 'base.py')
-            from pandas import Series

('pandas/core/indexes', 'base.py')
+    from pandas import (

('pandas/core/indexes', 'base.py')
+    from pandas.core.arrays import PeriodArray

('pandas/core/indexes', 'base.py')
-        from .range import RangeIndex

('pandas/core/indexes', 'base.py')
+        from pandas.core.arrays import PandasArray

('pandas/core/indexes', 'base.py')
+        from pandas.core.indexes.range import RangeIndex

('pandas/core/indexes', 'base.py')
-            from .category import CategoricalIndex

('pandas/core/indexes', 'base.py')
-            from .interval import IntervalIndex

('pandas/core/indexes', 'base.py')
-            from pandas import DatetimeIndex

('pandas/core/indexes', 'base.py')
-            from pandas import TimedeltaIndex

('pandas/core/indexes', 'base.py')
-            from pandas import PeriodIndex

('pandas/core/indexes', 'base.py')
-                            from .numeric import Float64Index

('pandas/core/indexes', 'base.py')
-            from pandas.core.indexes.period import (

('pandas/core/indexes', 'base.py')
-                from .numeric import Int64Index

('pandas/core/indexes', 'base.py')
-                from .numeric import UInt64Index

('pandas/core/indexes', 'base.py')
-                from .numeric import Float64Index

('pandas/core/indexes', 'base.py')
-                    from .numeric import Float64Index

('pandas/core/indexes', 'base.py')
-                    from .interval import IntervalIndex

('pandas/core/indexes', 'base.py')
-                            from pandas import DatetimeIndex

('pandas/core/indexes', 'base.py')
-                        from pandas import TimedeltaIndex

('pandas/core/indexes', 'base.py')
-                    from .multi import MultiIndex

('pandas/core/indexes', 'base.py')
+                    from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'base.py')
+        # Delay import for perf. https://github.com/pandas-dev/pandas/pull/31423

('pandas/core/indexes', 'base.py')
+                from pandas import DatetimeIndex

('pandas/core/indexes', 'base.py')
+                from pandas import CategoricalIndex

('pandas/core/indexes', 'base.py')
+                from pandas import IntervalIndex

('pandas/core/indexes', 'base.py')
+                from pandas import PeriodIndex

('pandas/core/indexes', 'base.py')
+            from pandas import DatetimeIndex

('pandas/core/indexes', 'base.py')
+            from pandas import TimedeltaIndex

('pandas/core/indexes', 'base.py')
+            from pandas.core.api import Float64Index

('pandas/core/indexes', 'base.py')
+            from pandas.core.api import UInt64Index

('pandas/core/indexes', 'base.py')
+            from pandas.core.api import Int64Index

('pandas/core/indexes', 'base.py')
+        from pandas import Series

('pandas/core/indexes', 'base.py')
-            from .category import CategoricalIndex

('pandas/core/indexes', 'base.py')
-            from pandas import DatetimeIndex

('pandas/core/indexes', 'base.py')
-                from pandas import DatetimeIndex

('pandas/core/indexes', 'base.py')
-            from .multi import MultiIndex

('pandas/core/indexes', 'base.py')
+            from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'base.py')
-                from pandas.core.indexing import maybe_convert_indices

('pandas/core/indexes', 'base.py')
-        from .multi import MultiIndex

('pandas/core/indexes', 'base.py')
-        from pandas.core.reshape.merge import _restore_dropped_levels_multijoin

('pandas/core/indexes', 'base.py')
+        from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'base.py')
+        from pandas.core.reshape.merge import restore_dropped_levels_multijoin

('pandas/core/indexes', 'base.py')
-        from pandas.core.reshape.merge import _get_join_indexers

('pandas/core/indexes', 'base.py')
+        from pandas.core.reshape.merge import get_join_indexers

('pandas/core/indexes', 'base.py')
-        from .multi import MultiIndex

('pandas/core/indexes', 'base.py')
+        from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'base.py')
+            from pandas.core.arrays.numpy_ import PandasArray

('pandas/core/indexes', 'base.py')
-        from .numeric import Int64Index, UInt64Index

('pandas/core/indexes', 'base.py')
-        from pandas import DatetimeIndex

('pandas/core/indexes', 'base.py')
-        from .multi import MultiIndex

('pandas/core/indexes', 'base.py')
+        from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'base.py')
-    from .multi import MultiIndex

('pandas/core/indexes', 'base.py')
+    from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'base.py')
-            from .multi import MultiIndex

('pandas/core/indexes', 'base.py')
+            from pandas.core.indexes.multi import MultiIndex

('pandas/core/indexes', 'base.py')
-            from copy import copy

('pandas/core/indexes', 'base.py')
-    from pandas.core.index import RangeIndex

('pandas/core/indexes', 'category.py')
-import operator

('pandas/core/indexes', 'category.py')
+from __future__ import annotations

('pandas/core/indexes', 'category.py')
+from typing import (

('pandas/core/indexes', 'category.py')
+from pandas._config import get_option

('pandas/core/indexes', 'category.py')
-import pandas.compat as compat

('pandas/core/indexes', 'category.py')
-from pandas.compat.numpy import function as nv

('pandas/core/indexes', 'category.py')
-from pandas.util._decorators import Appender, cache_readonly

('pandas/core/indexes', 'category.py')
+from pandas._typing import (

('pandas/core/indexes', 'category.py')
+from pandas.util._decorators import (

('pandas/core/indexes', 'category.py')
+from pandas.util._exceptions import find_stack_level

('pandas/core/indexes', 'category.py')
-from pandas.core.dtypes.dtypes import CategoricalDtype

('pandas/core/indexes', 'category.py')
-from pandas.core.dtypes.generic import ABCCategorical, ABCSeries

('pandas/core/indexes', 'category.py')
-from pandas.core.dtypes.missing import isna

('pandas/core/indexes', 'category.py')
-from pandas.core import accessor

('pandas/core/indexes', 'category.py')
-from pandas.core.algorithms import take_1d

('pandas/core/indexes', 'category.py')
-from pandas.core.arrays.categorical import Categorical, contains

('pandas/core/indexes', 'category.py')
-import pandas.core.common as com

('pandas/core/indexes', 'category.py')
-from pandas.core.config import get_option

('pandas/core/indexes', 'category.py')
+from pandas.core.dtypes.missing import (

('pandas/core/indexes', 'category.py')
+from pandas.core.arrays.categorical import (

('pandas/core/indexes', 'category.py')
+from pandas.core.construction import extract_array

('pandas/core/indexes', 'category.py')
-from pandas.core.indexes.base import Index, _index_shared_docs

('pandas/core/indexes', 'category.py')
-import pandas.core.missing as missing

('pandas/core/indexes', 'category.py')
-from pandas.core.ops import get_op_result_name

('pandas/core/indexes', 'category.py')
+from pandas.core.indexes.base import (

('pandas/core/indexes', 'category.py')
+from pandas.core.indexes.extension import (

('pandas/core/indexes', 'category.py')
+from pandas.io.formats.printing import pprint_thing

('pandas/core/indexes', 'category.py')
+        from pandas.core.api import NumericIndex

('pandas/core/indexes', 'category.py')
-            from pandas import IntervalIndex

('pandas/core/indexes', 'category.py')
-        from pandas._libs.hashtable import duplicated_int64

('pandas/core/indexes', 'category.py')
-        from pandas.core.arrays.categorical import _recode_for_categories

('pandas/core/indexes', 'category.py')
+            from pandas.core.dtypes.concat import concat_compat

('pandas/util', '_test_decorators.py')
-from distutils.version import LooseVersion

('pandas/util', '_test_decorators.py')
+from __future__ import annotations

('pandas/util', '_test_decorators.py')
+from contextlib import contextmanager

('pandas/util', '_test_decorators.py')
+from typing import Callable

('pandas/util', '_test_decorators.py')
+import warnings

('pandas/util', '_test_decorators.py')
+import numpy as np

('pandas/util', '_test_decorators.py')
+from pandas._config import get_option

('pandas/util', '_test_decorators.py')
-    PY3, import_lzma, is_platform_32bit, is_platform_windows)

('pandas/util', '_test_decorators.py')
-from pandas.compat.numpy import _np_version_under1p15

('pandas/util', '_test_decorators.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/util', '_test_decorators.py')
-def safe_import(mod_name, min_version=None):

('pandas/util', '_test_decorators.py')
+from pandas.util.version import Version

('pandas/util', '_test_decorators.py')
+def safe_import(mod_name: str, min_version: str | None = None):

('pandas/util', '_test_decorators.py')
-        mod = __import__(mod_name)

('pandas/util', '_test_decorators.py')
+        # fastparquet import accesses pd.Int64Index

('pandas/util', '_test_decorators.py')
+            mod = __import__(mod_name)

('pandas/util', '_test_decorators.py')
-            from distutils.version import LooseVersion

('pandas/util', '_test_decorators.py')
-    mod = safe_import("matplotlib")

('pandas/util', '_test_decorators.py')
-    return not (safe_import('scipy.stats') and

('pandas/util', '_test_decorators.py')
-                safe_import('scipy.sparse') and

('pandas/util', '_test_decorators.py')
-                safe_import('scipy.interpolate') and

('pandas/util', '_test_decorators.py')
-                safe_import('scipy.signal'))

('pandas/util', '_test_decorators.py')
-        import_lzma()

('pandas/util', '_test_decorators.py')
+        safe_import("scipy.stats")

('pandas/util', '_test_decorators.py')
+        and safe_import("scipy.sparse")

('pandas/util', '_test_decorators.py')
+        and safe_import("scipy.interpolate")

('pandas/util', '_test_decorators.py')
+        and safe_import("scipy.signal")

('pandas/util', '_test_decorators.py')
+        safe_import(package), reason=f"Skipping because {package} is installed."

('pandas/util', '_test_decorators.py')
-    execution, that mark will attempt to import the specified ``package`` and

('pandas/util', '_test_decorators.py')
-    optionally ensure it meets the ``min_version``. If the import and version

('pandas/util', '_test_decorators.py')
+    evaluated during test collection. An attempt will be made to import the

('pandas/util', '_test_decorators.py')
+    If the import and version check are unsuccessful, then the test function

('pandas/util', '_test_decorators.py')
-        msg = "Could not import '{}'".format(package)

('pandas/util', '_test_decorators.py')
-            not safe_import(package, min_version=min_version), reason=msg

('pandas/util', '_test_decorators.py')
+    msg = f"Could not import '{package}'"

('pandas/util', '_test_decorators.py')
+        not safe_import(package, min_version=min_version), reason=msg

('pandas/util', '_test_decorators.py')
+    psutil = safe_import("psutil")

('pandas/util', '_test_decorators.py')
+        import_optional_dependency("pytest_asyncio")

('pandas/util', '_validators.py')
+from __future__ import annotations

('pandas/util', '_validators.py')
+from typing import (

('pandas/util', '_validators.py')
-from pandas.core.dtypes.common import is_bool

('pandas/util', '_validators.py')
+import numpy as np

('pandas/util', '_validators.py')
+from pandas.util._exceptions import find_stack_level

('pandas/util', '_validators.py')
+from pandas.core.dtypes.common import (

('pandas/util', '_print_versions.py')
+from __future__ import annotations

('pandas/util', '_print_versions.py')
-import importlib

('pandas/util', '_print_versions.py')
+import json

('pandas/util', '_print_versions.py')
-import subprocess

('pandas/util', '_print_versions.py')
+from pandas._typing import JSONSerializable

('pandas/util', '_print_versions.py')
+from pandas.compat._optional import (

('pandas/util', '_print_versions.py')
+    import_optional_dependency,

('pandas/util', '_print_versions.py')
+    from pandas._version import get_versions

('pandas/util', '_print_versions.py')
+        # Other, not imported.

('pandas/util', '_print_versions.py')
-                mod = importlib.import_module(modname)

('pandas/util', '_print_versions.py')
+        mod = import_optional_dependency(modname, errors="ignore")

('pandas/util', '_print_versions.py')
-            import json

('pandas/util', '_print_versions.py')
-            import simplejson as json

('pandas/util', '_print_versions.py')
+    Provide useful information, important for bug reports.

('pandas/util', '__init__.py')
-from pandas.util._decorators import Appender, Substitution, cache_readonly  # noqa

('pandas/util', '__init__.py')
-from pandas.core.util.hashing import hash_pandas_object, hash_array   # noqa

('pandas/util', '__init__.py')
+from pandas.util._decorators import (  # noqa:F401

('pandas/util', '__init__.py')
+from pandas.core.util.hashing import (  # noqa:F401

('pandas/util', '__init__.py')
+        import pandas.util.testing

('pandas/util', '_decorators.py')
+from __future__ import annotations

('pandas/util', '_decorators.py')
+from typing import (

('pandas/util', '_decorators.py')
-from pandas._libs.properties import cache_readonly  # noqa

('pandas/util', '_decorators.py')
-from pandas.compat import PY2, callable, signature

('pandas/util', '_decorators.py')
+from pandas._libs.properties import cache_readonly  # noqa:F401

('pandas/util', '_decorators.py')
+from pandas._typing import F

('pandas/util', '_doctools.py')
+from __future__ import annotations

('pandas/util', '_doctools.py')
-import pandas.compat as compat

('pandas/util', '_doctools.py')
+        import matplotlib.gridspec as gridspec

('pandas/util', '_doctools.py')
-        import matplotlib.gridspec as gridspec

('pandas/util', 'testing.py')
-from __future__ import division

('pandas/util', 'testing.py')
-from contextlib import contextmanager

('pandas/util', 'testing.py')
-from datetime import datetime

('pandas/util', 'testing.py')
-from functools import wraps

('pandas/util', 'testing.py')
-import locale

('pandas/util', 'testing.py')
-import os

('pandas/util', 'testing.py')
-import re

('pandas/util', 'testing.py')
-from shutil import rmtree

('pandas/util', 'testing.py')
-import string

('pandas/util', 'testing.py')
-import subprocess

('pandas/util', 'testing.py')
-import sys

('pandas/util', 'testing.py')
-import tempfile

('pandas/util', 'testing.py')
-import traceback

('pandas/util', 'testing.py')
-import numpy as np

('pandas/util', 'testing.py')
-from numpy.random import rand, randn

('pandas/util', 'testing.py')
+from pandas.util._exceptions import find_stack_level

('pandas/util', 'testing.py')
-from pandas._libs import testing as _testing

('pandas/util', 'testing.py')
-import pandas.compat as compat

('pandas/util', 'testing.py')
-from pandas.compat import (

('pandas/util', 'testing.py')
+from pandas._testing import *  # noqa:F401,F403,PDF014

('pandas/util', 'testing.py')
-from pandas.core.dtypes.common import (

('pandas/util', 'testing.py')
-from pandas.core.dtypes.missing import array_equivalent

('pandas/util', 'testing.py')
-import pandas as pd

('pandas/util', 'testing.py')
-from pandas import (

('pandas/util', 'testing.py')
-from pandas.core.algorithms import take_1d

('pandas/util', 'testing.py')
-from pandas.core.arrays import (

('pandas/util', 'testing.py')
-import pandas.core.common as com

('pandas/util', 'testing.py')
-from pandas.io.common import urlopen

('pandas/util', 'testing.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/util', 'testing.py')
-    import pytest

('pandas/util', 'testing.py')
-    Path = pytest.importorskip('pathlib').Path

('pandas/util', 'testing.py')
-    import pytest

('pandas/util', 'testing.py')
-    LocalPath = pytest.importorskip('py.path').local

('pandas/util', 'testing.py')
-        import gzip

('pandas/util', 'testing.py')
-        import bz2

('pandas/util', 'testing.py')
-        lzma = compat.import_lzma()

('pandas/util', 'testing.py')
-        import zipfile

('pandas/util', 'testing.py')
-        import zipfile

('pandas/util', 'testing.py')
-        import gzip

('pandas/util', 'testing.py')
-        import bz2

('pandas/util', 'testing.py')
-        lzma = compat.import_lzma()

('pandas/util', 'testing.py')
-    from matplotlib.pyplot import get_fignums, close as _close

('pandas/util', 'testing.py')
-    from pdb import Pdb as OldPdb

('pandas/util', 'testing.py')
-        from IPython.core.debugger import Pdb

('pandas/util', 'testing.py')
-    import pudb

('pandas/util', 'testing.py')
-    from IPython.core.debugger import Pdb

('pandas/util', 'testing.py')
-        from pdb import Pdb as OldPdb

('pandas/util', 'testing.py')
-            import pytest

('pandas/util', 'testing.py')
-    import matplotlib.pyplot as plt

('pandas/util', 'testing.py')
-    >>> from pandas.util.testing import assert_frame_equal

('pandas/util', 'testing.py')
-            import re

('pandas/util', 'testing.py')
-      >>> from pandas.util.testing import network

('pandas/util', 'testing.py')
-      >>> from pandas.io.common import urlopen

('pandas/util', 'testing.py')
-    from pytest import skip

('pandas/util', 'testing.py')
-    >>> import re

('pandas/util', 'testing.py')
-    >>> import warnings

('pandas/util', 'testing.py')
-                    from inspect import getframeinfo, stack

('pandas/util', 'testing.py')
-    import csv

('pandas/util', 'testing.py')
-    from pandas.core.computation import expressions as expr

('pandas/util', 'testing.py')
-    import threading

('pandas/util', 'testing.py')
-    >>> from datetime import datetime

('pandas/util', 'testing.py')
-    >>> from dateutil.tz import tzlocal

('pandas/util', 'testing.py')
-    import os

('pandas/util', 'testing.py')
-    import time

('pandas/util', '_exceptions.py')
+from __future__ import annotations

('pandas/util', '_exceptions.py')
+import inspect

('pandas/util', '_exceptions.py')
+import os

('pandas/util', '_exceptions.py')
+    import pandas as pd

('pandas/util', '_tester.py')
-        import hypothesis  # noqa

('pandas/util', '_tester.py')
+        import hypothesis  # noqa:F401

('pandas/io', 'feather_format.py')
+from __future__ import annotations

('pandas/io', 'feather_format.py')
-from distutils.version import LooseVersion

('pandas/io', 'feather_format.py')
+from typing import (

('pandas/io', 'feather_format.py')
-from pandas.compat import range

('pandas/io', 'feather_format.py')
-from pandas.util._decorators import deprecate_kwarg

('pandas/io', 'feather_format.py')
+from pandas._typing import (

('pandas/io', 'feather_format.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io', 'feather_format.py')
+from pandas.util._decorators import doc

('pandas/io', 'feather_format.py')
-from pandas import DataFrame, Int64Index, RangeIndex

('pandas/io', 'feather_format.py')
+from pandas.core.api import (

('pandas/io', 'feather_format.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/io', 'feather_format.py')
-from pandas.io.common import _stringify_path

('pandas/io', 'feather_format.py')
+from pandas.io.common import get_handle

('pandas/io', 'feather_format.py')
-def _try_import():

('pandas/io', 'feather_format.py')
-    # we need to import on first use

('pandas/io', 'feather_format.py')
-        import pyarrow

('pandas/io', 'feather_format.py')
-        from pyarrow import feather

('pandas/io', 'feather_format.py')
+    import_optional_dependency("pyarrow")

('pandas/io', 'feather_format.py')
+    from pyarrow import feather

('pandas/io', 'feather_format.py')
-    feather = _try_import()[0]

('pandas/io', 'feather_format.py')
+    import_optional_dependency("pyarrow")

('pandas/io', 'feather_format.py')
+    from pyarrow import feather

('pandas/io', 'feather_format.py')
-    feather, pyarrow = _try_import()

('pandas/io', 'parquet.py')
-from distutils.version import LooseVersion

('pandas/io', 'parquet.py')
+from __future__ import annotations

('pandas/io', 'parquet.py')
+import io

('pandas/io', 'parquet.py')
+import os

('pandas/io', 'parquet.py')
+from typing import Any

('pandas/io', 'parquet.py')
-from pandas.compat import string_types

('pandas/io', 'parquet.py')
+from pandas._typing import (

('pandas/io', 'parquet.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io', 'parquet.py')
-from pandas import DataFrame, get_option

('pandas/io', 'parquet.py')
-from pandas.io.common import get_filepath_or_buffer, is_s3_url

('pandas/io', 'parquet.py')
+from pandas.util._decorators import doc

('pandas/io', 'parquet.py')
+from pandas import (

('pandas/io', 'parquet.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/io', 'parquet.py')
+from pandas.util.version import Version

('pandas/io', 'parquet.py')
+from pandas.io.common import (

('pandas/io', 'parquet.py')
+            "Trying to import the above resulted in these errors:"

('pandas/io', 'parquet.py')
+        fsspec = import_optional_dependency("fsspec")

('pandas/io', 'parquet.py')
-        # we need to import on first use

('pandas/io', 'parquet.py')
+        import_optional_dependency(

('pandas/io', 'parquet.py')
+        import pyarrow.parquet

('pandas/io', 'parquet.py')
+        # import utils to register the pyarrow extension types

('pandas/io', 'parquet.py')
+        import pandas.core.arrays._arrow_utils  # noqa:F401

('pandas/io', 'parquet.py')
-            import pyarrow

('pandas/io', 'parquet.py')
-            import pyarrow.parquet

('pandas/io', 'parquet.py')
+            import pandas as pd

('pandas/io', 'parquet.py')
-            import fastparquet

('pandas/io', 'parquet.py')
+        fastparquet = import_optional_dependency(

('pandas/io', 'parquet.py')
+            fsspec = import_optional_dependency("fsspec")

('pandas/io', 'parquet.py')
+            fsspec = import_optional_dependency("fsspec")

('pandas/io', 'pytables.py')
+from __future__ import annotations

('pandas/io', 'pytables.py')
+from contextlib import suppress

('pandas/io', 'pytables.py')
-from datetime import date, datetime

('pandas/io', 'pytables.py')
-from distutils.version import LooseVersion

('pandas/io', 'pytables.py')
+from datetime import (

('pandas/io', 'pytables.py')
-import time

('pandas/io', 'pytables.py')
+from textwrap import dedent

('pandas/io', 'pytables.py')
+from typing import (

('pandas/io', 'pytables.py')
-from pandas._libs import algos, lib, writers as libwriters

('pandas/io', 'pytables.py')
+from pandas._config import (

('pandas/io', 'pytables.py')
+from pandas._libs import (

('pandas/io', 'pytables.py')
-from pandas.compat import PY3, filter, lrange, range, string_types

('pandas/io', 'pytables.py')
+from pandas._typing import (

('pandas/io', 'pytables.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io', 'pytables.py')
+from pandas.compat.pickle_compat import patch_pickle

('pandas/io', 'pytables.py')
+from pandas.util._decorators import cache_readonly

('pandas/io', 'pytables.py')
+from pandas.util._exceptions import find_stack_level

('pandas/io', 'pytables.py')
-from pandas.core import config

('pandas/io', 'pytables.py')
-from pandas.core.algorithms import match, unique

('pandas/io', 'pytables.py')
-from pandas.core.arrays.categorical import (

('pandas/io', 'pytables.py')
-from pandas.core.arrays.sparse import BlockIndex, IntIndex

('pandas/io', 'pytables.py')
-from pandas.core.base import StringMixin

('pandas/io', 'pytables.py')
+from pandas.core.api import Int64Index

('pandas/io', 'pytables.py')
+from pandas.core.arrays import (

('pandas/io', 'pytables.py')
-from pandas.core.computation.pytables import Expr, maybe_expression

('pandas/io', 'pytables.py')
-from pandas.core.config import get_option

('pandas/io', 'pytables.py')
-from pandas.core.index import ensure_index

('pandas/io', 'pytables.py')
+from pandas.core.computation.pytables import (

('pandas/io', 'pytables.py')
+from pandas.core.construction import extract_array

('pandas/io', 'pytables.py')
+from pandas.core.indexes.api import ensure_index

('pandas/io', 'pytables.py')
-from pandas.io.common import _stringify_path

('pandas/io', 'pytables.py')
-from pandas.io.formats.printing import adjoin, pprint_thing

('pandas/io', 'pytables.py')
+from pandas.io.common import stringify_path

('pandas/io', 'pytables.py')
+from pandas.io.formats.printing import (

('pandas/io', 'pytables.py')
+    from tables import (

('pandas/io', 'pytables.py')
+    from pandas.core.internals import Block

('pandas/io', 'pytables.py')
-            import tables  # noqa

('pandas/io', 'pytables.py')
-                              'importing'.format(ex=ex))

('pandas/io', 'pytables.py')
+        tables = import_optional_dependency("tables")

('pandas/io', 'html.py')
-from distutils.version import LooseVersion

('pandas/io', 'html.py')
+from __future__ import annotations

('pandas/io', 'html.py')
+from collections import abc

('pandas/io', 'html.py')
-import os

('pandas/io', 'html.py')
-import pandas.compat as compat

('pandas/io', 'html.py')
-from pandas.compat import (

('pandas/io', 'html.py')
-from pandas.errors import AbstractMethodError, EmptyDataError

('pandas/io', 'html.py')
+from typing import (

('pandas/io', 'html.py')
+from pandas._typing import (

('pandas/io', 'html.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io', 'html.py')
+from pandas.errors import (

('pandas/io', 'html.py')
+from pandas.util._decorators import deprecate_nonkeyword_arguments

('pandas/io', 'html.py')
-from pandas import Series

('pandas/io', 'html.py')
-from pandas.io.common import _is_url, _validate_header_arg, urlopen

('pandas/io', 'html.py')
+from pandas.core.construction import create_series_with_explicit_dtype

('pandas/io', 'html.py')
+from pandas.core.frame import DataFrame

('pandas/io', 'html.py')
+from pandas.io.common import (

('pandas/io', 'html.py')
-def _importers():

('pandas/io', 'html.py')
+def _importers() -> None:

('pandas/io', 'html.py')
-        import bs4  # noqa

('pandas/io', 'html.py')
-        import lxml  # noqa

('pandas/io', 'html.py')
-        import html5lib  # noqa

('pandas/io', 'html.py')
+    bs4 = import_optional_dependency("bs4", errors="ignore")

('pandas/io', 'html.py')
+    lxml = import_optional_dependency("lxml.etree", errors="ignore")

('pandas/io', 'html.py')
+    html5lib = import_optional_dependency("html5lib", errors="ignore")

('pandas/io', 'html.py')
-        from lxml.html import parse, fromstring, HTMLParser

('pandas/io', 'html.py')
+        from lxml.html import (

('pandas/io', 'html.py')
-        import bs4

('pandas/io', 'html.py')
+        bs4 = import_optional_dependency("bs4")  # noqa:F841

('pandas/io', '__init__.py')
+from typing import TYPE_CHECKING

('pandas/io', '__init__.py')
+    # import modules that have public classes/functions

('pandas/io', '__init__.py')
+    from pandas.io import (

('pandas/io', 'clipboards.py')
+from __future__ import annotations

('pandas/io', 'clipboards.py')
+from io import StringIO

('pandas/io', 'clipboards.py')
-import pandas.compat as compat

('pandas/io', 'clipboards.py')
-from pandas.compat import PY2, PY3, StringIO

('pandas/io', 'clipboards.py')
-from pandas import get_option, option_context

('pandas/io', 'clipboards.py')
+from pandas import (

('pandas/io', 'api.py')
-from pandas.io.excel import ExcelFile, ExcelWriter, read_excel

('pandas/io', 'api.py')
+from pandas.io.excel import (

('pandas/io', 'api.py')
-from pandas.io.packers import read_msgpack, to_msgpack

('pandas/io', 'api.py')
+from pandas.io.orc import read_orc

('pandas/io', 'api.py')
-from pandas.io.parsers import read_csv, read_fwf, read_table

('pandas/io', 'api.py')
-from pandas.io.pickle import read_pickle, to_pickle

('pandas/io', 'api.py')
-from pandas.io.pytables import HDFStore, read_hdf

('pandas/io', 'api.py')
+from pandas.io.parsers import (

('pandas/io', 'api.py')
+from pandas.io.pickle import (

('pandas/io', 'api.py')
+from pandas.io.pytables import (

('pandas/io', 'api.py')
-from pandas.io.sql import read_sql, read_sql_query, read_sql_table

('pandas/io', 'api.py')
+from pandas.io.spss import read_spss

('pandas/io', 'api.py')
+from pandas.io.sql import (

('pandas/io', 'api.py')
+from pandas.io.xml import read_xml

('pandas/io', 'common.py')
+from __future__ import annotations

('pandas/io', 'common.py')
+import bz2

('pandas/io', 'common.py')
-from contextlib import closing, contextmanager

('pandas/io', 'common.py')
-import csv

('pandas/io', 'common.py')
+from collections import abc

('pandas/io', 'common.py')
+import dataclasses

('pandas/io', 'common.py')
+import functools

('pandas/io', 'common.py')
+import gzip

('pandas/io', 'common.py')
+from io import (

('pandas/io', 'common.py')
+from pathlib import Path

('pandas/io', 'common.py')
+import re

('pandas/io', 'common.py')
+from typing import (

('pandas/io', 'common.py')
+from urllib.parse import (

('pandas/io', 'common.py')
+import warnings

('pandas/io', 'common.py')
-import pandas.compat as compat

('pandas/io', 'common.py')
-from pandas.compat import BytesIO, StringIO, string_types, text_type

('pandas/io', 'common.py')
-from pandas.errors import (  # noqa

('pandas/io', 'common.py')
-from pandas.core.dtypes.common import is_file_like, is_number

('pandas/io', 'common.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/io', 'common.py')
-    from urllib.request import urlopen, pathname2url

('pandas/io', 'common.py')
-    from urllib.parse import urlparse as parse_url

('pandas/io', 'common.py')
-    from urllib.parse import (uses_relative, uses_netloc, uses_params,

('pandas/io', 'common.py')
-    from urllib.error import URLError

('pandas/io', 'common.py')
-    from http.client import HTTPException  # noqa

('pandas/io', 'common.py')
-    from urllib2 import urlopen as _urlopen

('pandas/io', 'common.py')
-    from urllib import urlencode, pathname2url  # noqa

('pandas/io', 'common.py')
-    from urlparse import urlparse as parse_url

('pandas/io', 'common.py')
-    from urlparse import uses_relative, uses_netloc, uses_params, urljoin

('pandas/io', 'common.py')
-    from urllib2 import URLError  # noqa

('pandas/io', 'common.py')
-    from httplib import HTTPException  # noqa

('pandas/io', 'common.py')
-    from contextlib import contextmanager, closing  # noqa

('pandas/io', 'common.py')
-    from functools import wraps  # noqa

('pandas/io', 'common.py')
+from pandas._typing import (

('pandas/io', 'common.py')
+from pandas.compat import get_lzma_file

('pandas/io', 'common.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io', 'common.py')
+from pandas.util._decorators import doc

('pandas/io', 'common.py')
+from pandas.util._exceptions import find_stack_level

('pandas/io', 'common.py')
+from pandas.core.dtypes.common import is_file_like

('pandas/io', 'common.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/io', 'common.py')
-        import pathlib

('pandas/io', 'common.py')
-        from py.path import local as LocalPath

('pandas/io', 'common.py')
+    Lazy-import wrapper for stdlib urlopen, as that imports a big chunk of

('pandas/io', 'common.py')
+    import urllib.request

('pandas/io', 'common.py')
-        from pandas.io import s3

('pandas/io', 'common.py')
-        from pandas.io import gcs

('pandas/io', 'common.py')
+        # waiting until now for importing to match intended lazy logic of

('pandas/io', 'common.py')
+        import urllib.request

('pandas/io', 'common.py')
+        fsspec = import_optional_dependency("fsspec")

('pandas/io', 'common.py')
+            import_optional_dependency("botocore")

('pandas/io', 'common.py')
+            from botocore.exceptions import (

('pandas/io', 'common.py')
+    # lazify expensive import (~30ms)

('pandas/io', 'common.py')
+    from urllib.request import pathname2url

('pandas/io', 'common.py')
-        from s3fs import S3File

('pandas/io', 'common.py')
-            import gzip

('pandas/io', 'common.py')
-            import bz2

('pandas/io', 'common.py')
+            zstd = import_optional_dependency("zstandard")

('pandas/io', 'common.py')
-            lzma = compat.import_lzma()

('pandas/io', 'common.py')
-        from io import TextIOWrapper

('pandas/io', 'common.py')
+    zstd = import_optional_dependency("zstandard", errors="ignore")

('pandas/io', 'date_converters.py')
+import warnings

('pandas/io', 'date_converters.py')
-from pandas.compat import map, range

('pandas/io', 'date_converters.py')
+from pandas.util._exceptions import find_stack_level

('pandas/io', 'pickle.py')
+from __future__ import annotations

('pandas/io', 'pickle.py')
+import pickle

('pandas/io', 'pickle.py')
+from typing import Any

('pandas/io', 'pickle.py')
-import numpy as np

('pandas/io', 'pickle.py')
-from numpy.lib.format import read_array, write_array

('pandas/io', 'pickle.py')
-from pandas.compat import PY3, BytesIO, cPickle as pkl, pickle_compat as pc

('pandas/io', 'pickle.py')
-from pandas.io.common import _get_handle, _stringify_path

('pandas/io', 'pickle.py')
+from pandas._typing import (

('pandas/io', 'pickle.py')
+from pandas.compat import pickle_compat as pc

('pandas/io', 'pickle.py')
+from pandas.util._decorators import doc

('pandas/io', 'pickle.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/io', 'pickle.py')
+from pandas.io.common import get_handle

('pandas/io', 'pickle.py')
-    >>> import os

('pandas/io', 'pickle.py')
-    >>> import os

('pandas/io', 'sql.py')
-from __future__ import division, print_function

('pandas/io', 'sql.py')
+from __future__ import annotations

('pandas/io', 'sql.py')
-from datetime import date, datetime, time

('pandas/io', 'sql.py')
+from datetime import (

('pandas/io', 'sql.py')
+from typing import (

('pandas/io', 'sql.py')
-from pandas.compat import (

('pandas/io', 'sql.py')
+from pandas._typing import DtypeArg

('pandas/io', 'sql.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io', 'sql.py')
+from pandas.errors import AbstractMethodError

('pandas/io', 'sql.py')
+from pandas.util._exceptions import find_stack_level

('pandas/io', 'sql.py')
-from pandas.core.api import DataFrame, Series

('pandas/io', 'sql.py')
+from pandas import get_option

('pandas/io', 'sql.py')
+from pandas.core.api import (

('pandas/io', 'sql.py')
+import pandas.core.common as com

('pandas/io', 'sql.py')
+from pandas.util.version import Version

('pandas/io', 'sql.py')
-            import sqlalchemy

('pandas/io', 'sql.py')
-            from distutils.version import LooseVersion

('pandas/io', 'sql.py')
-                from sqlalchemy import BigInteger

('pandas/io', 'sql.py')
-                from sqlalchemy.ext.compiler import compiles

('pandas/io', 'sql.py')
-        import sqlalchemy

('pandas/io', 'sql.py')
+    import sqlalchemy

('pandas/io', 'sql.py')
-    import sqlalchemy

('pandas/io', 'sql.py')
-    from sqlalchemy.schema import MetaData

('pandas/io', 'sql.py')
+    >>> from sqlite3 import connect

('pandas/io', 'sql.py')
-            import sqlalchemy

('pandas/io', 'sql.py')
+    import sqlite3

('pandas/io', 'sql.py')
+    import warnings

('pandas/io', 'sql.py')
+    sqlalchemy = import_optional_dependency("sqlalchemy")

('pandas/io', 'sql.py')
+        from sqlalchemy import insert

('pandas/io', 'sql.py')
+        from sqlalchemy import select

('pandas/io', 'sql.py')
-            from sqlalchemy import select

('pandas/io', 'sql.py')
-        from sqlalchemy import Table, Column, PrimaryKeyConstraint

('pandas/io', 'sql.py')
+        from sqlalchemy import (

('pandas/io', 'sql.py')
+        from sqlalchemy.schema import MetaData

('pandas/io', 'sql.py')
-        from sqlalchemy.schema import MetaData

('pandas/io', 'sql.py')
-        from sqlalchemy.types import (BigInteger, Integer, Float,

('pandas/io', 'sql.py')
+        from sqlalchemy.types import (

('pandas/io', 'sql.py')
-        from sqlalchemy.types import (Integer, Float, Boolean, DateTime,

('pandas/io', 'sql.py')
+        from sqlalchemy.types import (

('pandas/io', 'sql.py')
+        import_optional_dependency(

('pandas/io', 'sql.py')
+        from sqlalchemy import exc

('pandas/io', 'sql.py')
+            "Trying to import the above resulted in these errors:"

('pandas/io', 'sql.py')
+        from sqlalchemy.schema import MetaData

('pandas/io', 'sql.py')
-            from sqlalchemy.schema import MetaData

('pandas/io', 'sql.py')
+        from sqlalchemy.engine import Engine

('pandas/io', 'sql.py')
+            from sqlalchemy.types import (

('pandas/io', 'sql.py')
+                    from sqlalchemy import inspect

('pandas/io', 'sql.py')
-            from sqlalchemy.types import to_instance, TypeEngine

('pandas/io', 'sql.py')
+            from sqlalchemy import inspect

('pandas/io', 'sql.py')
+        from sqlalchemy import (

('pandas/io', 'sql.py')
-        from sqlalchemy import Numeric

('pandas/io', 'stata.py')
-from collections import OrderedDict

('pandas/io', 'stata.py')
+from __future__ import annotations

('pandas/io', 'stata.py')
+from collections import abc

('pandas/io', 'stata.py')
+from io import BytesIO

('pandas/io', 'stata.py')
+from typing import (

('pandas/io', 'stata.py')
-from pandas._libs.tslibs import NaT, Timestamp

('pandas/io', 'stata.py')
-from pandas.compat import (

('pandas/io', 'stata.py')
-from pandas.util._decorators import Appender, deprecate_kwarg

('pandas/io', 'stata.py')
+from pandas._typing import (

('pandas/io', 'stata.py')
+from pandas.util._decorators import (

('pandas/io', 'stata.py')
-from pandas import DatetimeIndex, compat, isna, to_datetime, to_timedelta

('pandas/io', 'stata.py')
-from pandas.core.arrays import Categorical

('pandas/io', 'stata.py')
-from pandas.core.base import StringMixin

('pandas/io', 'stata.py')
+from pandas import (

('pandas/io', 'stata.py')
+from pandas.core.arrays.boolean import BooleanDtype

('pandas/io', 'stata.py')
+from pandas.core.arrays.integer import _IntegerDtype

('pandas/io', 'stata.py')
+from pandas.core.indexes.base import Index

('pandas/io', 'stata.py')
-from pandas.io.common import (

('pandas/io', 'stata.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/io', 'stata.py')
+from pandas.io.common import get_handle

('pandas/io', 'stata.py')
+    from typing import Literal

('pandas/io', 'stata.py')
+    "Version of given Stata file is {version}. pandas supports importing "

('pandas/io', 'stata.py')
-    >>> from datetime import datetime

('pandas/io', 'stata.py')
+    >>> from datetime import datetime

('pandas/io', 'stata.py')
+    >>> from pandas.io.stata import StataWriterUTF8

('pandas/io', 'gbq.py')
-import warnings

('pandas/io', 'gbq.py')
+from __future__ import annotations

('pandas/io', 'gbq.py')
+from typing import (

('pandas/io', 'gbq.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io', 'gbq.py')
+    from pandas import DataFrame

('pandas/io', 'gbq.py')
-        import pandas_gbq

('pandas/io', 'gbq.py')
+    pandas_gbq = import_optional_dependency("pandas_gbq", extra=msg)

('pandas/io/formats', 'console.py')
-import locale

('pandas/io/formats', 'console.py')
-import sys

('pandas/io/formats', 'console.py')
-from pandas.io.formats.terminal import get_terminal_size

('pandas/io/formats', 'console.py')
-    # GH3360, save the reported defencoding at import time

('pandas/io/formats', 'console.py')
+from shutil import get_terminal_size

('pandas/io/formats', 'console.py')
-            from pandas.core.config import get_default_val

('pandas/io/formats', 'console.py')
+            from pandas._config.config import get_default_val

('pandas/io/formats', 'style.py')
-from collections import defaultdict

('pandas/io/formats', 'style.py')
+from __future__ import annotations

('pandas/io/formats', 'style.py')
-from itertools import product

('pandas/io/formats', 'style.py')
-from uuid import uuid1

('pandas/io/formats', 'style.py')
+import operator

('pandas/io/formats', 'style.py')
+from typing import (

('pandas/io/formats', 'style.py')
+import warnings

('pandas/io/formats', 'style.py')
-from pandas.compat import range

('pandas/io/formats', 'style.py')
-from pandas.util._decorators import Appender

('pandas/io/formats', 'style.py')
-from pandas.core.dtypes.common import is_float, is_string_like

('pandas/io/formats', 'style.py')
-from pandas.core.dtypes.generic import ABCSeries

('pandas/io/formats', 'style.py')
+from pandas._config import get_option

('pandas/io/formats', 'style.py')
+from pandas._typing import (

('pandas/io/formats', 'style.py')
+from pandas.compat._optional import import_optional_dependency

('pandas/io/formats', 'style.py')
+from pandas.util._decorators import (

('pandas/io/formats', 'style.py')
+from pandas.util._exceptions import find_stack_level

('pandas/io/formats', 'style.py')
-from pandas.api.types import is_dict_like, is_list_like

('pandas/io/formats', 'style.py')
+from pandas import (

('pandas/io/formats', 'style.py')
-from pandas.core.config import get_option

('pandas/io/formats', 'style.py')
-from pandas.core.generic import _shared_docs

('pandas/io/formats', 'style.py')
-from pandas.core.indexing import _maybe_numeric_slice, _non_reducing_slice

('pandas/io/formats', 'style.py')
+from pandas.core.frame import (

('pandas/io/formats', 'style.py')
+from pandas.core.generic import NDFrame

('pandas/io/formats', 'style.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/io/formats', 'style.py')
+from pandas.io.formats.format import save_to_buffer

('pandas/io/formats', 'style.py')
+jinja2 = import_optional_dependency("jinja2", extra="DataFrame.style requires jinja2.")

('pandas/io/formats', 'style.py')
+from pandas.io.formats.style_render import (

('pandas/io/formats', 'style.py')
-    from jinja2 import (

('pandas/io/formats', 'style.py')
+    import matplotlib as mpl

('pandas/io/formats', 'style.py')
-    from matplotlib import colors

('pandas/io/formats', 'style.py')
-        from pandas.io.formats.excel import ExcelFormatter

('pandas/io/formats', 'style.py')
+        from pandas.io.formats.excel import ExcelFormatter

('pandas/io/formats', 'style.py')
+                        "props": props + "left:0px; z-index:3 !important;",

('pandas/io/formats', 'style.py')
+                                "props": props_ + "z-index:3 !important;",

('pandas/io/formats', 'html.py')
-from __future__ import print_function

('pandas/io/formats', 'html.py')
+from __future__ import annotations

('pandas/io/formats', 'html.py')
-from pandas.compat import OrderedDict, lzip, map, range, u, unichr, zip

('pandas/io/formats', 'html.py')
-from pandas.core.dtypes.generic import ABCMultiIndex

('pandas/io/formats', 'html.py')
-from pandas import compat

('pandas/io/formats', 'html.py')
-import pandas.core.common as com

('pandas/io/formats', 'html.py')
-from pandas.core.config import get_option

('pandas/io/formats', 'html.py')
-from pandas.io.common import _is_url

('pandas/io/formats', 'html.py')
-from pandas.io.formats.format import TableFormatter, get_level_lengths

('pandas/io/formats', 'html.py')
+from typing import (

('pandas/io/formats', 'html.py')
+from pandas._config import get_option

('pandas/io/formats', 'html.py')
+from pandas._libs import lib

('pandas/io/formats', 'html.py')
+from pandas import (

('pandas/io/formats', 'html.py')
+from pandas.io.common import is_url

('pandas/io/formats', 'html.py')
+from pandas.io.formats.format import (

('pandas/io/formats', '__init__.py')
+from typing import TYPE_CHECKING

('pandas/io/formats', '__init__.py')
+    # import modules that have public classes/functions

('pandas/io/formats', '__init__.py')
+    from pandas.io.formats import style

('pandas/io/formats', 'format.py')
-from __future__ import print_function

('pandas/io/formats', 'format.py')
+from __future__ import annotations

('pandas/io/formats', 'format.py')
+from contextlib import contextmanager

('pandas/io/formats', 'format.py')
+from csv import (

('pandas/io/formats', 'format.py')
+import decimal

('pandas/io/formats', 'format.py')
+from io import StringIO

('pandas/io/formats', 'format.py')
+import math

('pandas/io/formats', 'format.py')
+import re

('pandas/io/formats', 'format.py')
+from shutil import get_terminal_size

('pandas/io/formats', 'format.py')
+from typing import (

('pandas/io/formats', 'format.py')
+from unicodedata import east_asian_width

('pandas/io/formats', 'format.py')
+from pandas._config.config import (

('pandas/io/formats', 'format.py')
-from pandas._libs.tslib import format_array_from_datetime

('pandas/io/formats', 'format.py')
-from pandas._libs.tslibs import NaT, Timedelta, Timestamp, iNaT

('pandas/io/formats', 'format.py')
-from pandas.compat import StringIO, lzip, map, u, zip

('pandas/io/formats', 'format.py')
+from pandas._libs.missing import NA

('pandas/io/formats', 'format.py')
+from pandas._libs.tslibs import (

('pandas/io/formats', 'format.py')
+from pandas._libs.tslibs.nattype import NaTType

('pandas/io/formats', 'format.py')
+from pandas._typing import (

('pandas/io/formats', 'format.py')
-from pandas.core.dtypes.generic import (

('pandas/io/formats', 'format.py')
-from pandas.core.dtypes.missing import isna, notna

('pandas/io/formats', 'format.py')
-from pandas import compat

('pandas/io/formats', 'format.py')
+from pandas.core.dtypes.missing import (

('pandas/io/formats', 'format.py')
+from pandas.core.arrays import (

('pandas/io/formats', 'format.py')
-from pandas.core.config import get_option, set_option

('pandas/io/formats', 'format.py')
-from pandas.core.index import Index, ensure_index

('pandas/io/formats', 'format.py')
+from pandas.core.construction import extract_array

('pandas/io/formats', 'format.py')
+from pandas.core.indexes.api import (

('pandas/io/formats', 'format.py')
-from pandas.io.common import _expand_user, _stringify_path

('pandas/io/formats', 'format.py')
-from pandas.io.formats.printing import adjoin, justify, pprint_thing

('pandas/io/formats', 'format.py')
-from pandas.io.formats.terminal import get_terminal_size

('pandas/io/formats', 'format.py')
+from pandas.core.indexes.timedeltas import TimedeltaIndex

('pandas/io/formats', 'format.py')
+from pandas.core.reshape.concat import concat

('pandas/io/formats', 'format.py')
+from pandas.io.common import (

('pandas/io/formats', 'format.py')
+from pandas.io.formats.printing import (

('pandas/io/formats', 'format.py')
+    from pandas import (

('pandas/io/formats', 'format.py')
-        from pandas.core.reshape.concat import concat

('pandas/io/formats', 'format.py')
+    >>> import pandas as pd

('pandas/io/formats', 'format.py')
+    from pandas.io.formats import console

('pandas/io/formats', 'format.py')
+    >>> import pandas as pd

('pandas/io/formats', 'format.py')
-        from pandas.core.reshape.concat import concat

('pandas/io/formats', 'format.py')
-        from pandas import Series

('pandas/io/formats', 'format.py')
+        from pandas.core.indexes.multi import sparsify_labels

('pandas/io/formats', 'format.py')
-            import codecs

('pandas/io/formats', 'format.py')
-        from pandas.io.formats.html import HTMLFormatter, NotebookFormatter

('pandas/io/formats', 'format.py')
+        from pandas.io.formats.html import (

('pandas/io/formats', 'format.py')
-        from pandas.core.index import _sparsify

('pandas/io/formats', 'format.py')
+        from pandas.io.formats.string import StringFormatter

('pandas/io/formats', 'format.py')
+        from pandas.io.formats.csvs import CSVFormatter

('pandas/io/formats', 'format.py')
-        import decimal

('pandas/io/formats', 'format.py')
-        import math

('pandas/io/formats', 'excel.py')
+from __future__ import annotations

('pandas/io/formats', 'excel.py')
+from functools import reduce

('pandas/io/formats', 'excel.py')
+from typing import (

('pandas/io/formats', 'excel.py')
-from pandas.compat import reduce

('pandas/io/formats', 'excel.py')
+from pandas._libs.lib import is_list_like

('pandas/io/formats', 'excel.py')
+from pandas._typing import (

('pandas/io/formats', 'excel.py')
+from pandas.util._decorators import doc

('pandas/io/formats', 'excel.py')
-from pandas.core.dtypes.common import is_float, is_scalar

('pandas/io/formats', 'excel.py')
-from pandas.core.dtypes.generic import ABCMultiIndex, ABCPeriodIndex

('pandas/io/formats', 'excel.py')
-from pandas import Index

('pandas/io/formats', 'excel.py')
+from pandas.core.dtypes.common import (

('pandas/io/formats', 'excel.py')
+from pandas import (

('pandas/io/formats', 'excel.py')
-from pandas.io.formats.css import CSSResolver, CSSWarning

('pandas/io/formats', 'excel.py')
+from pandas.core.shared_docs import _shared_docs

('pandas/io/formats', 'excel.py')
+from pandas.io.formats._color_data import CSS4_COLORS

('pandas/io/formats', 'excel.py')
+from pandas.io.formats.css import (

('pandas/io/formats', 'excel.py')
-        from pandas.io.common import _stringify_path

('pandas/io/formats', 'css.py')
+from __future__ import annotations

('pandas/io/formats', 'csvs.py')
-from __future__ import print_function

('pandas/io/formats', 'csvs.py')
+from __future__ import annotations

('pandas/io/formats', 'csvs.py')
-import warnings

('pandas/io/formats', 'csvs.py')
-from zipfile import ZipFile

('pandas/io/formats', 'csvs.py')
+from typing import (

('pandas/io/formats', 'csvs.py')
-from pandas.compat import StringIO, range, zip

('pandas/io/formats', 'csvs.py')
+from pandas._typing import (

('pandas/io/formats', 'csvs.py')
+from pandas.util._decorators import cache_readonly

('pandas/io/formats', 'csvs.py')
-from pandas import compat

('pandas/io/formats', 'csvs.py')
-from pandas.io.common import (

('pandas/io/formats', 'csvs.py')
+from pandas.core.indexes.api import Index

('pandas/io/formats', 'csvs.py')
+from pandas.io.common import get_handle

('pandas/io/formats', 'csvs.py')
+    from pandas.io.formats.format import DataFrameFormatter

('pandas/io/formats', 'csvs.py')
-            from pandas import Index

('pandas/io/formats', 'latex.py')
-from __future__ import print_function

('pandas/io/formats', 'latex.py')
+from __future__ import annotations

('pandas/io/formats', 'latex.py')
+from abc import (

('pandas/io/formats', 'latex.py')
+from typing import (

('pandas/io/formats', 'latex.py')
-from pandas.compat import map, range, u, zip

('pandas/io/formats', 'latex.py')
-from pandas import compat

('pandas/io/formats', 'latex.py')
-from pandas.io.formats.format import TableFormatter

('pandas/io/formats', 'latex.py')
+from pandas.io.formats.format import DataFrameFormatter

('pandas/io/formats', 'latex.py')
+    >>> from pandas.io.formats import format as fmt

('pandas/io/formats', 'latex.py')
+    >>> from pandas.io.formats import format as fmt

('pandas/io/formats', 'latex.py')
+    >>> from pandas.io.formats import format as fmt

('pandas/io/formats', 'latex.py')
+    import doctest

('pandas/io/formats', 'printing.py')
+from __future__ import annotations

('pandas/io/formats', 'printing.py')
-from pandas.compat import u

('pandas/io/formats', 'printing.py')
+from typing import (

('pandas/io/formats', 'printing.py')
+from pandas._config import get_option

('pandas/io/formats', 'printing.py')
-from pandas import compat

('pandas/io/formats', 'printing.py')
-from pandas.core.config import get_option

('pandas/io/formats', 'printing.py')
-    from pandas.io.formats.format import _get_adjustment

('pandas/io/formats', 'printing.py')
+    from pandas.io.formats.format import get_adjustment

('pandas/io/json', '__init__.py')
-from .json import to_json, read_json, loads, dumps  # noqa

('pandas/io/json', '__init__.py')
-from .normalize import json_normalize  # noqa

('pandas/io/json', '__init__.py')
-from .table_schema import build_table_schema  # noqa

('pandas/io/json', '__init__.py')
+from pandas.io.json._json import (

('pandas/io/json', '__init__.py')
+from pandas.io.json._normalize import (

('pandas/io/json', '__init__.py')
+from pandas.io.json._table_schema import build_table_schema

('pandas/io/sas', 'sas7bdat.py')
-from datetime import datetime

('pandas/io/sas', 'sas7bdat.py')
+from __future__ import annotations

('pandas/io/sas', 'sas7bdat.py')
+from collections import abc

('pandas/io/sas', 'sas7bdat.py')
+from datetime import (

('pandas/io/sas', 'sas7bdat.py')
+from typing import cast

('pandas/io/sas', 'sas7bdat.py')
-from pandas.errors import EmptyDataError

('pandas/io/sas', 'sas7bdat.py')
+from pandas._typing import (

('pandas/io/sas', 'sas7bdat.py')
+from pandas.errors import (

('pandas/io/sas', 'sas7bdat.py')
-from pandas import compat

('pandas/io/sas', 'sas7bdat.py')
-from pandas.io.common import BaseIterator, get_filepath_or_buffer

('pandas/io/sas', 'sas7bdat.py')
+from pandas import (

('pandas/io/sas', 'sas7bdat.py')
+from pandas.io.common import get_handle

('pandas/io/sas', 'sas7bdat.py')
+from pandas.io.sas.sasreader import ReaderBase

('pandas/io/sas', 'sas.pyx')
+from cython import Py_ssize_t

('pandas/io/sas', 'sas.pyx')
-import sas_constants as const

('pandas/io/sas', 'sas.pyx')
+import pandas.io.sas.sas_constants as const

('pandas/io/sas', 'sasreader.py')
-from pandas import compat

('pandas/io/sas', 'sasreader.py')
+from __future__ import annotations

('pandas/io/sas', 'sasreader.py')
-from pandas.io.common import _stringify_path

('pandas/io/sas', 'sasreader.py')
+from abc import (

('pandas/io/sas', 'sasreader.py')
+from typing import (

('pandas/io/sas', 'sasreader.py')
+from pandas._typing import (

('pandas/io/sas', 'sasreader.py')
+from pandas.io.common import stringify_path

('pandas/io/sas', 'sasreader.py')
+    from pandas import DataFrame

('pandas/io/sas', '__init__.py')
-from .sasreader import read_sas  # noqa

('pandas/io/sas', '__init__.py')
+from pandas.io.sas.sasreader import read_sas  # noqa:F401

('pandas/io/sas', 'sas_xport.py')
+from __future__ import annotations

('pandas/io/sas', 'sas_xport.py')
+from collections import abc

('pandas/io/sas', 'sas_xport.py')
+from pandas._typing import (

('pandas/io/sas', 'sas_xport.py')
-from pandas import compat

('pandas/io/sas', 'sas_xport.py')
-from pandas.io.common import BaseIterator, get_filepath_or_buffer

('pandas/io/sas', 'sas_xport.py')
+from pandas.io.common import get_handle

('pandas/io/sas', 'sas_xport.py')
+from pandas.io.sas.sasreader import ReaderBase

('pandas/io/clipboard', '__init__.py')
+import contextlib

('pandas/io/clipboard', '__init__.py')
+import ctypes

('pandas/io/clipboard', '__init__.py')
+from ctypes import (

('pandas/io/clipboard', '__init__.py')
+import os

('pandas/io/clipboard', '__init__.py')
-import os

('pandas/io/clipboard', '__init__.py')
+from shutil import which

('pandas/io/clipboard', '__init__.py')
-from .clipboards import (init_osx_clipboard,

('pandas/io/clipboard', '__init__.py')
-from .windows import init_windows_clipboard

('pandas/io/clipboard', '__init__.py')
-# `import qtpy` sys.exit()s if DISPLAY is not in the environment.

('pandas/io/clipboard', '__init__.py')
+import time

('pandas/io/clipboard', '__init__.py')
+import warnings

('pandas/io/clipboard', '__init__.py')
+# `import PyQt4` sys.exit()s if DISPLAY is not in the environment.

('pandas/io/clipboard', '__init__.py')
+    # Try to import from qtpy, but if that fails try PyQt5 then PyQt4

('pandas/io/clipboard', '__init__.py')
+        from qtpy.QtWidgets import QApplication

('pandas/io/clipboard', '__init__.py')
+            from PyQt5.QtWidgets import QApplication

('pandas/io/clipboard', '__init__.py')
+            from PyQt4.QtGui import QApplication

('pandas/io/clipboard', '__init__.py')
+    from ctypes.wintypes import (

('pandas/io/clipboard', '__init__.py')
+# and importing is done in determine_clipboard():

('pandas/io/clipboard', '__init__.py')
+            import AppKit

('pandas/io/clipboard', '__init__.py')
+            import Foundation  # check if pyobjc is installed

('pandas/io/clipboard', '__init__.py')
-            import gtk  # noqa

('pandas/io/clipboard', '__init__.py')
+            import qtpy  # check if qtpy is installed

('pandas/io/clipboard', '__init__.py')
-            import qtpy  # noqa

('pandas/io/clipboard', '__init__.py')
-            # If qtpy isn't installed, fall back on importing PyQt5, or PyQt5

('pandas/io/clipboard', '__init__.py')
+            # If qtpy isn't installed, fall back on importing PyQt4.

('pandas/io/clipboard', '__init__.py')
-                import PyQt5  # noqa

('pandas/io/clipboard', '__init__.py')
+                import PyQt5  # check if PyQt5 is installed

('pandas/io/clipboard', '__init__.py')
-                    import PyQt4  # noqa

('pandas/io/clipboard', '__init__.py')
+                    import PyQt4  # check if PyQt4 is installed

('pandas/io/clipboard', '__init__.py')
+    This allows users to import pyperclip without having determine_clipboard()

('pandas/io/clipboard', '__init__.py')
+    This allows users to import pyperclip without having determine_clipboard()

('pandas/tseries', '__init__.py')
+from typing import TYPE_CHECKING

('pandas/tseries', '__init__.py')
+    # import modules that have public classes/functions:

('pandas/tseries', '__init__.py')
+    from pandas.tseries import (

('pandas/tseries', 'offsets.py')
-from datetime import date, datetime, timedelta

('pandas/tseries', 'offsets.py')
-import functools

('pandas/tseries', 'offsets.py')
-import operator

('pandas/tseries', 'offsets.py')
+from pandas._libs.tslibs.offsets import (  # noqa:F401

('pandas/tseries', 'offsets.py')
-from dateutil.easter import easter

('pandas/tseries', 'offsets.py')
-import numpy as np

('pandas/tseries', 'offsets.py')
-from pandas._libs.tslibs import (

('pandas/tseries', 'offsets.py')
-from pandas._libs.tslibs.offsets import (

('pandas/tseries', 'offsets.py')
-import pandas.compat as compat

('pandas/tseries', 'offsets.py')
-from pandas.compat import range

('pandas/tseries', 'offsets.py')
-from pandas.errors import AbstractMethodError

('pandas/tseries', 'offsets.py')
-from pandas.util._decorators import cache_readonly

('pandas/tseries', 'offsets.py')
-from pandas.core.dtypes.generic import ABCPeriod

('pandas/tseries', 'offsets.py')
-from pandas.core.tools.datetimes import to_datetime

('pandas/tseries', 'offsets.py')
-            from pandas.tseries.frequencies import to_offset

('pandas/tseries', 'offsets.py')
-            from pandas.tseries.frequencies import to_offset

('pandas/tseries', 'offsets.py')
-    from pandas.tseries.frequencies import to_offset

('pandas/tseries', 'frequencies.py')
-from datetime import timedelta

('pandas/tseries', 'frequencies.py')
-import re

('pandas/tseries', 'frequencies.py')
+from __future__ import annotations

('pandas/tseries', 'frequencies.py')
+import warnings

('pandas/tseries', 'frequencies.py')
-from pytz import AmbiguousTimeError

('pandas/tseries', 'frequencies.py')
-from pandas._libs.tslibs import Timedelta, Timestamp

('pandas/tseries', 'frequencies.py')
-from pandas._libs.tslibs.ccalendar import MONTH_ALIASES, int_to_weekday

('pandas/tseries', 'frequencies.py')
-from pandas._libs.tslibs.conversion import tz_convert

('pandas/tseries', 'frequencies.py')
-from pandas._libs.tslibs.fields import build_field_sarray

('pandas/tseries', 'frequencies.py')
-import pandas._libs.tslibs.frequencies as libfreqs

('pandas/tseries', 'frequencies.py')
-from pandas._libs.tslibs.offsets import _offset_to_period_map

('pandas/tseries', 'frequencies.py')
-import pandas._libs.tslibs.resolution as libresolution

('pandas/tseries', 'frequencies.py')
-from pandas._libs.tslibs.resolution import Resolution

('pandas/tseries', 'frequencies.py')
-from pandas._libs.tslibs.timezones import UTC

('pandas/tseries', 'frequencies.py')
-import pandas.compat as compat

('pandas/tseries', 'frequencies.py')
-from pandas.compat import zip

('pandas/tseries', 'frequencies.py')
+from pandas._libs.tslibs import (

('pandas/tseries', 'frequencies.py')
+from pandas._libs.tslibs.ccalendar import (

('pandas/tseries', 'frequencies.py')
+from pandas._libs.tslibs.fields import (

('pandas/tseries', 'frequencies.py')
+from pandas._libs.tslibs.offsets import (  # noqa:F401

('pandas/tseries', 'frequencies.py')
+from pandas._libs.tslibs.parsing import get_rule_month

('pandas/tseries', 'frequencies.py')
+from pandas._typing import npt

('pandas/tseries', 'frequencies.py')
+from pandas.util._exceptions import find_stack_level

('pandas/tseries', 'frequencies.py')
-from pandas.tseries.offsets import (

('pandas/tseries', 'frequencies.py')
-    import pandas as pd

('pandas/tseries', 'frequencies.py')
+    from pandas.core.api import (

('pandas/tseries', 'holiday.py')
-from datetime import datetime, timedelta

('pandas/tseries', 'holiday.py')
+from __future__ import annotations

('pandas/tseries', 'holiday.py')
+from datetime import (

('pandas/tseries', 'holiday.py')
-from dateutil.relativedelta import FR, MO, SA, SU, TH, TU, WE  # noqa

('pandas/tseries', 'holiday.py')
+from dateutil.relativedelta import (  # noqa:F401

('pandas/tseries', 'holiday.py')
-from pandas.compat import add_metaclass

('pandas/tseries', 'holiday.py')
-from pandas import DateOffset, Series, Timestamp, date_range

('pandas/tseries', 'holiday.py')
-from pandas.tseries.offsets import Day, Easter

('pandas/tseries', 'holiday.py')
+from pandas import (

('pandas/tseries', 'holiday.py')
+from pandas.tseries.offsets import (

('pandas/_libs', 'util.pxd')
+cimport numpy as cnp

('pandas/_libs', 'util.pxd')
-from cython cimport Py_ssize_t

('pandas/_libs', 'util.pxd')
-cimport numpy as cnp

('pandas/_libs', 'util.pxd')
-from numpy cimport ndarray

('pandas/_libs', 'interval.pyx')
-from operator import le, lt

('pandas/_libs', 'interval.pyx')
-from cpython.object cimport (Py_EQ, Py_NE, Py_GT, Py_LT, Py_GE, Py_LE,

('pandas/_libs', 'interval.pyx')
+from operator import (

('pandas/_libs', 'interval.pyx')
+from cpython.datetime cimport (

('pandas/_libs', 'interval.pyx')
+from cpython.object cimport (

('pandas/_libs', 'interval.pyx')
-cimport pandas._libs.util as util

('pandas/_libs', 'interval.pyx')
-util.import_array()

('pandas/_libs', 'interval.pyx')
-from pandas._libs.hashtable cimport Int64Vector, Int64VectorData

('pandas/_libs', 'interval.pyx')
-from pandas._libs.tslibs import Timestamp

('pandas/_libs', 'interval.pyx')
+from pandas._libs cimport util

('pandas/_libs', 'interval.pyx')
+from pandas._libs.hashtable cimport Int64Vector

('pandas/_libs', 'interval.pyx')
+from pandas._libs.tslibs.timedeltas cimport _Timedelta

('pandas/_libs', 'interval.pyx')
+from pandas._libs.tslibs.timestamps cimport _Timestamp

('pandas/_libs', 'interval.pyx')
+from pandas._libs.tslibs.util cimport (

('pandas/_libs', 'sparse.pyx')
-from numpy cimport (ndarray, uint8_t, int64_t, int32_t, int16_t, int8_t,

('pandas/_libs', 'sparse.pyx')
+from numpy cimport (

('pandas/_libs', 'index.pyx')
-from datetime import datetime, timedelta, date

('pandas/_libs', 'index.pyx')
-import cython

('pandas/_libs', 'index.pyx')
+cimport cython

('pandas/_libs', 'index.pyx')
-from numpy cimport (ndarray, intp_t,

('pandas/_libs', 'index.pyx')
-                    # for cimport in cython>=0.27.3

('pandas/_libs', 'index.pyx')
+from numpy cimport (

('pandas/_libs', 'index.pyx')
-cimport pandas._libs.util as util

('pandas/_libs', 'index.pyx')
-from pandas._libs.tslibs.conversion cimport maybe_datetimelike_to_i8

('pandas/_libs', 'index.pyx')
+from pandas._libs cimport util

('pandas/_libs', 'index.pyx')
-from pandas._libs import algos, hashtable as _hash

('pandas/_libs', 'index.pyx')
-from pandas._libs.tslibs import Timestamp, Timedelta, period as periodlib

('pandas/_libs', 'index.pyx')
-from pandas._libs.missing import checknull

('pandas/_libs', 'index.pyx')
+from pandas._libs.tslibs.nattype cimport c_NaT as NaT

('pandas/_libs', 'index.pyx')
+from pandas._libs.tslibs.period cimport is_period_object

('pandas/_libs', 'index.pyx')
+from pandas._libs.tslibs.timedeltas cimport _Timedelta

('pandas/_libs', 'index.pyx')
+from pandas._libs.tslibs.timestamps cimport _Timestamp

('pandas/_libs', 'index.pyx')
+from pandas._libs import (

('pandas/_libs', 'index.pyx')
+from pandas._libs.lib cimport eq_NA_compat

('pandas/_libs', 'index.pyx')
+from pandas._libs.missing cimport (

('pandas/_libs', 'testing.pyx')
+import cmath

('pandas/_libs', 'testing.pyx')
+import math

('pandas/_libs', 'testing.pyx')
-from pandas import compat

('pandas/_libs', 'testing.pyx')
-from pandas.core.dtypes.missing import isna, array_equivalent

('pandas/_libs', 'testing.pyx')
+from numpy cimport import_array

('pandas/_libs', 'testing.pyx')
+import_array()

('pandas/_libs', 'testing.pyx')
+from pandas._libs.util cimport (

('pandas/_libs', 'testing.pyx')
+from pandas.core.dtypes.missing import (

('pandas/_libs', 'testing.pyx')
-            from pandas.util.testing import assert_class_equal

('pandas/_libs', 'testing.pyx')
+            from pandas._testing import assert_class_equal

('pandas/_libs', 'testing.pyx')
-                from pandas.util.testing import raise_assert_detail

('pandas/_libs', 'testing.pyx')
+                from pandas._testing import raise_assert_detail

('pandas/_libs', 'testing.pyx')
-                from pandas.util.testing import assert_attr_equal

('pandas/_libs', 'testing.pyx')
+                from pandas._testing import assert_attr_equal

('pandas/_libs', 'testing.pyx')
-            from pandas.util.testing import raise_assert_detail

('pandas/_libs', 'testing.pyx')
+            from pandas._testing import raise_assert_detail

('pandas/_libs', 'testing.pyx')
-            from pandas.util.testing import raise_assert_detail

('pandas/_libs', 'testing.pyx')
+            from pandas._testing import raise_assert_detail

('pandas/_libs', 'testing.pyx')
-        from pandas.util.testing import assert_class_equal

('pandas/_libs', 'testing.pyx')
+        from pandas._testing import assert_class_equal

('pandas/_libs', 'hashing.pyx')
-from libc.stdlib cimport malloc, free

('pandas/_libs', 'hashing.pyx')
+from libc.stdlib cimport (

('pandas/_libs', 'hashing.pyx')
-from numpy cimport uint8_t, uint32_t, uint64_t, import_array

('pandas/_libs', 'hashing.pyx')
+from numpy cimport (

('pandas/_libs', 'hashing.pyx')
+    import_array,

('pandas/_libs', 'join.pyx')
-from numpy cimport (ndarray,

('pandas/_libs', 'join.pyx')
+from numpy cimport (

('pandas/_libs', 'join.pyx')
-from pandas._libs.algos import groupsort_indexer, ensure_platform_int

('pandas/_libs', 'join.pyx')
-from pandas.core.algorithms import take_nd

('pandas/_libs', 'join.pyx')
+from pandas._libs.algos import groupsort_indexer

('pandas/_libs', 'join.pyx')
+from pandas._libs.dtypes cimport (

('pandas/_libs', 'algos.pxd')
-from pandas._libs.util cimport numeric

('pandas/_libs', 'algos.pxd')
+from pandas._libs.dtypes cimport numeric_t

('pandas/_libs', 'missing.pxd')
+from numpy cimport (

('pandas/_libs', 'missing.pxd')
-from numpy cimport ndarray, uint8_t

('pandas/_libs', 'hashtable.pyx')
-from cpython cimport (PyObject, Py_INCREF,

('pandas/_libs', 'hashtable.pyx')
-from libc.stdlib cimport malloc, free

('pandas/_libs', 'hashtable.pyx')
+from cpython.mem cimport (

('pandas/_libs', 'hashtable.pyx')
+from cpython.ref cimport (

('pandas/_libs', 'hashtable.pyx')
+from libc.stdlib cimport (

('pandas/_libs', 'hashtable.pyx')
-from numpy cimport ndarray, uint8_t, uint32_t, float64_t

('pandas/_libs', 'hashtable.pyx')
+from numpy cimport (

('pandas/_libs', 'hashtable.pyx')
+from numpy.math cimport NAN

('pandas/_libs', 'hashtable.pyx')
+from pandas._libs cimport util

('pandas/_libs', 'hashtable.pyx')
-cimport pandas._libs.util as util

('pandas/_libs', '__init__.py')
-from .tslibs import (

('pandas/_libs', '__init__.py')
+from pandas._libs.interval import Interval

('pandas/_libs', '__init__.py')
+from pandas._libs.tslibs import (

('pandas/_libs', 'intervaltree.pxi.in')
+from pandas._libs.algos import is_monotonic

('pandas/_libs', 'intervaltree.pxi.in')
-        import pandas as pd

('pandas/_libs', 'khash.pxd')
-from cpython cimport PyObject

('pandas/_libs', 'khash.pxd')
-from numpy cimport int64_t, uint64_t, int32_t, uint32_t, float64_t

('pandas/_libs', 'khash.pxd')
+from cpython.object cimport PyObject

('pandas/_libs', 'khash.pxd')
+from numpy cimport (

('pandas/_libs', 'properties.pyx')
-from cpython cimport (

('pandas/_libs', 'properties.pyx')
+from cpython.dict cimport (

('pandas/_libs', 'lib.pyx')
+from collections import abc

('pandas/_libs', 'lib.pyx')
-from fractions import Fraction

('pandas/_libs', 'lib.pyx')
-from numbers import Number

('pandas/_libs', 'lib.pyx')
-import sys

('pandas/_libs', 'lib.pyx')
+from enum import Enum

('pandas/_libs', 'lib.pyx')
-from cpython cimport (Py_INCREF, PyTuple_SET_ITEM,

('pandas/_libs', 'lib.pyx')
-from cpython.datetime cimport (PyDateTime_Check, PyDate_Check,

('pandas/_libs', 'lib.pyx')
+from cpython.datetime cimport (

('pandas/_libs', 'lib.pyx')
+from cpython.iterator cimport PyIter_Check

('pandas/_libs', 'lib.pyx')
+from cpython.number cimport PyNumber_Check

('pandas/_libs', 'lib.pyx')
+from cpython.object cimport (

('pandas/_libs', 'lib.pyx')
+from cpython.ref cimport Py_INCREF

('pandas/_libs', 'lib.pyx')
+from cpython.sequence cimport PySequence_Check

('pandas/_libs', 'lib.pyx')
+from cpython.tuple cimport (

('pandas/_libs', 'lib.pyx')
+from cython cimport floating

('pandas/_libs', 'lib.pyx')
-from numpy cimport (ndarray, PyArray_GETITEM,

('pandas/_libs', 'lib.pyx')
+from numpy cimport (

('pandas/_libs', 'lib.pyx')
-cimport pandas._libs.util as util

('pandas/_libs', 'lib.pyx')
-from pandas._libs.util cimport is_nan, UINT64_MAX, INT64_MAX, INT64_MIN

('pandas/_libs', 'lib.pyx')
+from pandas._libs cimport util

('pandas/_libs', 'lib.pyx')
+from pandas._libs.util cimport (

('pandas/_libs', 'lib.pyx')
-from pandas._libs.tslibs.nattype cimport NPY_NAT

('pandas/_libs', 'lib.pyx')
-from pandas._libs.tslibs.nattype import NaT

('pandas/_libs', 'lib.pyx')
+from pandas._libs.tslibs import (

('pandas/_libs', 'lib.pyx')
+from pandas._libs.tslibs.period import Period

('pandas/_libs', 'lib.pyx')
+from pandas._libs.missing cimport (

('pandas/_libs', 'lib.pyx')
+from pandas._libs.tslibs.nattype cimport (

('pandas/_libs', 'lib.pyx')
+from pandas._libs.tslibs.offsets cimport is_offset_object

('pandas/_libs', 'lib.pyx')
+from pandas._libs.tslibs.period cimport is_period_object

('pandas/_libs', 'lib.pyx')
-from pandas._libs.tslibs.timezones cimport get_timezone, tz_compare

('pandas/_libs', 'lib.pyx')
-from pandas._libs.missing cimport (

('pandas/_libs', 'lib.pyx')
+from pandas._libs.tslibs.timezones cimport tz_compare

('pandas/_libs', 'lib.pyx')
+    >>> import datetime

('pandas/_libs', 'lib.pyx')
+    >>> import datetime

('pandas/_libs', 'lib.pyx')
+    >>> import datetime

('pandas/_libs', 'lib.pyx')
+    >>> import datetime

('pandas/_libs', 'lib.pyx')
-        from pandas.core.dtypes.cast import (

('pandas/_libs', 'lib.pyx')
+        from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike

('pandas/_libs', 'lib.pyx')
+            from pandas import DatetimeIndex

('pandas/_libs', 'lib.pyx')
+            from pandas import TimedeltaIndex

('pandas/_libs', 'lib.pyx')
+            from pandas import PeriodIndex

('pandas/_libs', 'lib.pyx')
+            from pandas import IntervalIndex

('pandas/_libs', 'lib.pyx')
+                            from pandas.core.arrays import IntegerArray

('pandas/_libs', 'writers.pyx')
+import cython

('pandas/_libs', 'writers.pyx')
+import numpy as np

('pandas/_libs', 'writers.pyx')
-import cython

('pandas/_libs', 'writers.pyx')
-from cython import Py_ssize_t

('pandas/_libs', 'writers.pyx')
-from cpython cimport PyBytes_GET_SIZE, PyUnicode_GET_SIZE

('pandas/_libs', 'writers.pyx')
-    from cpython cimport PyString_GET_SIZE

('pandas/_libs', 'writers.pyx')
-    from cpython cimport PyUnicode_GET_SIZE as PyString_GET_SIZE

('pandas/_libs', 'writers.pyx')
-import numpy as np

('pandas/_libs', 'writers.pyx')
-from numpy cimport ndarray, uint8_t

('pandas/_libs', 'writers.pyx')
+from cpython cimport (

('pandas/_libs', 'writers.pyx')
+from numpy cimport (

('pandas/_libs', 'reduction.pyx')
-from distutils.version import LooseVersion

('pandas/_libs', 'reduction.pyx')
+import numpy as np

('pandas/_libs', 'reduction.pyx')
-from cython import Py_ssize_t

('pandas/_libs', 'reduction.pyx')
-from cpython cimport Py_INCREF

('pandas/_libs', 'reduction.pyx')
+cimport numpy as cnp

('pandas/_libs', 'reduction.pyx')
-from libc.stdlib cimport malloc, free

('pandas/_libs', 'reduction.pyx')
-import numpy as np

('pandas/_libs', 'reduction.pyx')
-cimport numpy as cnp

('pandas/_libs', 'reduction.pyx')
-from numpy cimport (ndarray,

('pandas/_libs', 'reduction.pyx')
-cimport pandas._libs.util as util

('pandas/_libs', 'reduction.pyx')
-from pandas._libs.lib import maybe_convert_objects

('pandas/_libs', 'reduction.pyx')
+from pandas._libs.util cimport is_array

('pandas/_libs', 'hashtable.pxd')
+from numpy cimport (

('pandas/_libs', 'hashtable.pxd')
-from numpy cimport ndarray

('pandas/_libs', 'reshape.pyx')
-from numpy cimport (int8_t, int16_t, int32_t, int64_t, uint8_t, uint16_t,

('pandas/_libs', 'reshape.pyx')
+from numpy cimport (

('pandas/_libs', 'reshape.pyx')
+import numpy as np

('pandas/_libs', 'reshape.pyx')
+cimport numpy as cnp

('pandas/_libs', 'reshape.pyx')
+cnp.import_array()

('pandas/_libs', 'reshape.pyx')
+from pandas._libs.dtypes cimport numeric_object_t

('pandas/_libs', 'reshape.pyx')
+from pandas._libs.lib cimport c_is_list_like

('pandas/_libs', 'missing.pyx')
+from decimal import Decimal

('pandas/_libs', 'missing.pyx')
+import numbers

('pandas/_libs', 'missing.pyx')
+from sys import maxsize

('pandas/_libs', 'missing.pyx')
-from numpy cimport ndarray, int64_t, uint8_t, float64_t

('pandas/_libs', 'missing.pyx')
+from numpy cimport (

('pandas/_libs', 'missing.pyx')
-cimport pandas._libs.util as util

('pandas/_libs', 'missing.pyx')
+from pandas._libs cimport util

('pandas/_libs', 'missing.pyx')
+from pandas._libs.tslibs.nattype cimport (

('pandas/_libs', 'missing.pyx')
-from pandas._libs.tslibs.nattype cimport (

('pandas/_libs', 'missing.pyx')
+from pandas._libs.ops_dispatch import maybe_dispatch_ufunc_to_dunder_op

('pandas/_libs', 'algos.pyx')
-from libc.stdlib cimport malloc, free

('pandas/_libs', 'algos.pyx')
+from libc.math cimport (

('pandas/_libs', 'algos.pyx')
+from libc.stdlib cimport (

('pandas/_libs', 'algos.pyx')
-from libc.math cimport fabs, sqrt

('pandas/_libs', 'algos.pyx')
-from numpy cimport (ndarray,

('pandas/_libs', 'algos.pyx')
+from numpy cimport (

('pandas/_libs', 'algos.pyx')
-from pandas._libs.util cimport numeric, get_nat

('pandas/_libs', 'algos.pyx')
+from pandas._libs.dtypes cimport (

('pandas/_libs', 'algos.pyx')
+from pandas._libs.util cimport get_nat

('pandas/_libs', 'algos.pyx')
-    from pandas._libs.lib import maybe_convert_objects

('pandas/_libs', 'hashtable_class_helper.pxi.in')
+# are_equivalent_{{c_type}} is cimported via khash.pxd

('pandas/_libs', 'hashtable_class_helper.pxi.in')
+cimported_types = ['complex64',

('pandas/_libs', 'hashtable_class_helper.pxi.in')
+{{for name in cimported_types}}

('pandas/_libs', 'hashtable_class_helper.pxi.in')
+from pandas._libs.khash cimport (

('pandas/_libs', 'hashtable_class_helper.pxi.in')
+from pandas._libs.tslibs.util cimport get_c_string

('pandas/_libs', 'hashtable_class_helper.pxi.in')
+from pandas._libs.missing cimport C_NA

('pandas/_libs', 'groupby.pyx')
-from libc.stdlib cimport malloc, free

('pandas/_libs', 'groupby.pyx')
+from cython cimport floating

('pandas/_libs', 'groupby.pyx')
+from libc.stdlib cimport (

('pandas/_libs', 'groupby.pyx')
-from numpy cimport (ndarray,

('pandas/_libs', 'groupby.pyx')
+from numpy cimport (

('pandas/_libs', 'groupby.pyx')
+from numpy.math cimport NAN

('pandas/_libs', 'groupby.pyx')
-from pandas._libs.util cimport numeric, get_nat

('pandas/_libs', 'groupby.pyx')
-from pandas._libs.algos cimport (swap, TiebreakEnumType, TIEBREAK_AVERAGE,

('pandas/_libs', 'groupby.pyx')
-from pandas._libs.algos import (take_2d_axis1_float64_float64,

('pandas/_libs', 'groupby.pyx')
+from pandas._libs.algos cimport kth_smallest_c

('pandas/_libs', 'groupby.pyx')
+from pandas._libs.util cimport get_nat

('pandas/_libs', 'groupby.pyx')
+from pandas._libs.algos import (

('pandas/_libs', 'groupby.pyx')
+from pandas._libs.dtypes cimport (

('pandas/_libs', 'groupby.pyx')
+from pandas._libs.missing cimport checknull

('pandas/_libs', 'tslib.pyx')
+import warnings

('pandas/_libs', 'tslib.pyx')
-from cpython.datetime cimport (PyDateTime_Check, PyDate_Check,

('pandas/_libs', 'tslib.pyx')
+from cpython.datetime cimport (

('pandas/_libs', 'tslib.pyx')
-from numpy cimport int64_t, ndarray, float64_t

('pandas/_libs', 'tslib.pyx')
+from numpy cimport (

('pandas/_libs', 'tslib.pyx')
+from pandas._libs.tslibs.np_datetime cimport (

('pandas/_libs', 'tslib.pyx')
-from pandas._libs.tslibs.np_datetime cimport (

('pandas/_libs', 'tslib.pyx')
-from pandas._libs.tslibs.timedeltas cimport cast_from_unit

('pandas/_libs', 'tslib.pyx')
-from pandas._libs.tslibs.timezones cimport is_utc, is_tzlocal, get_dst_info

('pandas/_libs', 'tslib.pyx')
-from pandas._libs.tslibs.timezones import UTC

('pandas/_libs', 'tslib.pyx')
-from pandas._libs.tslibs.nattype import nat_strings, iNaT  # noqa:F821

('pandas/_libs', 'tslib.pyx')
-from pandas._libs.tslibs.offsets cimport to_offset

('pandas/_libs', 'tslib.pyx')
-from pandas._libs.tslibs.timestamps cimport create_timestamp_from_ts

('pandas/_libs', 'tslib.pyx')
+from pandas._libs.tslibs.timestamps cimport _Timestamp

('pandas/_libs', 'tslib.pyx')
+from pandas._libs.missing cimport checknull_with_nat_and_na

('pandas/_libs', 'tslib.pyx')
+from pandas._libs.tslibs.tzconversion cimport tz_localize_to_utc_single

('pandas/_libs', 'internals.pyx')
+from collections import defaultdict

('pandas/_libs', 'internals.pyx')
-from cpython cimport PyObject

('pandas/_libs', 'internals.pyx')
+from cpython.slice cimport PySlice_GetIndicesEx

('pandas/_libs', 'internals.pyx')
-from numpy cimport int64_t

('pandas/_libs', 'internals.pyx')
+cimport numpy as cnp

('pandas/_libs', 'internals.pyx')
+from numpy cimport (

('pandas/_libs', 'internals.pyx')
+cnp.import_array()

('pandas/_libs', 'internals.pyx')
+from pandas._libs.arrays cimport NDArrayBacked

('pandas/_libs', 'internals.pyx')
+from pandas._libs.util cimport (

('pandas/_libs', 'internals.pyx')
-        from pandas.core.index import Int64Index

('pandas/_libs', 'internals.pyx')
+    from pandas.core.internals.blocks import new_block

('pandas/_libs', 'internals.pyx')
+        from pandas.core.construction import extract_array

('pandas/_libs', 'internals.pyx')
+            from pandas.core.internals.api import maybe_infer_ndim

('pandas/_libs', 'internals.pyx')
+        from pandas.core.construction import extract_array

('pandas/_libs', 'internals.pyx')
+        from pandas.core.internals.blocks import (

('pandas/_libs', 'internals.pyx')
+        from pandas.core.internals.managers import ensure_index

('pandas/_libs', 'ops.pyx')
-from cpython cimport (PyObject_RichCompareBool,

('pandas/_libs', 'ops.pyx')
+from cpython.object cimport (

('pandas/_libs', 'ops.pyx')
-from numpy cimport ndarray, uint8_t, import_array

('pandas/_libs', 'ops.pyx')
+from numpy cimport (

('pandas/_libs', 'ops.pyx')
+    import_array,

('pandas/_libs', 'ops.pyx')
-from pandas._libs.util cimport UINT8_MAX, is_nan

('pandas/_libs', 'ops.pyx')
+from pandas._libs.util cimport is_nan

('pandas/_libs', 'parsers.pyx')
-import os

('pandas/_libs', 'parsers.pyx')
+from csv import (

('pandas/_libs', 'parsers.pyx')
+from errno import ENOENT

('pandas/_libs', 'parsers.pyx')
-from csv import QUOTE_MINIMAL, QUOTE_NONNUMERIC, QUOTE_NONE

('pandas/_libs', 'parsers.pyx')
-from errno import ENOENT

('pandas/_libs', 'parsers.pyx')
-from libc.string cimport strncpy, strlen, strcasecmp

('pandas/_libs', 'parsers.pyx')
+from libc.string cimport (

('pandas/_libs', 'parsers.pyx')
-from cpython cimport (PyObject, PyBytes_FromString,

('pandas/_libs', 'parsers.pyx')
-from cpython.ref cimport Py_XDECREF

('pandas/_libs', 'parsers.pyx')
+from cpython.bytes cimport (

('pandas/_libs', 'parsers.pyx')
+from cpython.exc cimport (

('pandas/_libs', 'parsers.pyx')
+from cpython.object cimport PyObject

('pandas/_libs', 'parsers.pyx')
+from cpython.ref cimport (

('pandas/_libs', 'parsers.pyx')
+from cpython.unicode cimport (

('pandas/_libs', 'parsers.pyx')
-from numpy cimport ndarray, uint8_t, uint64_t, int64_t, float64_t

('pandas/_libs', 'parsers.pyx')
+from numpy cimport (

('pandas/_libs', 'parsers.pyx')
-from pandas._libs.util cimport UINT64_MAX, INT64_MAX, INT64_MIN

('pandas/_libs', 'parsers.pyx')
+from pandas._libs cimport util

('pandas/_libs', 'parsers.pyx')
+from pandas._libs.util cimport (

('pandas/_libs', 'parsers.pyx')
-import pandas.compat as compat

('pandas/_libs', 'parsers.pyx')
+from pandas.errors import (

('pandas/_libs', 'parsers.pyx')
-from pandas.core.arrays import Categorical

('pandas/_libs', 'parsers.pyx')
-from pandas.core.dtypes.concat import union_categoricals

('pandas/_libs', 'parsers.pyx')
-import pandas.io.common as icom

('pandas/_libs', 'parsers.pyx')
-from pandas.errors import (ParserError, DtypeWarning,

('pandas/_libs', 'parsers.pyx')
-# Ultimately, we want to remove this import. See gh-12665 and gh-14479.

('pandas/_libs', 'parsers.pyx')
+from pandas.core.dtypes.dtypes import CategoricalDtype

('pandas/_libs', 'parsers.pyx')
+from pandas.core.dtypes.inference import is_dict_like

('pandas/_libs', 'parsers.pyx')
-                import gzip

('pandas/_libs', 'parsers.pyx')
-                import bz2

('pandas/_libs', 'parsers.pyx')
-                import zipfile

('pandas/_libs', 'parsers.pyx')
-                lzma = compat.import_lzma()

('pandas/_libs', 'parsers.pyx')
-            "Specify dtype option on import or set low_memory=False."

('pandas/_libs/tslibs', 'util.pxd')
-from cpython cimport PyTypeObject

('pandas/_libs/tslibs', 'util.pxd')
+from cpython.object cimport PyTypeObject

('pandas/_libs/tslibs', 'util.pxd')
-from numpy cimport int64_t

('pandas/_libs/tslibs', 'util.pxd')
+from numpy cimport (

('pandas/_libs/tslibs', 'util.pxd')
-    int _import_array() except -1

('pandas/_libs/tslibs', 'util.pxd')
-cdef inline int import_array() except -1:

('pandas/_libs/tslibs', 'util.pxd')
-    _import_array()

('pandas/_libs/tslibs', 'ccalendar.pyx')
-from numpy cimport int64_t, int32_t

('pandas/_libs/tslibs', 'ccalendar.pyx')
-from locale import LC_TIME

('pandas/_libs/tslibs', 'ccalendar.pyx')
-from pandas._libs.tslibs.strptime import LocaleTime

('pandas/_libs/tslibs', 'ccalendar.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'ccalendar.pyx')
-    from pandas.util.testing import set_locale

('pandas/_libs/tslibs', 'fields.pyx')
+from locale import LC_TIME

('pandas/_libs/tslibs', 'fields.pyx')
-from numpy cimport ndarray, int64_t, int32_t, int8_t

('pandas/_libs/tslibs', 'fields.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'fields.pyx')
+from pandas._config.localization import set_locale

('pandas/_libs/tslibs', 'fields.pyx')
+from pandas._libs.tslibs.nattype cimport NPY_NAT

('pandas/_libs/tslibs', 'fields.pyx')
-from pandas._libs.tslibs.nattype cimport NPY_NAT

('pandas/_libs/tslibs', 'fields.pyx')
+from pandas._libs.tslibs.strptime import LocaleTime

('pandas/_libs/tslibs', 'timestamps.pxd')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'timestamps.pxd')
+from numpy cimport int64_t

('pandas/_libs/tslibs', 'timestamps.pxd')
-from numpy cimport int64_t

('pandas/_libs/tslibs', 'timestamps.pxd')
+from pandas._libs.tslibs.base cimport ABCTimestamp

('pandas/_libs/tslibs', 'nattype.pyx')
-from cpython cimport (

('pandas/_libs/tslibs', 'nattype.pyx')
+import warnings

('pandas/_libs/tslibs', 'nattype.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'nattype.pyx')
+from cpython.object cimport (

('pandas/_libs/tslibs', 'nattype.pyx')
-from cpython.datetime cimport (datetime,

('pandas/_libs/tslibs', 'nattype.pyx')
+from cpython.version cimport PY_MINOR_VERSION

('pandas/_libs/tslibs', 'nattype.pyx')
+cimport pandas._libs.tslibs.util as util

('pandas/_libs/tslibs', 'nattype.pyx')
-cimport pandas._libs.tslibs.util as util

('pandas/_libs/tslibs', 'nattype.pyx')
-from pandas._libs.tslibs.util cimport (

('pandas/_libs/tslibs', 'nattype.pyx')
+        >>> from datetime import date, time

('pandas/_libs/tslibs', 'nattype.pyx')
+        >>> import pytz

('pandas/_libs/tslibs', 'conversion.pyx')
-from numpy cimport uint8_t, int64_t, int32_t, intp_t, ndarray

('pandas/_libs/tslibs', 'conversion.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'conversion.pyx')
-from dateutil.tz import tzutc

('pandas/_libs/tslibs', 'conversion.pyx')
-from datetime import time as datetime_time

('pandas/_libs/tslibs', 'conversion.pyx')
-from cpython.datetime cimport (datetime, tzinfo,

('pandas/_libs/tslibs', 'conversion.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'conversion.pyx')
-from pandas._libs.tslibs.ccalendar import DAY_SECONDS, HOUR_SECONDS

('pandas/_libs/tslibs', 'conversion.pyx')
+from pandas._libs.tslibs.base cimport ABCTimestamp

('pandas/_libs/tslibs', 'conversion.pyx')
+from pandas._libs.tslibs.timezones cimport (

('pandas/_libs/tslibs', 'conversion.pyx')
-from pandas._libs.tslibs.timedeltas cimport (cast_from_unit,

('pandas/_libs/tslibs', 'conversion.pyx')
-from pandas._libs.tslibs.timezones cimport (

('pandas/_libs/tslibs', 'conversion.pyx')
-from pandas._libs.tslibs.timezones import UTC

('pandas/_libs/tslibs', 'conversion.pyx')
-from pandas._libs.tslibs.nattype import nat_strings

('pandas/_libs/tslibs', 'conversion.pyx')
+from pandas._libs.tslibs.tzconversion cimport (

('pandas/_libs/tslibs', 'conversion.pyx')
+        from .period import Period

('pandas/_libs/tslibs', 'conversion.pyx')
+            from pandas._libs.tslibs.timestamps import Timestamp

('pandas/_libs/tslibs', 'conversion.pyx')
+            from pandas._libs.tslibs.timestamps import Timestamp

('pandas/_libs/tslibs', 'conversion.pyx')
-    from pandas._libs.tslibs.timestamps import Timestamp

('pandas/_libs/tslibs', 'np_datetime.pxd')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'np_datetime.pxd')
+from numpy cimport (

('pandas/_libs/tslibs', 'np_datetime.pxd')
-from cpython.datetime cimport date, datetime

('pandas/_libs/tslibs', 'np_datetime.pxd')
-from numpy cimport int64_t, int32_t

('pandas/_libs/tslibs', 'timezones.pxd')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'timedeltas.pxd')
+from cpython.datetime cimport timedelta

('pandas/_libs/tslibs', '__init__.py')
-from .conversion import normalize_date, localize_pydatetime, tz_convert_single

('pandas/_libs/tslibs', '__init__.py')
-from .nattype import NaT, iNaT, is_null_datetimelike

('pandas/_libs/tslibs', '__init__.py')
-from .np_datetime import OutOfBoundsDatetime

('pandas/_libs/tslibs', '__init__.py')
-from .period import Period, IncompatibleFrequency

('pandas/_libs/tslibs', '__init__.py')
-from .timestamps import Timestamp

('pandas/_libs/tslibs', '__init__.py')
-from .timedeltas import delta_to_nanoseconds, ints_to_pytimedelta, Timedelta

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs import dtypes

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.conversion import (

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.dtypes import Resolution

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.nattype import (

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.np_datetime import OutOfBoundsDatetime

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.offsets import (

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.period import (

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.timedeltas import (

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.timestamps import Timestamp

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.timezones import tz_compare

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.tzconversion import tz_convert_from_utc_single

('pandas/_libs/tslibs', '__init__.py')
+from pandas._libs.tslibs.vectorized import (

('pandas/_libs/tslibs', 'offsets.pxd')
+from numpy cimport int64_t

('pandas/_libs/tslibs', 'offsets.pyx')
+import operator

('pandas/_libs/tslibs', 'offsets.pyx')
+import re

('pandas/_libs/tslibs', 'offsets.pyx')
+import time

('pandas/_libs/tslibs', 'offsets.pyx')
+import warnings

('pandas/_libs/tslibs', 'offsets.pyx')
-import time

('pandas/_libs/tslibs', 'offsets.pyx')
-from cpython.datetime cimport (PyDateTime_IMPORT,

('pandas/_libs/tslibs', 'offsets.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'offsets.pyx')
+from dateutil.easter import easter

('pandas/_libs/tslibs', 'offsets.pyx')
-from numpy cimport int64_t

('pandas/_libs/tslibs', 'offsets.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'offsets.pyx')
-from pandas._libs.tslibs.util cimport is_string_object, is_integer_object

('pandas/_libs/tslibs', 'offsets.pyx')
-from pandas._libs.tslibs.ccalendar import MONTHS, DAYS

('pandas/_libs/tslibs', 'offsets.pyx')
-from pandas._libs.tslibs.ccalendar cimport get_days_in_month, dayofweek

('pandas/_libs/tslibs', 'offsets.pyx')
+from pandas._libs.properties import cache_readonly

('pandas/_libs/tslibs', 'offsets.pyx')
+from pandas._libs.tslibs cimport util

('pandas/_libs/tslibs', 'offsets.pyx')
+from pandas._libs.tslibs.util cimport (

('pandas/_libs/tslibs', 'offsets.pyx')
+from pandas._libs.tslibs.ccalendar import (

('pandas/_libs/tslibs', 'offsets.pyx')
+from pandas._libs.tslibs.ccalendar cimport (

('pandas/_libs/tslibs', 'offsets.pyx')
-from pandas._libs.tslibs.nattype cimport NPY_NAT

('pandas/_libs/tslibs', 'offsets.pyx')
+from pandas._libs.tslibs.nattype cimport (

('pandas/_libs/tslibs', 'offsets.pyx')
-from pandas._libs.tslibs.timezones import UTC

('pandas/_libs/tslibs', 'offsets.pyx')
+from pandas._libs.tslibs.tzconversion cimport tz_convert_from_utc_single

('pandas/_libs/tslibs', 'offsets.pyx')
+from .dtypes cimport PeriodDtypeCode

('pandas/_libs/tslibs', 'offsets.pyx')
+from .timedeltas cimport (

('pandas/_libs/tslibs', 'offsets.pyx')
+from .timedeltas import Timedelta

('pandas/_libs/tslibs', 'offsets.pyx')
+from .timestamps cimport _Timestamp

('pandas/_libs/tslibs', 'offsets.pyx')
+from .timestamps import Timestamp

('pandas/_libs/tslibs', 'offsets.pyx')
-    imports

('pandas/_libs/tslibs', 'offsets.pyx')
-    from pandas.tseries.frequencies import to_offset

('pandas/_libs/tslibs', 'offsets.pyx')
+        # TODO: Avoid circular/runtime import

('pandas/_libs/tslibs', 'offsets.pyx')
+        from .vectorized import normalize_i8_timestamps

('pandas/_libs/tslibs', 'offsets.pyx')
-        from pandas.tseries.offsets import _delta_to_tick

('pandas/_libs/tslibs', 'offsets.pyx')
+    >>> from pandas.tseries.offsets import DateOffset

('pandas/_libs/tslibs', 'offsets.pyx')
+    >>> from pandas.tseries.offsets import BYearEnd

('pandas/_libs/tslibs', 'offsets.pyx')
+    >>> from pandas.tseries.offsets import BYearBegin

('pandas/_libs/tslibs', 'offsets.pyx')
+    >>> from pandas.tseries.offsets import BQuarterEnd

('pandas/_libs/tslibs', 'offsets.pyx')
+    >>> from pandas.tseries.offsets import BQuarterBegin

('pandas/_libs/tslibs', 'offsets.pyx')
+    >>> from pandas.tseries.offsets import BMonthEnd

('pandas/_libs/tslibs', 'offsets.pyx')
+    >>> from pandas.tseries.offsets import BMonthBegin

('pandas/_libs/tslibs', 'offsets.pyx')
-    can do isinstance checks on _Tick and avoid importing tseries.offsets

('pandas/_libs/tslibs', 'parsing.pyx')
-import sys

('pandas/_libs/tslibs', 'parsing.pyx')
-from cpython.datetime cimport datetime

('pandas/_libs/tslibs', 'parsing.pyx')
+import warnings

('pandas/_libs/tslibs', 'parsing.pyx')
+from libc.string cimport strchr

('pandas/_libs/tslibs', 'parsing.pyx')
+import cython

('pandas/_libs/tslibs', 'parsing.pyx')
+from cython import Py_ssize_t

('pandas/_libs/tslibs', 'parsing.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'parsing.pyx')
+    import_datetime,

('pandas/_libs/tslibs', 'parsing.pyx')
+from cpython.object cimport PyObject_Str

('pandas/_libs/tslibs', 'parsing.pyx')
+from cpython.version cimport PY_VERSION_HEX

('pandas/_libs/tslibs', 'parsing.pyx')
+import_datetime()

('pandas/_libs/tslibs', 'parsing.pyx')
-import six

('pandas/_libs/tslibs', 'parsing.pyx')
-from six import binary_type, text_type

('pandas/_libs/tslibs', 'parsing.pyx')
-# Avoid import from outside _libs

('pandas/_libs/tslibs', 'parsing.pyx')
-    from StringIO import StringIO

('pandas/_libs/tslibs', 'parsing.pyx')
-    from io import StringIO

('pandas/_libs/tslibs', 'parsing.pyx')
+cimport numpy as cnp

('pandas/_libs/tslibs', 'parsing.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'parsing.pyx')
+cnp.import_array()

('pandas/_libs/tslibs', 'parsing.pyx')
-from dateutil.tz import (tzoffset,

('pandas/_libs/tslibs', 'parsing.pyx')
+from dateutil.parser import (

('pandas/_libs/tslibs', 'parsing.pyx')
-from dateutil.parser import DEFAULTPARSER

('pandas/_libs/tslibs', 'parsing.pyx')
-from dateutil.parser import parse as du_parse

('pandas/_libs/tslibs', 'parsing.pyx')
-from pandas._libs.tslibs.ccalendar import MONTH_NUMBERS

('pandas/_libs/tslibs', 'parsing.pyx')
-from pandas._libs.tslibs.nattype import nat_strings, NaT

('pandas/_libs/tslibs', 'parsing.pyx')
+from dateutil.tz import (

('pandas/_libs/tslibs', 'parsing.pyx')
+from pandas._config import get_option

('pandas/_libs/tslibs', 'parsing.pyx')
+from pandas._libs.tslibs.ccalendar cimport c_MONTH_NUMBERS

('pandas/_libs/tslibs', 'parsing.pyx')
+from pandas._libs.tslibs.nattype cimport (

('pandas/_libs/tslibs', 'parsing.pyx')
+from pandas._libs.tslibs.offsets cimport is_offset_object

('pandas/_libs/tslibs', 'parsing.pyx')
+from pandas._libs.tslibs.util cimport (

('pandas/_libs/tslibs', 'parsing.pyx')
-    """ Defer import of get_option to break an import cycle that caused

('pandas/_libs/tslibs', 'parsing.pyx')
-        from pandas.core.config import get_option

('pandas/_libs/tslibs', 'timedeltas.pyx')
-import textwrap

('pandas/_libs/tslibs', 'timedeltas.pyx')
-import sys

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from cpython cimport Py_NE, Py_EQ, PyObject_RichCompare

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from cpython.object cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from numpy cimport int64_t

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from cpython.datetime cimport (datetime, timedelta,

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from pandas._libs.tslibs.base cimport ABCTimestamp

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from pandas._libs.tslibs.conversion cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from pandas._libs.tslibs.nattype cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from pandas._libs.tslibs.np_datetime cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from pandas._libs.tslibs.offsets cimport is_tick_object

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from pandas._libs.tslibs.ccalendar import DAY_SECONDS

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from pandas._libs.tslibs.np_datetime cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from pandas._libs.tslibs.nattype import nat_strings

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from pandas._libs.tslibs.nattype cimport (

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from pandas._libs.tslibs.offsets cimport to_offset

('pandas/_libs/tslibs', 'timedeltas.pyx')
-from pandas._libs.tslibs.offsets import _Tick as Tick

('pandas/_libs/tslibs', 'timedeltas.pyx')
+from pandas._libs.tslibs.fields import (

('pandas/_libs/tslibs', 'timedeltas.pyx')
+            from pandas._libs.tslibs.conversion import OutOfBoundsTimedelta

('pandas/_libs/tslibs', 'timedeltas.pyx')
+            from pandas._libs.tslibs.conversion import OutOfBoundsTimedelta

('pandas/_libs/tslibs', 'timedeltas.pyx')
-            from timestamps import Timestamp

('pandas/_libs/tslibs', 'timedeltas.pyx')
+            from pandas._libs.tslibs.timestamps import Timestamp

('pandas/_libs/tslibs', 'timedeltas.pyx')
+        from pandas._libs.tslibs.offsets import to_offset

('pandas/_libs/tslibs', 'timezones.pyx')
+from datetime import (

('pandas/_libs/tslibs', 'timezones.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'timezones.pyx')
-from dateutil.tz import gettz as dateutil_gettz

('pandas/_libs/tslibs', 'timezones.pyx')
+import pytz

('pandas/_libs/tslibs', 'timezones.pyx')
-import pytz

('pandas/_libs/tslibs', 'timezones.pyx')
+    >>> from datetime import datetime

('pandas/_libs/tslibs', 'timezones.pyx')
+    >>> from pytz import timezone

('pandas/_libs/tslibs', 'np_datetime.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'np_datetime.pyx')
+from cpython.object cimport (

('pandas/_libs/tslibs', 'np_datetime.pyx')
-from cpython cimport (Py_EQ, Py_NE, Py_GE, Py_GT, Py_LT, Py_LE,

('pandas/_libs/tslibs', 'np_datetime.pyx')
-from cpython.datetime cimport (datetime, date,

('pandas/_libs/tslibs', 'np_datetime.pyx')
+from pandas._libs.tslibs.util cimport get_c_string_buf_and_size

('pandas/_libs/tslibs', 'conversion.pxd')
-from cpython.datetime cimport datetime, tzinfo

('pandas/_libs/tslibs', 'conversion.pxd')
-from numpy cimport int64_t, int32_t

('pandas/_libs/tslibs', 'conversion.pxd')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'conversion.pxd')
+from numpy cimport (

('pandas/_libs/tslibs', 'strptime.pyx')
+import calendar

('pandas/_libs/tslibs', 'strptime.pyx')
+import locale

('pandas/_libs/tslibs', 'strptime.pyx')
+import re

('pandas/_libs/tslibs', 'strptime.pyx')
-import locale

('pandas/_libs/tslibs', 'strptime.pyx')
-import calendar

('pandas/_libs/tslibs', 'strptime.pyx')
-import re

('pandas/_libs/tslibs', 'strptime.pyx')
-from datetime import date as datetime_date

('pandas/_libs/tslibs', 'strptime.pyx')
-    from thread import allocate_lock as _thread_allocate_lock

('pandas/_libs/tslibs', 'strptime.pyx')
-        from _thread import allocate_lock as _thread_allocate_lock

('pandas/_libs/tslibs', 'strptime.pyx')
-            from dummy_thread import allocate_lock as _thread_allocate_lock

('pandas/_libs/tslibs', 'strptime.pyx')
-            from _dummy_thread import allocate_lock as _thread_allocate_lock

('pandas/_libs/tslibs', 'strptime.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'strptime.pyx')
+from _thread import allocate_lock as _thread_allocate_lock

('pandas/_libs/tslibs', 'strptime.pyx')
+import numpy as np

('pandas/_libs/tslibs', 'strptime.pyx')
-import numpy as np

('pandas/_libs/tslibs', 'strptime.pyx')
-from numpy cimport int64_t

('pandas/_libs/tslibs', 'strptime.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'strptime.pyx')
+from pandas._libs.missing cimport checknull_with_nat_and_na

('pandas/_libs/tslibs', 'strptime.pyx')
+from pandas._libs.tslibs.nattype cimport (

('pandas/_libs/tslibs', 'strptime.pyx')
-from pandas._libs.tslibs.util cimport is_string_object

('pandas/_libs/tslibs', 'strptime.pyx')
-from pandas._libs.tslibs.nattype cimport checknull_with_nat, NPY_NAT

('pandas/_libs/tslibs', 'strptime.pyx')
-from pandas._libs.tslibs.nattype import nat_strings

('pandas/_libs/tslibs', 'period.pyx')
-from datetime import datetime

('pandas/_libs/tslibs', 'period.pyx')
-from cpython cimport (

('pandas/_libs/tslibs', 'period.pyx')
+import warnings

('pandas/_libs/tslibs', 'period.pyx')
+cimport numpy as cnp

('pandas/_libs/tslibs', 'period.pyx')
+from cpython.object cimport (

('pandas/_libs/tslibs', 'period.pyx')
-from numpy cimport int64_t, import_array, ndarray

('pandas/_libs/tslibs', 'period.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'period.pyx')
-import_array()

('pandas/_libs/tslibs', 'period.pyx')
-from libc.stdlib cimport free, malloc

('pandas/_libs/tslibs', 'period.pyx')
-from libc.time cimport strftime, tm

('pandas/_libs/tslibs', 'period.pyx')
-from libc.string cimport strlen, memset

('pandas/_libs/tslibs', 'period.pyx')
+cnp.import_array()

('pandas/_libs/tslibs', 'period.pyx')
+from libc.stdlib cimport (

('pandas/_libs/tslibs', 'period.pyx')
+from libc.string cimport (

('pandas/_libs/tslibs', 'period.pyx')
+from libc.time cimport (

('pandas/_libs/tslibs', 'period.pyx')
-from cpython.datetime cimport (PyDateTime_Check, PyDelta_Check, PyDate_Check,

('pandas/_libs/tslibs', 'period.pyx')
+from cpython.datetime cimport (

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.util cimport is_period_object, is_string_object

('pandas/_libs/tslibs', 'period.pyx')
+from pandas._libs.tslibs.timedeltas import Timedelta

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.timezones cimport is_utc, is_tzlocal, get_dst_info

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.timedeltas import Timedelta

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.timedeltas cimport delta_to_nanoseconds

('pandas/_libs/tslibs', 'period.pyx')
-cimport pandas._libs.tslibs.ccalendar as ccalendar

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.ccalendar import MONTH_NUMBERS

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.conversion cimport tz_convert_utc_to_tzlocal

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.frequencies cimport (

('pandas/_libs/tslibs', 'period.pyx')
+from pandas._libs.tslibs.timedeltas cimport (

('pandas/_libs/tslibs', 'period.pyx')
+from pandas._libs.tslibs.conversion import ensure_datetime64ns

('pandas/_libs/tslibs', 'period.pyx')
+from pandas._libs.tslibs.dtypes cimport (

('pandas/_libs/tslibs', 'period.pyx')
+from pandas._libs.tslibs.parsing cimport quarter_to_myear

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.resolution import Resolution

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.nattype import nat_strings

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.offsets cimport to_offset

('pandas/_libs/tslibs', 'period.pyx')
-from pandas._libs.tslibs.offsets import _Tick

('pandas/_libs/tslibs', 'period.pyx')
+from pandas._libs.tslibs.offsets cimport (

('pandas/_libs/tslibs', 'period.pyx')
+from pandas._libs.tslibs.offsets import INVALID_FREQ_ERR_MSG

('pandas/_libs/tslibs', 'timestamps.pyx')
-from cpython cimport (PyObject_RichCompareBool, PyObject_RichCompare,

('pandas/_libs/tslibs', 'timestamps.pyx')
+cimport cython

('pandas/_libs/tslibs', 'timestamps.pyx')
-from numpy cimport int64_t, int32_t, int8_t

('pandas/_libs/tslibs', 'timestamps.pyx')
+from numpy cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
-from datetime import time as datetime_time, timedelta

('pandas/_libs/tslibs', 'timestamps.pyx')
-from cpython.datetime cimport (datetime,

('pandas/_libs/tslibs', 'timestamps.pyx')
+from cpython.datetime cimport (  # alias bc `tzinfo` is a kwarg below

('pandas/_libs/tslibs', 'timestamps.pyx')
+from cpython.object cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs cimport ccalendar

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.base cimport ABCTimestamp

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.conversion cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
-cimport pandas._libs.tslibs.ccalendar as ccalendar

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.ccalendar import DAY_SECONDS

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.conversion import (

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.conversion cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.fields import get_start_end_field, get_date_name_field

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.nattype cimport NPY_NAT, c_NaT as NaT

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.fields import (

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.nattype cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.np_datetime cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.np_datetime cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.offsets cimport to_offset

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.offsets cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.timedeltas cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.timedeltas cimport delta_to_nanoseconds

('pandas/_libs/tslibs', 'timestamps.pyx')
-from pandas._libs.tslibs.timezones import UTC

('pandas/_libs/tslibs', 'timestamps.pyx')
+from pandas._libs.tslibs.tzconversion cimport (

('pandas/_libs/tslibs', 'timestamps.pyx')
-    from numpy import divmod as npdivmod

('pandas/_libs/tslibs', 'timestamps.pyx')
+        from pandas import Period

('pandas/_libs/tslibs', 'timestamps.pyx')
+        >>> from datetime import date, time

('pandas/_libs/tslibs', 'timestamps.pyx')
-        from pandas import Period

('pandas/_libs/tslibs', 'timestamps.pyx')
+        >>> import pytz

('pandas/_libs/tslibs', 'nattype.pxd')
+from cpython.datetime cimport datetime

('pandas/_libs/tslibs', 'nattype.pxd')
+from numpy cimport int64_t

('pandas/_libs/tslibs', 'nattype.pxd')
-from cpython.datetime cimport datetime

('pandas/_libs/tslibs', 'nattype.pxd')
-from numpy cimport int64_t

('pandas/_libs/tslibs', 'ccalendar.pxd')
+from cython cimport Py_ssize_t

('pandas/_libs/tslibs', 'ccalendar.pxd')
+from numpy cimport (

('pandas/_libs/tslibs', 'ccalendar.pxd')
-from cython cimport Py_ssize_t

('pandas/_libs/tslibs', 'ccalendar.pxd')
-from numpy cimport int64_t, int32_t

('pandas/_libs/src/ujson/python', 'ujson.c')
+  import_array()

('pandas/_libs/src/ujson/python', 'objToJSON.c')
-// import_array() compat

('pandas/_libs/src/ujson/python', 'objToJSON.c')
-    import_array();

('pandas/plotting', '__init__.py')
+from pandas.plotting._core import (

('pandas/plotting', '__init__.py')
+from pandas.plotting._misc import (

('pandas/plotting', '__init__.py')
-from pandas.plotting._misc import (scatter_matrix, radviz,

('pandas/plotting', '__init__.py')
-from pandas.plotting._core import boxplot

('pandas/plotting', '__init__.py')
-from pandas.plotting._style import plot_params

('pandas/plotting', '__init__.py')
-from pandas.plotting._tools import table

('pandas/plotting', '__init__.py')
-    from pandas.plotting._converter import (

('pandas/plotting', '__init__.py')
-    from pandas.plotting._converter import (

('pandas/plotting', '_core.py')
-from __future__ import division

('pandas/plotting', '_core.py')
-from collections import namedtuple

('pandas/plotting', '_core.py')
-from distutils.version import LooseVersion

('pandas/plotting', '_core.py')
-import re

('pandas/plotting', '_core.py')
-import warnings

('pandas/plotting', '_core.py')
-import numpy as np

('pandas/plotting', '_core.py')
-import pandas.compat as compat

('pandas/plotting', '_core.py')
-from pandas.compat import lrange, map, range, string_types, zip

('pandas/plotting', '_core.py')
-from pandas.errors import AbstractMethodError

('pandas/plotting', '_core.py')
-from pandas.util._decorators import Appender, cache_readonly

('pandas/plotting', '_core.py')
+from __future__ import annotations

('pandas/plotting', '_core.py')
+import importlib

('pandas/plotting', '_core.py')
+import types

('pandas/plotting', '_core.py')
+from typing import (

('pandas/plotting', '_core.py')
+from pandas._config import get_option

('pandas/plotting', '_core.py')
+from pandas._typing import IndexLabel

('pandas/plotting', '_core.py')
+from pandas.util._decorators import (

('pandas/plotting', '_core.py')
-from pandas.core.dtypes.missing import isna, notna, remove_na_arraylike

('pandas/plotting', '_core.py')
-import pandas.core.common as com

('pandas/plotting', '_core.py')
-from pandas.core.config import get_option

('pandas/plotting', '_core.py')
-from pandas.core.generic import _shared_doc_kwargs, _shared_docs

('pandas/plotting', '_core.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/plotting', '_core.py')
-from pandas.plotting._compat import _mpl_ge_3_0_0

('pandas/plotting', '_core.py')
-from pandas.plotting._style import _get_standard_colors, plot_params

('pandas/plotting', '_core.py')
-from pandas.plotting._tools import (

('pandas/plotting', '_core.py')
-    from pandas.plotting import _converter

('pandas/plotting', '_core.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_core.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_core.py')
+    from pandas import DataFrame

('pandas/plotting', '_core.py')
-        import matplotlib.pyplot as plt

('pandas/plotting', '_core.py')
-        from matplotlib.axes import Subplot

('pandas/plotting', '_core.py')
-        from pandas.plotting._timeseries import _use_dynamic_x

('pandas/plotting', '_core.py')
-            from pandas.plotting._timeseries import _maybe_convert_index

('pandas/plotting', '_core.py')
-        from pandas.plotting._timeseries import (_maybe_resample,

('pandas/plotting', '_core.py')
-        import matplotlib as mpl

('pandas/plotting', '_core.py')
-        from scipy.stats import gaussian_kde

('pandas/plotting', '_core.py')
-        from scipy import __version__ as spv

('pandas/plotting', '_core.py')
-        from matplotlib.artist import setp

('pandas/plotting', '_core.py')
-            from pandas.core.series import Series

('pandas/plotting', '_core.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_core.py')
-            from matplotlib.artist import setp

('pandas/plotting', '_core.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_core.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_core.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_core.py')
-    >>> import itertools

('pandas/plotting', '_core.py')
-        from pandas.core.series import Series

('pandas/plotting', '_core.py')
-        from pandas.core.reshape.concat import concat

('pandas/plotting', '_core.py')
-    from pandas.core.series import Series

('pandas/plotting', '_core.py')
+        >>> import itertools

('pandas/plotting', '_core.py')
+        The imported backend.

('pandas/plotting', '_core.py')
+    from importlib.metadata import entry_points

('pandas/plotting', '_core.py')
+        # we need to attempt an import here to raise an ImportError if needed.

('pandas/plotting', '_core.py')
+            module = importlib.import_module("pandas.plotting._matplotlib")

('pandas/plotting', '_core.py')
+            module = importlib.import_module(backend)

('pandas/plotting', '_core.py')
+    The backend is imported lazily, as matplotlib is a soft dependency, and

('pandas/plotting', '_core.py')
+    Modifies `_backends` with imported backend as a side effect.

('pandas/plotting', '_misc.py')
-from __future__ import division

('pandas/plotting', '_misc.py')
-import numpy as np

('pandas/plotting', '_misc.py')
-from pandas.compat import lmap, lrange, range, zip

('pandas/plotting', '_misc.py')
-from pandas.util._decorators import deprecate_kwarg

('pandas/plotting', '_misc.py')
-from pandas.core.dtypes.missing import notna

('pandas/plotting', '_misc.py')
-from pandas.io.formats.printing import pprint_thing

('pandas/plotting', '_misc.py')
-from pandas.plotting._style import _get_standard_colors

('pandas/plotting', '_misc.py')
-from pandas.plotting._tools import _set_ticks_props, _subplots

('pandas/plotting', '_misc.py')
+from contextlib import contextmanager

('pandas/plotting', '_misc.py')
+from pandas.plotting._core import _get_plot_backend

('pandas/plotting', '_misc.py')
-                    from scipy.stats import gaussian_kde

('pandas/plotting', '_misc.py')
-    import matplotlib.lines as mlines

('pandas/plotting', '_misc.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_misc.py')
-    import matplotlib.patches as patches

('pandas/plotting', '_misc.py')
-    from math import sqrt, pi

('pandas/plotting', '_misc.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_misc.py')
-    import random

('pandas/plotting', '_misc.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_misc.py')
-    >>> from matplotlib import pyplot as plt

('pandas/plotting', '_misc.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_misc.py')
-    import matplotlib.pyplot as plt

('pandas/plotting', '_misc.py')
-    import matplotlib.pyplot as plt

('pandas/api', '__init__.py')
-from . import types, extensions  # noqa

('pandas/api', '__init__.py')
+from pandas.api import (  # noqa:F401

('pandas/api/types', '__init__.py')
-from pandas.core.dtypes.api import *  # noqa

('pandas/api/types', '__init__.py')
-from pandas.core.dtypes.dtypes import (CategoricalDtype,  # noqa

('pandas/api/types', '__init__.py')
-from pandas.core.dtypes.concat import union_categoricals  # noqa

('pandas/api/types', '__init__.py')
-from pandas._libs.lib import infer_dtype  # noqa

('pandas/api/types', '__init__.py')
+from pandas._libs.lib import infer_dtype

('pandas/api/types', '__init__.py')
+from pandas.core.dtypes.api import *  # noqa: F401, F403

('pandas/api/types', '__init__.py')
+from pandas.core.dtypes.concat import union_categoricals

('pandas/api/types', '__init__.py')
+from pandas.core.dtypes.dtypes import (

('pandas/api/extensions', '__init__.py')
-from pandas.core.accessor import (register_dataframe_accessor,  # noqa

('pandas/api/extensions', '__init__.py')
-from pandas.core.algorithms import take  # noqa

('pandas/api/extensions', '__init__.py')
-from pandas.core.arrays import (ExtensionArray,    # noqa

('pandas/api/extensions', '__init__.py')
-from pandas.core.dtypes.dtypes import (  # noqa

('pandas/api/extensions', '__init__.py')
+from pandas._libs.lib import no_default

('pandas/api/extensions', '__init__.py')
+from pandas.core.dtypes.base import (

('pandas/api/extensions', '__init__.py')
+from pandas.core.accessor import (

('pandas/api/extensions', '__init__.py')
+from pandas.core.algorithms import take

('pandas/api/extensions', '__init__.py')
+from pandas.core.arrays import (

('pandas/errors', '__init__.py')
-from pandas._libs.tslibs import OutOfBoundsDatetime

('pandas/errors', '__init__.py')
+from pandas._config.config import OptionError  # noqa:F401

('pandas/errors', '__init__.py')
+from pandas._libs.tslibs import (  # noqa:F401

('pandas/errors', '__init__.py')
-    >>> import os









