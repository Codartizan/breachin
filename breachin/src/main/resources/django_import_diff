('', 'setup.py')
-from setuptools import find_packages, setup

('', 'setup.py')
+from setuptools import setup

('', 'setup.py')
-version = __import__('django').get_version()

('scripts', 'manage_translations.py')
-from subprocess import PIPE, Popen, call

('scripts', 'manage_translations.py')
+from subprocess import PIPE, run

('django', 'shortcuts.py')
-import warnings

('django', 'shortcuts.py')
-from django.utils.deprecation import RemovedInDjango30Warning

('django/templatetags', 'i18n.py')
+from decimal import Decimal

('django/middleware', 'gzip.py')
-import re

('django/middleware', 'gzip.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/forms', 'models.py')
-from collections import OrderedDict

('django/forms', 'models.py')
+import warnings

('django/forms', 'models.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/forms', 'models.py')
+    from django.db.models import Exists, OuterRef, Q

('django/forms', 'models.py')
-    from django.db.models.fields import Field as ModelField

('django/forms', 'models.py')
+    from django.db.models import Field as ModelField

('django/forms', 'models.py')
-        from django.db.models import AutoField, OneToOneField, ForeignKey

('django/forms', 'models.py')
+        from django.db.models import AutoField, ForeignKey, OneToOneField

('django/forms', 'fields.py')
+import json

('django/forms', 'fields.py')
-# Provide this import for backwards compatibility.

('django/forms', 'fields.py')
-from django.core.validators import EMPTY_VALUES  # NOQA

('django/forms', 'fields.py')
-from django.utils.dateparse import parse_duration

('django/forms', 'fields.py')
+from django.utils.dateparse import parse_datetime, parse_duration

('django/forms', 'fields.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/forms', 'boundfield.py')
+import re

('django/forms', 'renderers.py')
-    from django.template.backends.jinja2 import Jinja2

('django/forms', 'renderers.py')
+        from django.template.backends.jinja2 import Jinja2

('django/forms', 'widgets.py')
-import re

('django/forms', 'widgets.py')
-from django.conf import settings

('django/forms', 'widgets.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/forms', 'formsets.py')
-from django.forms.widgets import HiddenInput

('django/forms', 'formsets.py')
+from django.forms.widgets import HiddenInput, NumberInput

('django/forms', 'formsets.py')
-from django.utils.translation import gettext as _, ngettext

('django/forms', 'formsets.py')
+from django.utils.translation import gettext_lazy as _, ngettext

('django/forms', 'forms.py')
-from collections import OrderedDict

('django/forms', 'forms.py')
-# BoundField is imported for backwards compatibility in Django 1.9

('django/forms', 'forms.py')
-from django.forms.boundfield import BoundField  # NOQA

('django/forms', 'forms.py')
-# pretty_name is imported for backwards compatibility in Django 1.9

('django/forms', 'forms.py')
-from django.forms.utils import ErrorDict, ErrorList, pretty_name  # NOQA

('django/forms', 'forms.py')
+from django.forms.utils import ErrorDict, ErrorList

('django/forms', 'forms.py')
+from django.utils.datastructures import MultiValueDict

('django/forms', 'utils.py')
-from django.core.exceptions import ValidationError  # backwards compatibility

('django/forms', 'utils.py')
+from django.core.exceptions import ValidationError

('django/core', 'signing.py')
-import re

('django/core', 'signing.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/core', 'validators.py')
+import warnings

('django/core', 'validators.py')
-from django.utils.functional import SimpleLazyObject

('django/core', 'validators.py')
+from django.utils.deprecation import RemovedInDjango41Warning

('django/core', 'validators.py')
+from django.utils.encoding import punycode

('django/core', 'validators.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/core', 'paginator.py')
-from django.utils.deprecation import RemovedInDjango31Warning

('django/core', 'exceptions.py')
+import operator

('django/core', 'exceptions.py')
+from django.utils.hashable import make_hashable

('django/core/cache', '__init__.py')
-from threading import local

('django/core/cache', '__init__.py')
-from django.conf import settings

('django/core/cache', '__init__.py')
+from django.utils.connection import BaseConnectionHandler, ConnectionProxy

('django/core/cache', '__init__.py')
-                # Trying to import the given backend, in case it's a dotted path

('django/core/cache', '__init__.py')
-                import_string(backend)

('django/core/cache', '__init__.py')
-        backend_cls = import_string(backend)

('django/core/cache', '__init__.py')
+            backend_cls = import_string(backend)

('django/core/cache', 'utils.py')
-from urllib.parse import quote

('django/core/cache/backends', 'memcached.py')
-from django.core.cache.backends.base import DEFAULT_TIMEOUT, BaseCache

('django/core/cache/backends', 'memcached.py')
+import warnings

('django/core/cache/backends', 'memcached.py')
+from django.core.cache.backends.base import (

('django/core/cache/backends', 'memcached.py')
+from django.utils.deprecation import RemovedInDjango41Warning

('django/core/cache/backends', 'memcached.py')
+        import pymemcache.serde

('django/core/cache/backends', 'db.py')
-from django.utils.inspect import func_supports_parameter

('django/core/mail', 'message.py')
-from email.errors import InvalidHeaderDefect, NonASCIILocalPartDefect

('django/core/mail', 'message.py')
+from email.errors import HeaderParseError

('django/core/mail', 'message.py')
-from email.headerregistry import Address

('django/core/mail', 'message.py')
+from email.headerregistry import Address, parser

('django/core/mail', 'message.py')
-from email.utils import formatdate, getaddresses, make_msgid, parseaddr

('django/core/mail', 'message.py')
+from email.utils import formataddr, formatdate, getaddresses, make_msgid

('django/core/mail', 'message.py')
-from django.utils.encoding import force_text

('django/core/mail', 'message.py')
+from django.utils.encoding import force_str, punycode

('django/core/mail', 'utils.py')
+from django.utils.encoding import punycode

('django/core/mail/backends', 'smtp.py')
-import socket

('django/core/checks', 'caches.py')
+import pathlib

('django/core/checks', 'caches.py')
-from django.core.cache import DEFAULT_CACHE_ALIAS

('django/core/checks', 'caches.py')
+from django.core.cache import DEFAULT_CACHE_ALIAS, caches

('django/core/checks', 'caches.py')
+from django.core.cache.backends.filebased import FileBasedCache

('django/core/checks', 'caches.py')
-from . import Error, Tags, register

('django/core/checks', 'caches.py')
+from . import Error, Tags, Warning, register

('django/core/checks', 'registry.py')
+from django.utils.inspect import func_accepts_kwargs

('django/core/checks', 'model_checks.py')
-from django.core.checks import Error, Tags, register

('django/core/checks', 'model_checks.py')
+from django.conf import settings

('django/core/checks', 'model_checks.py')
+from django.core.checks import Error, Tags, Warning, register

('django/core/checks', '__init__.py')
+import django.core.checks.async_checks  # NOQA isort:skip

('django/core/checks', 'translation.py')
+from django.utils.translation import get_supported_language_variant

('django/core/checks/security', 'csrf.py')
+import inspect

('django/core/checks/security', 'csrf.py')
-from .. import Tags, Warning, register

('django/core/checks/security', 'csrf.py')
+from .. import Error, Tags, Warning, register

('django/core/checks/security', 'csrf.py')
+    from django.middleware.csrf import _get_failure_view

('django/core/checks/security', 'csrf.py')
+            "The CSRF failure view '%s' could not be imported." %

('django/core/checks/security', 'base.py')
-from .. import Tags, Warning, register

('django/core/checks/security', 'base.py')
+from django.core.exceptions import ImproperlyConfigured

('django/core/checks/security', 'base.py')
+from .. import Error, Tags, Warning, register

('django/core/management', 'color.py')
+    import colorama

('django/core/management', 'color.py')
+            import winreg

('django/core/management', '__init__.py')
-from collections import OrderedDict, defaultdict

('django/core/management', '__init__.py')
+from argparse import (

('django/core/management', '__init__.py')
+from collections import defaultdict

('django/core/management', 'templates.py')
-from os import path

('django/core/management', 'utils.py')
+import fnmatch

('django/core/management', 'utils.py')
-from subprocess import PIPE, Popen

('django/core/management', 'utils.py')
+from pathlib import Path

('django/core/management', 'utils.py')
+from subprocess import PIPE, run

('django/core/management', 'base.py')
+import warnings

('django/core/management', 'base.py')
+from django.utils.deprecation import RemovedInDjango41Warning

('django/core/management/commands', 'createcachetable.py')
-from django.db.utils import DatabaseError

('django/core/management/commands', 'inspectdb.py')
-from collections import OrderedDict

('django/core/management/commands', 'sqlmigrate.py')
-from django.db.migrations.executor import MigrationExecutor

('django/core/management/commands', 'sqlmigrate.py')
-from django.db.migrations.loader import AmbiguityError

('django/core/management/commands', 'sqlmigrate.py')
+from django.db.migrations.loader import AmbiguityError, MigrationLoader

('django/core/management/commands', 'makemigrations.py')
+import warnings

('django/core/management/commands', 'makemigrations.py')
-from django.db import DEFAULT_DB_ALIAS, connections, router

('django/core/management/commands', 'makemigrations.py')
+from django.db import DEFAULT_DB_ALIAS, OperationalError, connections, router

('django/core/management/commands', 'makemessages.py')
-import fnmatch

('django/core/management/commands', 'makemessages.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/core/management/commands', 'dumpdata.py')
+import gzip

('django/core/management/commands', 'dumpdata.py')
+import os

('django/core/management/commands', 'dumpdata.py')
-from collections import OrderedDict

('django/core/management/commands', 'dumpdata.py')
+    import bz2

('django/core/management/commands', 'dumpdata.py')
+    import lzma

('django/core/management/commands', 'test.py')
-from django.test.utils import get_runner

('django/core/management/commands', 'test.py')
+from django.test.utils import NullTimeKeeper, TimeKeeper, get_runner

('django/core/management/commands', 'loaddata.py')
+    import lzma

('django/core/management/commands', 'runserver.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/core/management/commands', 'dbshell.py')
+import subprocess

('django/core/management/commands', 'startproject.py')
+from django.core.checks.security.base import SECRET_KEY_INSECURE_PREFIX

('django/core/management/commands', 'migrate.py')
+import sys

('django/core/management/commands', 'migrate.py')
-from collections import OrderedDict

('django/core/management/commands', 'migrate.py')
-from django.core.checks import Tags, run_checks

('django/core/management/commands', 'compilemessages.py')
+from pathlib import Path

('django/core/management/commands', 'compilemessages.py')
-from django.core.management.utils import find_command, popen_wrapper

('django/core/management/commands', 'compilemessages.py')
+from django.core.management.utils import (

('django/core/management/commands', 'diffsettings.py')
-        from django.conf import settings, Settings, global_settings

('django/core/management/commands', 'diffsettings.py')
+        from django.conf import Settings, global_settings, settings

('django/core/serializers', 'pyyaml.py')
-    from yaml import CSafeLoader as SafeLoader

('django/core/serializers', 'pyyaml.py')
-    from yaml import CSafeDumper as SafeDumper

('django/core/serializers', 'pyyaml.py')
+    from yaml import CSafeDumper as SafeDumper, CSafeLoader as SafeLoader

('django/core/serializers', 'pyyaml.py')
-    from yaml import SafeLoader, SafeDumper

('django/core/serializers', 'pyyaml.py')
+    from yaml import SafeDumper, SafeLoader

('django/core/serializers', 'xml_serializer.py')
+import json

('django/core/serializers', 'python.py')
-from collections import OrderedDict

('django/core/files', 'locks.py')
-    from ctypes import (sizeof, c_ulong, c_void_p, c_int64,

('django/core/files', 'locks.py')
+    from ctypes import (

('django/core/files', 'uploadhandler.py')
+import os

('django/core/files', 'utils.py')
+import os

('django/core/files', 'utils.py')
+import pathlib

('django/core/files', 'utils.py')
+from django.core.exceptions import SuspiciousFileOperation

('django/core/files', 'uploadedfile.py')
+from django.core.files.utils import validate_file_name

('django/core/files', 'storage.py')
+import pathlib

('django/core/files', 'storage.py')
+from django.core.files.utils import validate_file_name

('django/core/handlers', 'exception.py')
+import asyncio

('django/core/handlers', 'exception.py')
+from asgiref.sync import sync_to_async

('django/core/handlers', 'base.py')
+import asyncio

('django/core/handlers', 'base.py')
+from asgiref.sync import async_to_sync, sync_to_async

('django/core/handlers', 'wsgi.py')
-import cgi

('django/core/handlers', 'wsgi.py')
-import codecs

('django/core/handlers', 'wsgi.py')
-import re

('django/core/handlers', 'wsgi.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/bin', 'django-admin.py')
+import warnings

('django/bin', 'django-admin.py')
+    from django.utils.deprecation import RemovedInDjango40Warning

('django/dispatch', 'dispatcher.py')
+import logging

('django/dispatch', 'dispatcher.py')
+import warnings

('django/dispatch', 'dispatcher.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/template', 'library.py')
-from inspect import getfullargspec

('django/template', 'library.py')
+from inspect import getfullargspec, unwrap

('django/template', '__init__.py')
-from .context import ContextPopException                                # NOQA isort:skip

('django/template', '__init__.py')
+from .context import Context, ContextPopException, RequestContext       # NOQA isort:skip

('django/template', '__init__.py')
+from . import autoreload                                                # NOQA isort:skip

('django/template', 'defaultfilters.py')
-from .base import Variable, VariableDoesNotExist

('django/template', 'defaultfilters.py')
+from .base import VARIABLE_ATTRIBUTE_SEPARATOR

('django/template', 'engine.py')
-from .base import Context, Template

('django/template', 'engine.py')
-from .context import _builtin_context_processors

('django/template', 'engine.py')
+from .base import Template

('django/template', 'engine.py')
+from .context import Context, _builtin_context_processors

('django/template', 'utils.py')
-from collections import Counter, OrderedDict

('django/template', 'utils.py')
+from collections import Counter

('django/template', 'base.py')
+import inspect

('django/template', 'base.py')
-from inspect import getcallargs, getfullargspec, unwrap

('django/template', 'base.py')
-from django.template.context import (  # NOQA: imported for backwards compatibility

('django/template', 'base.py')
+from django.template.context import BaseContext

('django/template', 'base.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/template', 'defaulttags.py')
-from django.utils.html import conditional_escape, format_html

('django/template', 'defaulttags.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/template', 'defaulttags.py')
+from django.utils.html import conditional_escape, escape, format_html

('django/template', 'defaulttags.py')
+from .context import Context

('django/template', 'defaulttags.py')
-        from django.urls import reverse, NoReverseMatch

('django/template', 'defaulttags.py')
+        from django.urls import NoReverseMatch, reverse

('django/template/backends', 'jinja2.py')
+from pathlib import Path

('django/template/backends', 'utils.py')
-from django.utils.safestring import SafeText

('django/template/backends', 'utils.py')
+from django.utils.safestring import SafeString

('django/template/backends', 'dummy.py')
-from django.conf import settings

('django/utils', '_os.py')
+from pathlib import Path

('django/utils', 'version.py')
-from distutils.version import LooseVersion

('django/utils', 'version.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'encoding.py')
+import warnings

('django/utils', 'encoding.py')
-from django.utils import six

('django/utils', 'encoding.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/utils', 'log.py')
-from django.views.debug import ExceptionReporter

('django/utils', 'log.py')
+        self.reporter_class = import_string(reporter_class or settings.DEFAULT_EXCEPTION_REPORTER)

('django/utils', 'deprecation.py')
+import asyncio

('django/utils', 'deprecation.py')
+from asgiref.sync import sync_to_async

('django/utils', 'html.py')
+import html

('django/utils', 'html.py')
+from django.utils.encoding import punycode

('django/utils', 'html.py')
-from django.utils.safestring import SafeData, SafeText, mark_safe

('django/utils', 'html.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'html.py')
+from django.utils.safestring import SafeData, SafeString, mark_safe

('django/utils', 'cache.py')
-import re

('django/utils', 'cache.py')
+from collections import defaultdict

('django/utils', 'cache.py')
-from django.utils.encoding import iri_to_uri

('django/utils', 'cache.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'datetime_safe.py')
-import re

('django/utils', 'datetime_safe.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'inspect.py')
+import functools

('django/utils', 'functional.py')
-from django.utils.version import PY36, get_docs_version

('django/utils', 'crypto.py')
-import random

('django/utils', 'crypto.py')
-import time

('django/utils', 'crypto.py')
+import secrets

('django/utils', 'crypto.py')
+import warnings

('django/utils', 'crypto.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/utils', 'crypto.py')
-    import warnings

('django/utils', 'regex_helper.py')
+import re

('django/utils', 'regex_helper.py')
+from django.utils.functional import SimpleLazyObject

('django/utils', 'http.py')
-from django.core.exceptions import TooManyFieldsSent

('django/utils', 'http.py')
-from django.utils.deprecation import RemovedInDjango30Warning

('django/utils', 'http.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/utils', 'http.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'text.py')
+import warnings

('django/utils', 'text.py')
+from django.core.exceptions import SuspiciousFileOperation

('django/utils', 'text.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/utils', 'text.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'archive.py')
+from django.core.exceptions import SuspiciousOperation

('django/utils', 'safestring.py')
-from django.utils.functional import wraps

('django/utils', 'safestring.py')
+from functools import wraps

('django/utils', 'autoreload.py')
-import pathlib

('django/utils', 'autoreload.py')
+import django

('django/utils', 'autoreload.py')
+            # See https://docs.python.org/reference/import.html#main-spec

('django/utils', 'autoreload.py')
-    import django.__main__

('django/utils', 'autoreload.py')
+    import __main__

('django/utils', 'autoreload.py')
+    # see https://docs.python.org/3/reference/import.html#main-spec

('django/utils', 'autoreload.py')
-            # imported at runtime and only being polled now, or because the

('django/utils', 'datastructures.py')
-from collections import OrderedDict

('django/utils', 'dateformat.py')
-import re

('django/utils', 'dateformat.py')
+from email.utils import format_datetime as format_datetime_rfc5322

('django/utils', 'dateformat.py')
-from django.utils.timezone import get_default_timezone, is_aware, is_naive

('django/utils', 'dateformat.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'dateformat.py')
+from django.utils.timezone import (

('django/utils', 'timezone.py')
-import warnings

('django/utils', 'timezone.py')
-from threading import local

('django/utils', 'timezone.py')
+from asgiref.local import Local

('django/utils', 'timezone.py')
-from django.utils.deprecation import RemovedInDjango31Warning

('django/utils', 'dateparse.py')
-import re

('django/utils', 'dateparse.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils', 'xmlutils.py')
-from collections import OrderedDict

('django/utils', 'decorators.py')
-from contextlib import ContextDecorator  # noqa

('django/utils', 'decorators.py')
-from functools import WRAPPER_ASSIGNMENTS, partial, update_wrapper, wraps

('django/utils', 'decorators.py')
+from functools import partial, update_wrapper, wraps

('django/utils/translation', 'trans_real.py')
-from collections import OrderedDict

('django/utils/translation', 'trans_real.py')
-from threading import local

('django/utils/translation', 'trans_real.py')
+from asgiref.local import Local

('django/utils/translation', 'trans_real.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils/translation', 'trans_real.py')
-from . import LANGUAGE_SESSION_KEY, to_language, to_locale

('django/utils/translation', 'trans_real.py')
+from . import to_language, to_locale

('django/utils/translation', 'reloader.py')
-import threading

('django/utils/translation', 'reloader.py')
+from asgiref.local import Local

('django/utils/translation', 'reloader.py')
+from django.utils.autoreload import is_django_module

('django/utils/translation', '__init__.py')
-import re

('django/utils/translation', '__init__.py')
+import warnings

('django/utils/translation', '__init__.py')
+from decimal import ROUND_UP, Decimal

('django/utils/translation', '__init__.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/utils/translation', '__init__.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/utils/translation', '__init__.py')
-            from django.utils.translation.reloader import watch_for_translation_changes, translation_file_changed

('django/utils/translation', '__init__.py')
+            from django.utils.translation.reloader import (

('django/utils/translation', 'template.py')
-import re

('django/utils/translation', 'template.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/contrib/syndication', 'views.py')
-from django.conf import settings

('django/contrib/syndication', 'views.py')
+from django.utils.translation import get_language

('django/contrib/messages/storage', 'session.py')
-from django.conf import settings

('django/contrib/messages/storage', 'cookie.py')
+import binascii

('django/contrib/messages/storage', 'cookie.py')
+from django.core import signing

('django/contrib/auth', 'mixins.py')
+from urllib.parse import urlparse

('django/contrib/auth', 'mixins.py')
+from django.shortcuts import resolve_url

('django/contrib/auth', 'models.py')
+from django.apps import apps

('django/contrib/auth', 'models.py')
+from django.contrib.auth.hashers import make_password

('django/contrib/auth', 'models.py')
+                'backend must be a dotted import path string (got %r).'

('django/contrib/auth', 'base_user.py')
+from django.conf import settings

('django/contrib/auth', '__init__.py')
-from django.utils.translation import LANGUAGE_SESSION_KEY

('django/contrib/auth', '__init__.py')
+from django.views.decorators.debug import sensitive_variables

('django/contrib/auth', 'tokens.py')
-from datetime import date

('django/contrib/auth', 'tokens.py')
+from datetime import datetime, time

('django/contrib/auth', 'forms.py')
+from django.core.exceptions import ValidationError

('django/contrib/auth', 'backends.py')
-import inspect

('django/contrib/auth', 'backends.py')
-import warnings

('django/contrib/auth', 'backends.py')
-from django.utils.deprecation import RemovedInDjango31Warning

('django/contrib/auth', 'backends.py')
+from django.db.models import Exists, OuterRef, Q

('django/contrib/auth', 'hashers.py')
+import math

('django/contrib/auth', 'hashers.py')
-from collections import OrderedDict

('django/contrib/auth', 'middleware.py')
-from django.conf import settings

('django/contrib/auth', 'views.py')
-from django.utils.http import is_safe_url, urlsafe_base64_decode

('django/contrib/auth', 'views.py')
+from django.utils.http import (

('django/contrib/auth/migrations', '0011_update_proxy_permissions.py')
-from django.db import migrations

('django/contrib/auth/migrations', '0011_update_proxy_permissions.py')
+import sys

('django/contrib/auth/migrations', '0011_update_proxy_permissions.py')
+from django.core.management.color import color_style

('django/contrib/auth/migrations', '0011_update_proxy_permissions.py')
+from django.db import IntegrityError, migrations, transaction

('django/contrib/auth/management/commands', 'createsuperuser.py')
+import os

('django/contrib/admin', 'options.py')
-from collections import OrderedDict

('django/contrib/admin', 'options.py')
+from django.contrib.admin.decorators import display

('django/contrib/admin', 'options.py')
-from django.contrib.admin.views.autocomplete import AutocompleteJsonView

('django/contrib/admin', 'options.py')
-from django.db.models.fields import BLANK_CHOICE_DASH

('django/contrib/admin', 'options.py')
-from django.utils.inspect import get_func_args

('django/contrib/admin', 'options.py')
-from django.utils.text import capfirst, format_lazy, get_text_list

('django/contrib/admin', 'options.py')
+from django.utils.text import (

('django/contrib/admin', 'options.py')
-        from django.contrib.admin.models import LogEntry, ADDITION

('django/contrib/admin', 'options.py')
+        from django.contrib.admin.models import ADDITION, LogEntry

('django/contrib/admin', 'options.py')
-        from django.contrib.admin.models import LogEntry, CHANGE

('django/contrib/admin', 'options.py')
+        from django.contrib.admin.models import CHANGE, LogEntry

('django/contrib/admin', 'options.py')
-        from django.contrib.admin.models import LogEntry, DELETION

('django/contrib/admin', 'options.py')
+        from django.contrib.admin.models import DELETION, LogEntry

('django/contrib/admin', 'checks.py')
-import warnings

('django/contrib/admin', 'checks.py')
+import collections

('django/contrib/admin', 'checks.py')
-from django.db.models.expressions import Combinable, F, OrderBy

('django/contrib/admin', 'checks.py')
+from django.db.models.expressions import Combinable

('django/contrib/admin', 'checks.py')
-from django.utils.deprecation import RemovedInDjango30Warning

('django/contrib/admin', 'checks.py')
-from django.utils.inspect import get_func_args

('django/contrib/admin', 'checks.py')
+    from django.contrib.admin.sites import all_sites

('django/contrib/admin', 'checks.py')
-        from django.contrib.admin import ListFilter, FieldListFilter

('django/contrib/admin', 'checks.py')
+        from django.contrib.admin import FieldListFilter, ListFilter

('django/contrib/admin', 'actions.py')
+from django.contrib.admin.decorators import action

('django/contrib/admin', '__init__.py')
-# ACTION_CHECKBOX_NAME is unused, but should stay since its import from here

('django/contrib/admin', '__init__.py')
-from django.contrib.admin.decorators import register

('django/contrib/admin', '__init__.py')
+from django.contrib.admin.decorators import action, display, register

('django/contrib/admin', '__init__.py')
-from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME

('django/contrib/admin', 'widgets.py')
-from django.db.models.deletion import CASCADE

('django/contrib/admin', 'widgets.py')
+from django.core.validators import URLValidator

('django/contrib/admin', 'widgets.py')
+from django.db.models import CASCADE

('django/contrib/admin', 'widgets.py')
-from django.utils.safestring import mark_safe

('django/contrib/admin', 'widgets.py')
+from django.utils.http import urlencode

('django/contrib/admin', 'forms.py')
-from django import forms

('django/contrib/admin', 'forms.py')
+from django.core.exceptions import ValidationError

('django/contrib/admin', 'utils.py')
-import re

('django/contrib/admin', 'utils.py')
+import json

('django/contrib/admin', 'utils.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/contrib/admin', 'sites.py')
+import re

('django/contrib/admin', 'sites.py')
+from django.conf import settings

('django/contrib/admin', 'sites.py')
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView

('django/contrib/admin', 'sites.py')
-from django.http import Http404, HttpResponseRedirect

('django/contrib/admin', 'sites.py')
+from django.http import (

('django/contrib/admin', 'sites.py')
-from django.urls import NoReverseMatch, reverse

('django/contrib/admin', 'sites.py')
+from django.urls import NoReverseMatch, Resolver404, resolve, reverse

('django/contrib/admin', 'sites.py')
+from django.views.decorators.common import no_append_slash

('django/contrib/admin', 'sites.py')
-        from django.urls import include, path, re_path

('django/contrib/admin', 'sites.py')
+        from django.urls import include, path, re_path

('django/contrib/admin', 'sites.py')
-        from django.contrib.auth.views import LoginView

('django/contrib/admin', 'sites.py')
+        from django.contrib.auth.views import LoginView

('django/contrib/admin', 'tests.py')
+from contextlib import contextmanager

('django/contrib/admin', 'tests.py')
-        from selenium.common.exceptions import TimeoutException

('django/contrib/admin', 'tests.py')
+        from selenium.webdriver.support import expected_conditions as ec

('django/contrib/admin', 'tests.py')
-        from selenium.common.exceptions import NoSuchElementException

('django/contrib/admin', 'tests.py')
+        from selenium.webdriver.support.ui import Select

('django/contrib/admin', 'tests.py')
+        from selenium.webdriver.support.ui import Select

('django/contrib/admin', 'helpers.py')
-from django.conf import settings

('django/contrib/admin', 'helpers.py')
-from django.db.models.fields.related import ManyToManyRel

('django/contrib/admin', 'helpers.py')
+from django.db.models.fields.related import (

('django/contrib/admin', 'helpers.py')
+from django.urls import NoReverseMatch, reverse

('django/contrib/admin', 'decorators.py')
-    from django.contrib.admin.sites import site as default_site, AdminSite

('django/contrib/admin', 'decorators.py')
+    from django.contrib.admin.sites import AdminSite, site as default_site

('django/contrib/admin/templatetags', 'admin_list.py')
-from django.utils import formats

('django/contrib/admin/templatetags', 'admin_list.py')
+from django.utils import formats, timezone

('django/contrib/admin/views', 'autocomplete.py')
+from django.apps import apps

('django/contrib/admin/views', 'autocomplete.py')
+from django.core.exceptions import FieldDoesNotExist, PermissionDenied

('django/contrib/admin/views', 'main.py')
-from collections import OrderedDict

('django/contrib/admin/views', 'main.py')
+from django import forms

('django/contrib/admin/views', 'main.py')
+from django.contrib import messages

('django/contrib/admin/views', 'main.py')
-from django.db import models

('django/contrib/admin/views', 'main.py')
-from django.db.models.expressions import Combinable, F, OrderBy

('django/contrib/admin/views', 'main.py')
+from django.db.models import Exists, F, Field, ManyToOneRel, OrderBy, OuterRef

('django/contrib/admin/views', 'main.py')
+from django.db.models.expressions import Combinable

('django/contrib/staticfiles', 'finders.py')
-from collections import OrderedDict

('django/contrib/staticfiles', 'handlers.py')
+from asgiref.sync import sync_to_async

('django/contrib/staticfiles', 'handlers.py')
+from django.core.handlers.asgi import ASGIHandler

('django/contrib/staticfiles', 'handlers.py')
+from django.http import Http404

('django/contrib/staticfiles', 'handlers.py')
-        from django.http import Http404

('django/contrib/staticfiles', 'storage.py')
-import warnings

('django/contrib/staticfiles', 'storage.py')
-from collections import OrderedDict

('django/contrib/staticfiles', 'storage.py')
-from django.core.cache import (

('django/contrib/staticfiles', 'storage.py')
-from django.utils.deprecation import RemovedInDjango31Warning

('django/contrib/staticfiles/management/commands', 'collectstatic.py')
-from collections import OrderedDict

('django/contrib/staticfiles/management/commands', 'collectstatic.py')
+from django.core.checks import Tags

('django/contrib/flatpages', 'models.py')
-from django.urls import get_script_prefix

('django/contrib/flatpages', 'models.py')
+from django.urls import NoReverseMatch, get_script_prefix, reverse

('django/contrib/flatpages', 'models.py')
+        from .views import flatpage

('django/contrib/flatpages', 'forms.py')
+from django.core.exceptions import ValidationError

('django/contrib/sites', 'apps.py')
+from django.contrib.sites.checks import check_site_id

('django/contrib/sites', 'apps.py')
+from django.core import checks

('django/contrib/postgres', 'lookups.py')
-from django.db.models import Lookup, Transform

('django/contrib/postgres', 'lookups.py')
-from django.db.models.lookups import Exact

('django/contrib/postgres', 'lookups.py')
+from django.db.models import Transform

('django/contrib/postgres', 'lookups.py')
+from django.db.models.lookups import PostgresOperatorLookup

('django/contrib/postgres', 'apps.py')
-from django.db.models import CharField, TextField

('django/contrib/postgres', 'apps.py')
+from django.db.models import CharField, OrderBy, TextField

('django/contrib/postgres', 'apps.py')
+from django.db.models.functions import Collate

('django/contrib/postgres', 'apps.py')
+from django.db.models.indexes import IndexExpression

('django/contrib/postgres', 'apps.py')
+from .indexes import OpClass

('django/contrib/postgres', 'operations.py')
+from django.db import NotSupportedError, router

('django/contrib/postgres', 'operations.py')
+from django.db.migrations import AddIndex, RemoveIndex

('django/contrib/postgres', 'indexes.py')
-from django.db.models import Index

('django/contrib/postgres', 'indexes.py')
-from django.db.utils import NotSupportedError

('django/contrib/postgres', 'indexes.py')
+from django.db import NotSupportedError

('django/contrib/postgres', 'indexes.py')
+from django.db.models import Func, Index

('django/contrib/postgres', 'search.py')
-from django.db.models import Field, FloatField

('django/contrib/postgres', 'search.py')
-from django.db.models.expressions import CombinedExpression, Func, Value

('django/contrib/postgres', 'search.py')
-from django.db.models.lookups import Lookup

('django/contrib/postgres', 'search.py')
+import psycopg2

('django/contrib/postgres', 'search.py')
+from django.db.models import (

('django/contrib/postgres', 'search.py')
+from django.db.models.expressions import CombinedExpression

('django/contrib/postgres', 'search.py')
+from django.db.models.functions import Cast, Coalesce

('django/contrib/postgres/forms', 'ranges.py')
-import warnings

('django/contrib/postgres/forms', 'ranges.py')
-from django.forms.widgets import MultiWidget

('django/contrib/postgres/forms', 'ranges.py')
-from django.utils.deprecation import RemovedInDjango31Warning

('django/contrib/postgres/forms', 'ranges.py')
+from django.forms.widgets import HiddenInput, MultiWidget

('django/contrib/postgres/forms', 'jsonb.py')
-import json

('django/contrib/postgres/forms', 'jsonb.py')
+import warnings

('django/contrib/postgres/forms', 'jsonb.py')
-from django import forms

('django/contrib/postgres/forms', 'jsonb.py')
-from django.utils.translation import gettext_lazy as _

('django/contrib/postgres/forms', 'jsonb.py')
+from django.forms import JSONField as BuiltinJSONField

('django/contrib/postgres/forms', 'jsonb.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/contrib/postgres/aggregates', 'mixins.py')
-from django.db.models.expressions import F, OrderBy

('django/contrib/postgres/aggregates', 'mixins.py')
+from django.db.models import F, OrderBy

('django/contrib/postgres/aggregates', 'statistics.py')
-from django.db.models import FloatField, IntegerField

('django/contrib/postgres/aggregates', 'statistics.py')
-from django.db.models.aggregates import Aggregate

('django/contrib/postgres/aggregates', 'statistics.py')
+from django.db.models import Aggregate, FloatField, IntegerField

('django/contrib/postgres/aggregates', 'general.py')
-from django.contrib.postgres.fields import ArrayField, JSONField

('django/contrib/postgres/aggregates', 'general.py')
-from django.db.models.aggregates import Aggregate

('django/contrib/postgres/aggregates', 'general.py')
+from django.contrib.postgres.fields import ArrayField

('django/contrib/postgres/aggregates', 'general.py')
+from django.db.models import Aggregate, BooleanField, JSONField, Value

('django/contrib/postgres/fields', 'ranges.py')
+from django.db.models.lookups import PostgresOperatorLookup

('django/contrib/postgres/fields', 'jsonb.py')
-import json

('django/contrib/postgres/fields', 'jsonb.py')
+import warnings

('django/contrib/postgres/fields', 'jsonb.py')
-from psycopg2.extras import Json

('django/contrib/postgres/fields', 'jsonb.py')
-from django.contrib.postgres import forms, lookups

('django/contrib/postgres/fields', 'jsonb.py')
-from django.core import exceptions

('django/contrib/postgres/fields', 'jsonb.py')
-from django.db.models import (

('django/contrib/postgres/fields', 'jsonb.py')
+from django.db.models import JSONField as BuiltinJSONField

('django/contrib/postgres/fields', 'jsonb.py')
+from django.db.models.fields.json import (

('django/contrib/postgres/fields', 'jsonb.py')
-from django.utils.translation import gettext_lazy as _

('django/contrib/postgres/fields', 'jsonb.py')
-from .mixins import CheckFieldDefaultMixin

('django/contrib/postgres/fields', 'jsonb.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/contrib/postgres/fields', 'array.py')
-from django.db.models import Field, IntegerField, Transform

('django/contrib/postgres/fields', 'array.py')
+from django.db.models import Field, Func, IntegerField, Transform, Value

('django/contrib/postgres/fields', 'array.py')
+from django.db.models.fields.mixins import CheckFieldDefaultMixin

('django/contrib/postgres/fields', 'array.py')
-from django.utils.inspect import func_supports_parameter

('django/contrib/postgres/fields', 'array.py')
-from .mixins import CheckFieldDefaultMixin

('django/contrib/postgres/fields', 'hstore.py')
+from django.db.models.fields.mixins import CheckFieldDefaultMixin

('django/contrib/postgres/fields', 'hstore.py')
-from .mixins import CheckFieldDefaultMixin

('django/contrib/sessions', 'exceptions.py')
-from django.core.exceptions import SuspiciousOperation

('django/contrib/sessions', 'exceptions.py')
+from django.core.exceptions import BadRequest, SuspiciousOperation

('django/contrib/sessions', 'middleware.py')
-from django.core.exceptions import SuspiciousOperation

('django/contrib/sessions', 'middleware.py')
+from django.contrib.sessions.exceptions import SessionInterrupted

('django/contrib/sessions/backends', 'signed_cookies.py')
-from django.conf import settings

('django/contrib/sessions/backends', 'base.py')
+import warnings

('django/contrib/sessions/backends', 'base.py')
+from django.core import signing

('django/contrib/sessions/backends', 'base.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/contrib/sessions/backends', 'base.py')
+from django.utils.translation import LANGUAGE_SESSION_KEY

('django/contrib/sessions/management/commands', 'clearsessions.py')
-from django.core.management.base import BaseCommand

('django/contrib/sessions/management/commands', 'clearsessions.py')
+from django.core.management.base import BaseCommand, CommandError

('django/contrib/humanize/templatetags', 'humanize.py')
-from django.conf import settings

('django/contrib/contenttypes', 'fields.py')
+import functools

('django/contrib/contenttypes', 'fields.py')
+import itertools

('django/contrib/contenttypes', 'fields.py')
+import operator

('django/contrib/contenttypes', 'fields.py')
-from django.db.models import DO_NOTHING

('django/contrib/contenttypes', 'fields.py')
+from django.db.models import DO_NOTHING, ForeignObject, ForeignObjectRel

('django/contrib/contenttypes/management', '__init__.py')
-from django.db import DEFAULT_DB_ALIAS, migrations, router, transaction

('django/contrib/contenttypes/management', '__init__.py')
-from django.db.utils import IntegrityError

('django/contrib/contenttypes/management', '__init__.py')
+from django.db import (

('django/contrib/contenttypes/management/commands', 'remove_stale_contenttypes.py')
+import itertools

('django/contrib/contenttypes/management/commands', 'remove_stale_contenttypes.py')
-from ...management import get_contenttypes_and_models

('django/contrib/gis', 'geometry.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/contrib/gis/geos', 'coordseq.py')
-from ctypes import byref, c_double, c_uint

('django/contrib/gis/geos', 'coordseq.py')
+from ctypes import byref, c_byte, c_double, c_uint

('django/contrib/gis/geos', 'coordseq.py')
-from django.contrib.gis.geos.libgeos import CS_PTR

('django/contrib/gis/geos', 'coordseq.py')
+from django.contrib.gis.geos.libgeos import CS_PTR, geos_version_tuple

('django/contrib/gis/geos', 'collections.py')
-from django.contrib.gis.geos.error import GEOSException

('django/contrib/gis/geos', 'collections.py')
-from django.contrib.gis.geos.libgeos import GEOM_PTR, geos_version_tuple

('django/contrib/gis/geos', 'collections.py')
+from django.contrib.gis.geos.libgeos import GEOM_PTR

('django/contrib/gis/geos', 'geometry.py')
-from django.utils.encoding import force_bytes, force_text

('django/contrib/gis/geos', 'geometry.py')
+from django.utils.encoding import force_bytes, force_str

('django/contrib/gis/geos', 'geometry.py')
-                    from .linestring import LineString, LinearRing

('django/contrib/gis/geos', 'geometry.py')
+                    from .collections import (

('django/contrib/gis/geos', 'geometry.py')
+                    from .linestring import LinearRing, LineString

('django/contrib/gis/geos', 'geometry.py')
-                    from .collections import (

('django/contrib/gis/geos/prototypes', 'geom.py')
-from ctypes import POINTER, c_char_p, c_int, c_size_t, c_ubyte

('django/contrib/gis/geos/prototypes', 'geom.py')
+from ctypes import POINTER, c_char_p, c_int, c_ubyte

('django/contrib/gis/geos/prototypes', 'coordseq.py')
-from ctypes import POINTER, c_double, c_int, c_uint

('django/contrib/gis/geos/prototypes', 'coordseq.py')
+from ctypes import POINTER, c_byte, c_double, c_int, c_uint

('django/contrib/gis/forms', 'fields.py')
+from django.core.exceptions import ValidationError

('django/contrib/gis/gdal', 'field.py')
-from django.utils.encoding import force_text

('django/contrib/gis/gdal', 'field.py')
+from django.utils.encoding import force_str

('django/contrib/gis/gdal', 'srs.py')
+from enum import IntEnum

('django/contrib/gis/gdal', 'srs.py')
+from django.contrib.gis.gdal.libgdal import GDAL_VERSION

('django/contrib/gis/gdal', 'srs.py')
-from django.utils.encoding import force_bytes, force_text

('django/contrib/gis/gdal', 'srs.py')
+from django.utils.encoding import force_bytes, force_str

('django/contrib/gis/gdal', '__init__.py')
-from django.contrib.gis.gdal.srs import CoordTransform, SpatialReference

('django/contrib/gis/gdal', '__init__.py')
+from django.contrib.gis.gdal.srs import (

('django/contrib/gis/gdal', 'feature.py')
-from django.utils.encoding import force_bytes, force_text

('django/contrib/gis/gdal', 'feature.py')
+from django.utils.encoding import force_bytes, force_str

('django/contrib/gis/gdal', 'datasource.py')
+from pathlib import Path

('django/contrib/gis/gdal', 'datasource.py')
-from django.utils.encoding import force_bytes, force_text

('django/contrib/gis/gdal', 'datasource.py')
+from django.utils.encoding import force_bytes, force_str

('django/contrib/gis/gdal', 'layer.py')
-from django.utils.encoding import force_bytes, force_text

('django/contrib/gis/gdal', 'layer.py')
+from django.utils.encoding import force_bytes, force_str

('django/contrib/gis/gdal', 'driver.py')
-from django.utils.encoding import force_bytes, force_text

('django/contrib/gis/gdal', 'driver.py')
+from django.utils.encoding import force_bytes, force_str

('django/contrib/gis/gdal', 'geometries.py')
-from django.contrib.gis.gdal.libgdal import GDAL_VERSION

('django/contrib/gis/gdal', 'geometries.py')
-                    capi.import_wkt(g, byref(c_char_p(wkt_m.group('wkt').encode())))

('django/contrib/gis/gdal', 'geometries.py')
+                    capi.import_wkt(g, byref(c_char_p(wkt_m['wkt'].encode())))

('django/contrib/gis/gdal/prototypes', 'srs.py')
-from django.contrib.gis.gdal.libgdal import lgdal, std_call

('django/contrib/gis/gdal/prototypes', 'srs.py')
+from django.contrib.gis.gdal.libgdal import GDAL_VERSION, lgdal, std_call

('django/contrib/gis/gdal/prototypes', 'generation.py')
-from ctypes import POINTER, c_char_p, c_double, c_int, c_int64, c_void_p

('django/contrib/gis/gdal/prototypes', 'generation.py')
+from ctypes import (

('django/contrib/gis/gdal/raster', 'band.py')
-from django.utils.encoding import force_text

('django/contrib/gis/gdal/raster', 'band.py')
+from django.utils.encoding import force_str

('django/contrib/gis/gdal/raster', 'source.py')
-from django.utils.encoding import force_bytes, force_text

('django/contrib/gis/gdal/raster', 'source.py')
+from django.utils.encoding import force_bytes, force_str

('django/contrib/gis/utils', '__init__.py')
-    from django.contrib.gis.utils.layermapping import LayerMapping, LayerMapError  # NOQA

('django/contrib/gis/utils', '__init__.py')
+    from django.contrib.gis.utils.layermapping import (  # NOQA

('django/contrib/gis/utils', 'layermapping.py')
+from pathlib import Path

('django/contrib/gis/utils', 'layermapping.py')
-from django.utils.encoding import force_text

('django/contrib/gis/utils', 'layermapping.py')
+from django.utils.encoding import force_str

('django/contrib/gis/sitemaps', 'kml.py')
-from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/sitemaps', 'kml.py')
+from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/sitemaps', 'views.py')
-from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/sitemaps', 'views.py')
+from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/oracle', 'operations.py')
+from django.contrib.gis.db import models

('django/contrib/gis/db/backends/oracle', 'operations.py')
-from django.contrib.gis.db.models import aggregates

('django/contrib/gis/db/backends/oracle', 'operations.py')
-        from django.contrib.gis.db.backends.oracle.models import OracleGeometryColumns

('django/contrib/gis/db/backends/oracle', 'operations.py')
+        from django.contrib.gis.db.backends.oracle.models import (

('django/contrib/gis/db/backends/oracle', 'operations.py')
-        from django.contrib.gis.db.backends.oracle.models import OracleSpatialRefSys

('django/contrib/gis/db/backends/oracle', 'operations.py')
+        from django.contrib.gis.db.backends.oracle.models import (

('django/contrib/gis/db/backends/oracle', 'introspection.py')
+from django.utils.functional import cached_property

('django/contrib/gis/db/backends/oracle', 'schema.py')
-from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/db/backends/oracle', 'schema.py')
+from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/postgis', 'pgraster.py')
-from django.forms import ValidationError

('django/contrib/gis/db/backends/postgis', 'pgraster.py')
+from django.core.exceptions import ValidationError

('django/contrib/gis/db/backends/postgis', 'operations.py')
+from django.db import NotSupportedError, ProgrammingError

('django/contrib/gis/db/backends/postgis', 'operations.py')
-from django.db.utils import NotSupportedError, ProgrammingError

('django/contrib/gis/db/backends/postgis', 'schema.py')
+from django.db.backends.ddl_references import Statement

('django/contrib/gis/db/backends/mysql', 'operations.py')
+from django.contrib.gis.db import models

('django/contrib/gis/db/backends/mysql', 'operations.py')
-from django.contrib.gis.db.models import aggregates

('django/contrib/gis/db/backends/mysql', 'schema.py')
-from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/db/backends/mysql', 'schema.py')
+from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/mysql', 'schema.py')
+from django.db import OperationalError

('django/contrib/gis/db/backends/mysql', 'schema.py')
-from django.db.utils import OperationalError

('django/contrib/gis/db/backends/spatialite', 'operations.py')
+from django.contrib.gis.db import models

('django/contrib/gis/db/backends/spatialite', 'operations.py')
-from django.contrib.gis.db.models import aggregates

('django/contrib/gis/db/backends/spatialite', 'operations.py')
-from django.contrib.gis.geos.prototypes.io import wkb_r, wkt_r

('django/contrib/gis/db/backends/spatialite', 'operations.py')
+from django.contrib.gis.geos.prototypes.io import wkb_r

('django/contrib/gis/db/backends/spatialite', 'operations.py')
-        from django.contrib.gis.db.backends.spatialite.models import SpatialiteGeometryColumns

('django/contrib/gis/db/backends/spatialite', 'operations.py')
+        from django.contrib.gis.db.backends.spatialite.models import (

('django/contrib/gis/db/backends/spatialite', 'operations.py')
-        from django.contrib.gis.db.backends.spatialite.models import SpatialiteSpatialRefSys

('django/contrib/gis/db/backends/spatialite', 'operations.py')
+        from django.contrib.gis.db.backends.spatialite.models import (

('django/contrib/gis/db/backends/spatialite', 'schema.py')
+from django.db import DatabaseError

('django/contrib/gis/db/backends/spatialite', 'schema.py')
-from django.db.utils import DatabaseError

('django/contrib/gis/db/backends/spatialite', 'schema.py')
-        from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
+        from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
-        from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
+        from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
-        from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
+        from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
-        from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
+        from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
-        from django.contrib.gis.db.models.fields import GeometryField

('django/contrib/gis/db/backends/spatialite', 'schema.py')
+        from django.contrib.gis.db.models import GeometryField

('django/contrib/gis/db/backends/base', 'features.py')
-from django.contrib.gis.db.models import aggregates

('django/contrib/gis/db/backends/base', 'features.py')
+from django.contrib.gis.db import models

('django/contrib/gis/db/backends/base', 'operations.py')
-from django.db.utils import NotSupportedError

('django/contrib/gis/db/backends/base', 'operations.py')
+from django.db import NotSupportedError

('django/contrib/gis/db/models', 'functions.py')
-import warnings

('django/contrib/gis/db/models', 'functions.py')
+from django.db import NotSupportedError

('django/contrib/gis/db/models', 'functions.py')
-from django.db.models.expressions import Func, Value

('django/contrib/gis/db/models', 'functions.py')
-from django.db.utils import NotSupportedError

('django/contrib/gis/db/models', 'functions.py')
-from django.utils.deprecation import RemovedInDjango30Warning

('django/contrib/gis/db/models', 'fields.py')
-from django.db.models.fields import Field

('django/contrib/gis/db/models', 'fields.py')
+from django.db.models import Field

('django/contrib/gis/db/models', 'lookups.py')
-import re

('django/contrib/gis/db/models', 'lookups.py')
-from django.db.models.expressions import Expression

('django/contrib/gis/db/models', 'lookups.py')
-from django.db.models.lookups import Lookup, Transform

('django/contrib/gis/db/models', 'lookups.py')
+from django.contrib.gis.measure import Distance

('django/contrib/gis/db/models', 'lookups.py')
+from django.db import NotSupportedError

('django/contrib/gis/db/models', 'lookups.py')
+from django.db.models import Expression, Lookup, Transform

('django/contrib/gis/db/models', 'lookups.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/contrib/gis/db/models', 'aggregates.py')
-from django.db.models.aggregates import Aggregate

('django/contrib/gis/db/models', 'aggregates.py')
+from django.db.models import Aggregate, Value

('django/contrib/gis/geoip2', 'base.py')
-from pathlib import Path

('django/contrib/gis/geoip2', 'base.py')
+from django.utils._os import to_path

('django/http', 'multipartparser.py')
+import collections

('django/http', 'multipartparser.py')
+import html

('django/http', 'multipartparser.py')
-from django.utils.encoding import force_text

('django/http', 'multipartparser.py')
-from django.utils.text import unescape_entities

('django/http', 'multipartparser.py')
+from django.utils.encoding import force_str

('django/http', 'request.py')
+import cgi

('django/http', 'request.py')
+import codecs

('django/http', 'request.py')
-import re

('django/http', 'request.py')
-from urllib.parse import quote, urlencode, urljoin, urlsplit

('django/http', 'request.py')
+from urllib.parse import parse_qsl, quote, urlencode, urljoin, urlsplit

('django/http', 'request.py')
-from django.utils.deprecation import RemovedInDjango30Warning

('django/http', 'request.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/http', 'request.py')
-from django.utils.http import is_same_domain, limited_parse_qsl

('django/http', 'request.py')
+from django.utils.http import is_same_domain

('django/http', 'request.py')
+from django.utils.inspect import func_supports_parameter

('django/http', 'request.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/http', 'request.py')
+from .multipartparser import parse_header

('django/http', 'request.py')
+    from django.utils.http import parse_qsl

('django/http', 'response.py')
+from collections.abc import Mapping

('django/http', 'response.py')
+from django.utils.datastructures import (

('django/http', 'response.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/urls', 'resolvers.py')
-import threading

('django/urls', 'resolvers.py')
+import string

('django/urls', 'resolvers.py')
+from asgiref.local import Local

('django/urls', 'resolvers.py')
-from django.core.exceptions import ImproperlyConfigured

('django/urls', 'resolvers.py')
+from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist

('django/urls', 'resolvers.py')
-from django.utils.regex_helper import normalize

('django/urls', 'resolvers.py')
+from django.utils.regex_helper import _lazy_re_compile, normalize

('django/urls', 'resolvers.py')
+                    "The custom handler{status_code} view '{path}' could not be imported."

('django/urls', 'base.py')
-from threading import local

('django/urls', 'base.py')
-from urllib.parse import urlsplit, urlunsplit

('django/urls', 'base.py')
+from urllib.parse import unquote, urlsplit, urlunsplit

('django/urls', 'base.py')
-from django.utils.encoding import iri_to_uri

('django/urls', 'base.py')
+from asgiref.local import Local

('django/urls', 'base.py')
-from .resolvers import get_ns_resolver, get_resolver

('django/urls', 'base.py')
+from .resolvers import _get_cached_resolver, get_ns_resolver, get_resolver

('django/db', '__init__.py')
+from django.utils.connection import ConnectionProxy

('django/db', 'utils.py')
-from pathlib import Path

('django/db', 'utils.py')
-from threading import local

('django/db', 'utils.py')
+from django.utils.connection import ConnectionDoesNotExist  # NOQA: F401

('django/db', 'utils.py')
+from django.utils.connection import BaseConnectionHandler

('django/db', 'utils.py')
+        import django.db.backends

('django/db', 'utils.py')
+                "imported. Check the above exception. To use one of the "

('django/db/migrations', 'questioner.py')
-from django.db.models.fields import NOT_PROVIDED

('django/db/migrations', 'questioner.py')
+from django.db.models import NOT_PROVIDED

('django/db/migrations', 'recorder.py')
-from django.db import models

('django/db/migrations', 'recorder.py')
-from django.db.utils import DatabaseError

('django/db/migrations', 'recorder.py')
-from django.utils.decorators import classproperty

('django/db/migrations', 'recorder.py')
+from django.db import DatabaseError, models

('django/db/migrations', 'recorder.py')
+from django.utils.functional import classproperty

('django/db/migrations', 'autodetector.py')
-from django.db.migrations.utils import (

('django/db/migrations', 'autodetector.py')
+from django.db.migrations.utils import COMPILED_REGEX_TYPE, RegexObject

('django/db/migrations', 'loader.py')
-                # I hate doing this, but I don't want to squash other import errors.

('django/db/migrations', 'loader.py')
+                # https://docs.python.org/3/reference/import.html#namespace-packages

('django/db/migrations', 'serializer.py')
+import os

('django/db/migrations', 'serializer.py')
+import pathlib

('django/db/migrations', 'serializer.py')
-from collections import OrderedDict

('django/db/migrations', 'serializer.py')
-        v_string, v_imports = serializer_factory(self.value.value).serialize()

('django/db/migrations', 'serializer.py')
-        imports = {'import %s' % module, *v_imports}

('django/db/migrations', 'serializer.py')
-        return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports

('django/db/migrations', 'serializer.py')
+            {'import %s' % module},

('django/db/migrations', 'serializer.py')
+        return 'pathlib.%s%r' % (prefix, self.value), {'import pathlib'}

('django/db/migrations', 'serializer.py')
-                return "%s.%s" % (module, self.value.__name__), {"import %s" % module}

('django/db/migrations', 'serializer.py')
+                return "%s.%s" % (module, self.value.__qualname__), {"import %s" % module}

('django/db/migrations', 'exceptions.py')
-from django.db.utils import DatabaseError

('django/db/migrations', 'exceptions.py')
+from django.db import DatabaseError

('django/db/migrations', 'migration.py')
+from django.db.migrations import operations

('django/db/migrations', 'migration.py')
+from django.db.migrations.utils import get_migration_name_timestamp

('django/db/migrations', 'state.py')
-from collections import OrderedDict

('django/db/migrations', 'state.py')
-from django.db.models.fields.proxy import OrderWrt

('django/db/migrations/operations', 'models.py')
-from .utils import ModelTuple, field_references_model

('django/db/migrations/operations', 'models.py')
+from .utils import field_references, get_references, resolve_relation

('django/db/migrations/operations', 'fields.py')
-from django.db.models.fields import NOT_PROVIDED

('django/db/migrations/operations', 'fields.py')
+from django.db.models import NOT_PROVIDED

('django/db/migrations/operations', 'fields.py')
-from .utils import (

('django/db/migrations/operations', 'fields.py')
+from .utils import field_is_referenced, field_references, get_references

('django/db/migrations/operations', 'base.py')
-from django.db.models.fields.related import RECURSIVE_RELATIONSHIP_CONSTANT

('django/db/backends', 'ddl_references.py')
+from copy import deepcopy

('django/db/backends', 'utils.py')
-from time import time

('django/db/backends', 'utils.py')
-from django.conf import settings

('django/db/backends', 'utils.py')
-from django.db.utils import NotSupportedError

('django/db/backends', 'utils.py')
-from django.utils.timezone import utc

('django/db/backends', 'utils.py')
+import time

('django/db/backends', 'utils.py')
+from contextlib import contextmanager

('django/db/backends', 'utils.py')
+from django.db import NotSupportedError

('django/db/backends/postgresql', 'client.py')
-import os

('django/db/backends/postgresql', 'client.py')
-import subprocess

('django/db/backends/postgresql', 'client.py')
-from django.core.files.temp import NamedTemporaryFile

('django/db/backends/postgresql', 'features.py')
+from django.db import InterfaceError

('django/db/backends/postgresql', 'features.py')
-from django.db.utils import InterfaceError

('django/db/backends/postgresql', 'operations.py')
-from django.db import NotSupportedError

('django/db/backends/postgresql', 'introspection.py')
-from django.db.models.indexes import Index

('django/db/backends/postgresql', 'introspection.py')
+from django.db.models import Index

('django/db/backends/postgresql', 'base.py')
+import asyncio

('django/db/backends/postgresql', 'base.py')
+from contextlib import contextmanager

('django/db/backends/postgresql', 'base.py')
-from django.db import connections

('django/db/backends/postgresql', 'base.py')
+from django.db import DatabaseError as WrappedDatabaseError, connections

('django/db/backends/postgresql', 'base.py')
-from django.db.utils import DatabaseError as WrappedDatabaseError

('django/db/backends/postgresql', 'base.py')
+from django.db.backends.utils import (

('django/db/backends/postgresql', 'base.py')
+from django.utils.asyncio import async_unsafe

('django/db/backends/postgresql', 'base.py')
-from django.utils.safestring import SafeText

('django/db/backends/postgresql', 'base.py')
+from django.utils.safestring import SafeString

('django/db/backends/postgresql', 'base.py')
-from .client import DatabaseClient                          # NOQA isort:skip

('django/db/backends/postgresql', 'base.py')
-from .creation import DatabaseCreation                      # NOQA isort:skip

('django/db/backends/postgresql', 'base.py')
-from .features import DatabaseFeatures                      # NOQA isort:skip

('django/db/backends/postgresql', 'base.py')
-from .introspection import DatabaseIntrospection            # NOQA isort:skip

('django/db/backends/postgresql', 'base.py')
-from .operations import DatabaseOperations                  # NOQA isort:skip

('django/db/backends/postgresql', 'base.py')
-from .schema import DatabaseSchemaEditor                    # NOQA isort:skip

('django/db/backends/postgresql', 'base.py')
-from .utils import utc_tzinfo_factory                       # NOQA isort:skip

('django/db/backends/postgresql', 'base.py')
+from .client import DatabaseClient  # NOQA

('django/db/backends/postgresql', 'base.py')
+from .creation import DatabaseCreation  # NOQA

('django/db/backends/postgresql', 'base.py')
+from .features import DatabaseFeatures  # NOQA

('django/db/backends/postgresql', 'base.py')
+from .introspection import DatabaseIntrospection  # NOQA

('django/db/backends/postgresql', 'base.py')
+from .operations import DatabaseOperations  # NOQA

('django/db/backends/postgresql', 'base.py')
+from .schema import DatabaseSchemaEditor  # NOQA

('django/db/backends/postgresql', 'schema.py')
+from django.db.backends.utils import strip_quotes

('django/db/backends/oracle', 'creation.py')
+from django.db import DatabaseError

('django/db/backends/oracle', 'creation.py')
-from django.db.utils import DatabaseError

('django/db/backends/oracle', 'client.py')
-import subprocess

('django/db/backends/oracle', 'client.py')
+        from django.db.backends.oracle.utils import dsn

('django/db/backends/oracle', 'features.py')
+from django.db import DatabaseError, InterfaceError

('django/db/backends/oracle', 'features.py')
-from django.db.utils import InterfaceError

('django/db/backends/oracle', 'operations.py')
-import re

('django/db/backends/oracle', 'operations.py')
+from django.db import DatabaseError, NotSupportedError

('django/db/backends/oracle', 'operations.py')
-from django.db.utils import DatabaseError

('django/db/backends/oracle', 'operations.py')
+from django.db.models import AutoField, Exists, ExpressionWrapper

('django/db/backends/oracle', 'operations.py')
+from django.db.models.expressions import RawSQL

('django/db/backends/oracle', 'operations.py')
+from django.db.models.sql.where import WhereNode

('django/db/backends/oracle', 'operations.py')
-from django.utils.encoding import force_bytes

('django/db/backends/oracle', 'operations.py')
+from django.utils.encoding import force_bytes, force_str

('django/db/backends/oracle', 'operations.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/backends/oracle', 'operations.py')
-from .utils import BulkInsertMapper, InsertIdVar, Oracle_datetime

('django/db/backends/oracle', 'operations.py')
+from .utils import BulkInsertMapper, InsertVar, Oracle_datetime

('django/db/backends/oracle', 'operations.py')
-        from django.db import models

('django/db/backends/oracle', 'introspection.py')
+from django.utils.functional import cached_property

('django/db/backends/oracle', 'base.py')
-from django.db import utils

('django/db/backends/oracle', 'base.py')
+from django.db import IntegrityError

('django/db/backends/oracle', 'base.py')
-from django.utils.encoding import force_bytes, force_text

('django/db/backends/oracle', 'base.py')
+from django.utils.asyncio import async_unsafe

('django/db/backends/oracle', 'base.py')
+from django.utils.encoding import force_bytes, force_str

('django/db/backends/oracle', 'base.py')
-from .client import DatabaseClient                          # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
-from .creation import DatabaseCreation                      # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
-from .features import DatabaseFeatures                      # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
-from .introspection import DatabaseIntrospection            # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
-from .operations import DatabaseOperations                  # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
-from .schema import DatabaseSchemaEditor                    # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
-from .utils import Oracle_datetime                          # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
-from .validation import DatabaseValidation                  # NOQA isort:skip

('django/db/backends/oracle', 'base.py')
+from .client import DatabaseClient  # NOQA

('django/db/backends/oracle', 'base.py')
+from .creation import DatabaseCreation  # NOQA

('django/db/backends/oracle', 'base.py')
+from .features import DatabaseFeatures  # NOQA

('django/db/backends/oracle', 'base.py')
+from .introspection import DatabaseIntrospection  # NOQA

('django/db/backends/oracle', 'base.py')
+from .operations import DatabaseOperations  # NOQA

('django/db/backends/oracle', 'base.py')
+from .schema import DatabaseSchemaEditor  # NOQA

('django/db/backends/oracle', 'base.py')
+from .utils import Oracle_datetime, dsn  # NOQA

('django/db/backends/oracle', 'base.py')
+from .validation import DatabaseValidation  # NOQA

('django/db/backends/oracle', 'schema.py')
+from django.db import DatabaseError

('django/db/backends/oracle', 'schema.py')
-from django.db.utils import DatabaseError

('django/db/backends/sqlite3', 'creation.py')
+from pathlib import Path

('django/db/backends/sqlite3', 'client.py')
-import subprocess

('django/db/backends/sqlite3', 'features.py')
-import sys

('django/db/backends/sqlite3', 'features.py')
+import operator

('django/db/backends/sqlite3', 'features.py')
+import platform

('django/db/backends/sqlite3', 'features.py')
+from django.db import transaction

('django/db/backends/sqlite3', 'features.py')
+from django.db.utils import OperationalError

('django/db/backends/sqlite3', 'features.py')
+from django.utils.functional import cached_property

('django/db/backends/sqlite3', 'operations.py')
-from django.db import utils

('django/db/backends/sqlite3', 'operations.py')
+from django.db import DatabaseError, NotSupportedError, models

('django/db/backends/sqlite3', 'operations.py')
-from django.db.models import aggregates, fields

('django/db/backends/sqlite3', 'operations.py')
-from django.utils.duration import duration_microseconds

('django/db/backends/sqlite3', 'introspection.py')
-from django.db.models.indexes import Index

('django/db/backends/sqlite3', 'introspection.py')
+from django.db.models import Index

('django/db/backends/sqlite3', 'introspection.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/backends/sqlite3', 'base.py')
+import hashlib

('django/db/backends/sqlite3', 'base.py')
+import random

('django/db/backends/sqlite3', 'base.py')
-from django.db import utils

('django/db/backends/sqlite3', 'base.py')
+from django.db import IntegrityError

('django/db/backends/sqlite3', 'base.py')
+from django.utils.asyncio import async_unsafe

('django/db/backends/sqlite3', 'base.py')
-from .client import DatabaseClient                          # isort:skip

('django/db/backends/sqlite3', 'base.py')
-from .creation import DatabaseCreation                      # isort:skip

('django/db/backends/sqlite3', 'base.py')
-from .features import DatabaseFeatures                      # isort:skip

('django/db/backends/sqlite3', 'base.py')
-from .introspection import DatabaseIntrospection            # isort:skip

('django/db/backends/sqlite3', 'base.py')
-from .operations import DatabaseOperations                  # isort:skip

('django/db/backends/sqlite3', 'base.py')
-from .schema import DatabaseSchemaEditor                    # isort:skip

('django/db/backends/sqlite3', 'base.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/backends/sqlite3', 'base.py')
+from django.utils.version import PY38

('django/db/backends/sqlite3', 'base.py')
+from .client import DatabaseClient

('django/db/backends/sqlite3', 'base.py')
+from .creation import DatabaseCreation

('django/db/backends/sqlite3', 'base.py')
+from .features import DatabaseFeatures

('django/db/backends/sqlite3', 'base.py')
+from .introspection import DatabaseIntrospection

('django/db/backends/sqlite3', 'base.py')
+from .operations import DatabaseOperations

('django/db/backends/sqlite3', 'base.py')
+from .schema import DatabaseSchemaEditor

('django/db/backends/sqlite3', 'schema.py')
+from django.db import NotSupportedError

('django/db/backends/sqlite3', 'schema.py')
+from django.db.backends.utils import strip_quotes

('django/db/backends/sqlite3', 'schema.py')
-from django.db.utils import NotSupportedError

('django/db/backends/mysql', 'compiler.py')
+from django.core.exceptions import FieldError

('django/db/backends/mysql', 'compiler.py')
+from django.db.models.expressions import Col

('django/db/backends/mysql', 'creation.py')
+import os

('django/db/backends/mysql', 'client.py')
-import subprocess

('django/db/backends/mysql', 'operations.py')
-from django.utils.duration import duration_microseconds

('django/db/backends/mysql', 'operations.py')
+from django.utils.encoding import force_str

('django/db/backends/mysql', 'introspection.py')
+import sqlparse

('django/db/backends/mysql', 'introspection.py')
-from django.db.models.indexes import Index

('django/db/backends/mysql', 'introspection.py')
+from django.db.models import Index

('django/db/backends/mysql', 'base.py')
-import re

('django/db/backends/mysql', 'base.py')
-from django.db import utils

('django/db/backends/mysql', 'base.py')
+from django.db import IntegrityError

('django/db/backends/mysql', 'base.py')
+from django.utils.asyncio import async_unsafe

('django/db/backends/mysql', 'base.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/backends/mysql', 'base.py')
-from MySQLdb.constants import CLIENT, FIELD_TYPE                # isort:skip

('django/db/backends/mysql', 'base.py')
-from MySQLdb.converters import conversions                      # isort:skip

('django/db/backends/mysql', 'base.py')
+from MySQLdb.constants import CLIENT, FIELD_TYPE

('django/db/backends/mysql', 'base.py')
+from MySQLdb.converters import conversions

('django/db/backends/mysql', 'base.py')
-from .client import DatabaseClient                          # isort:skip

('django/db/backends/mysql', 'base.py')
-from .creation import DatabaseCreation                      # isort:skip

('django/db/backends/mysql', 'base.py')
-from .features import DatabaseFeatures                      # isort:skip

('django/db/backends/mysql', 'base.py')
-from .introspection import DatabaseIntrospection            # isort:skip

('django/db/backends/mysql', 'base.py')
-from .operations import DatabaseOperations                  # isort:skip

('django/db/backends/mysql', 'base.py')
-from .schema import DatabaseSchemaEditor                    # isort:skip

('django/db/backends/mysql', 'base.py')
-from .validation import DatabaseValidation                  # isort:skip

('django/db/backends/mysql', 'base.py')
+from .client import DatabaseClient

('django/db/backends/mysql', 'base.py')
+from .creation import DatabaseCreation

('django/db/backends/mysql', 'base.py')
+from .features import DatabaseFeatures

('django/db/backends/mysql', 'base.py')
+from .introspection import DatabaseIntrospection

('django/db/backends/mysql', 'base.py')
+from .operations import DatabaseOperations

('django/db/backends/mysql', 'base.py')
+from .schema import DatabaseSchemaEditor

('django/db/backends/mysql', 'base.py')
+from .validation import DatabaseValidation

('django/db/backends/base', 'creation.py')
+from unittest import expectedFailure, skip

('django/db/backends/base', 'creation.py')
+from django.db.transaction import atomic

('django/db/backends/base', 'creation.py')
+from django.utils.module_loading import import_string

('django/db/backends/base', 'creation.py')
-        from django.db.migrations.loader import MigrationLoader

('django/db/backends/base', 'creation.py')
+            from django.db.migrations.loader import MigrationLoader

('django/db/backends/base', 'creation.py')
+                test_case = import_string(test_case_name)

('django/db/backends/base', 'creation.py')
+                    test_case = import_string(test_case_name)

('django/db/backends/base', 'client.py')
+import os

('django/db/backends/base', 'client.py')
+import subprocess

('django/db/backends/base', 'features.py')
-from django.db.utils import ProgrammingError

('django/db/backends/base', 'features.py')
+from django.db import ProgrammingError

('django/db/backends/base', 'operations.py')
-from django.utils.encoding import force_text

('django/db/backends/base', 'operations.py')
+from django.utils.encoding import force_str

('django/db/backends/base', 'operations.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/backends/base', 'introspection.py')
+        from django.apps import apps

('django/db/backends/base', 'introspection.py')
+        from django.db import router

('django/db/backends/base', 'introspection.py')
-        from django.apps import apps

('django/db/backends/base', 'introspection.py')
-        from django.db import router

('django/db/backends/base', 'introspection.py')
-        from django.apps import apps

('django/db/backends/base', 'introspection.py')
-        from django.db import router

('django/db/backends/base', 'introspection.py')
-        from django.apps import apps

('django/db/backends/base', 'introspection.py')
-        from django.db import router

('django/db/backends/base', 'base.py')
+import _thread

('django/db/backends/base', 'base.py')
-import _thread

('django/db/backends/base', 'base.py')
-from django.db import DEFAULT_DB_ALIAS

('django/db/backends/base', 'base.py')
+from django.db import DEFAULT_DB_ALIAS, DatabaseError

('django/db/backends/base', 'base.py')
-from django.db.utils import DatabaseError, DatabaseErrorWrapper

('django/db/backends/base', 'base.py')
+from django.db.utils import DatabaseErrorWrapper

('django/db/backends/base', 'base.py')
+from django.utils.asyncio import async_unsafe

('django/db/backends/base', 'schema.py')
-from django.db.models import Index

('django/db/backends/base', 'schema.py')
+from django.db.models import Deferrable, Index

('django/db/backends/base', 'schema.py')
+from django.db.models.sql import Query

('django/db/models', 'options.py')
+import bisect

('django/db/models', 'options.py')
-from bisect import bisect

('django/db/models', 'options.py')
-from collections import OrderedDict, defaultdict

('django/db/models', 'options.py')
+from collections import defaultdict

('django/db/models', 'options.py')
-from django.db.models import Manager

('django/db/models', 'options.py')
-from django.db.models.fields import AutoField

('django/db/models', 'options.py')
-from django.db.models.fields.proxy import OrderWrt

('django/db/models', 'options.py')
+from django.db.models import AutoField, Manager, OrderWrt, UniqueConstraint

('django/db/models', 'options.py')
+from django.utils.module_loading import import_string

('django/db/models', 'options.py')
+            pk_class = import_string(pk_class_path)

('django/db/models', 'options.py')
+                f"not be imported."

('django/db/models', 'query.py')
-from collections import OrderedDict, namedtuple

('django/db/models', 'query.py')
-from functools import lru_cache

('django/db/models', 'query.py')
+import django

('django/db/models', 'query.py')
-from django.db.models import DateField, DateTimeField, sql

('django/db/models', 'query.py')
+from django.db.models import AutoField, DateField, DateTimeField, sql

('django/db/models', 'query.py')
-from django.db.models.expressions import Case, Expression, F, Value, When

('django/db/models', 'query.py')
-from django.db.models.fields import AutoField

('django/db/models', 'query.py')
+from django.db.models.expressions import Case, Expression, F, Ref, Value, When

('django/db/models', 'query.py')
-from django.db.models.query_utils import FilteredRelation, InvalidQuery, Q

('django/db/models', 'query.py')
+from django.db.models.query_utils import FilteredRelation, Q

('django/db/models', 'query.py')
-from django.db.utils import NotSupportedError

('django/db/models', 'query.py')
+from django.db.models.utils import create_namedtuple_class, resolve_callables

('django/db/models', 'query.py')
-from django.utils.deprecation import RemovedInDjango30Warning

('django/db/models', 'query.py')
-from django.utils.version import get_version

('django/db/models', 'expressions.py')
+import functools

('django/db/models', 'expressions.py')
+from uuid import UUID

('django/db/models', 'expressions.py')
-from django.db import connection

('django/db/models', 'expressions.py')
+from django.db import NotSupportedError, connection

('django/db/models', 'expressions.py')
+from django.db.models.constants import LOOKUP_SEP

('django/db/models', '__init__.py')
+from django.db.models.enums import *  # NOQA

('django/db/models', '__init__.py')
+from django.db.models.enums import __all__ as enums_all

('django/db/models', '__init__.py')
+from django.db.models.fields.json import JSONField

('django/db/models', '__init__.py')
-from django.db.models.query import (

('django/db/models', '__init__.py')
-from django.db.models.query_utils import FilteredRelation

('django/db/models', '__init__.py')
+from django.db.models.query import Prefetch, QuerySet, prefetch_related_objects

('django/db/models', '__init__.py')
+from django.db.models.query_utils import FilteredRelation, Q

('django/db/models', 'lookups.py')
+import warnings

('django/db/models', 'lookups.py')
-from django.db.models.expressions import Func, Value

('django/db/models', 'lookups.py')
-from django.db.models.fields import DateTimeField, Field, IntegerField

('django/db/models', 'lookups.py')
+from django.db.models.expressions import Case, Exists, Func, Value, When

('django/db/models', 'lookups.py')
+from django.db.models.fields import (

('django/db/models', 'lookups.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/db/models', 'lookups.py')
+from django.utils.hashable import make_hashable

('django/db/models', 'lookups.py')
-            from django.db.models.sql.query import Query  # avoid circular import

('django/db/models', 'lookups.py')
+            from django.db.models.sql.query import (  # avoid circular import

('django/db/models', 'lookups.py')
+            from django.db.models.functions import Replace

('django/db/models', 'indexes.py')
+from django.db.models.expressions import Col, ExpressionList, F, Func, OrderBy

('django/db/models', 'indexes.py')
+from django.db.models.functions import Collate

('django/db/models', 'indexes.py')
+from django.utils.functional import partition

('django/db/models', 'utils.py')
+import functools

('django/db/models', 'utils.py')
+from collections import namedtuple

('django/db/models', 'deletion.py')
-from collections import Counter, OrderedDict

('django/db/models', 'deletion.py')
+import operator

('django/db/models', 'deletion.py')
+from collections import Counter, defaultdict

('django/db/models', 'deletion.py')
+from functools import partial, reduce

('django/db/models', 'deletion.py')
+from itertools import chain

('django/db/models', 'deletion.py')
-from django.db.models import signals, sql

('django/db/models', 'deletion.py')
+from django.db.models import query_utils, signals, sql

('django/db/models', 'constraints.py')
+from enum import Enum

('django/db/models', 'query_utils.py')
+import warnings

('django/db/models', 'query_utils.py')
+from django.core.exceptions import FieldDoesNotExist, FieldError

('django/db/models', 'query_utils.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/db/models', 'base.py')
+import django

('django/db/models', 'base.py')
+from django.db.models import (

('django/db/models', 'base.py')
+from django.db.models.functions import Coalesce

('django/db/models', 'base.py')
-from django.db.models.query import Q

('django/db/models', 'base.py')
+from django.db.models.query import F, Q

('django/db/models', 'base.py')
+from django.utils.hashable import make_hashable

('django/db/models', 'base.py')
-from django.utils.version import get_version

('django/db/models/functions', 'mixins.py')
-            from django.db.backends.oracle.functions import IntervalToSeconds, SecondsToInterval

('django/db/models/functions', 'mixins.py')
+            from django.db.backends.oracle.functions import (

('django/db/models/functions', '__init__.py')
-from .comparison import Cast, Coalesce, Greatest, Least, NullIf

('django/db/models/functions', '__init__.py')
+from .comparison import (

('django/db/models/functions', 'comparison.py')
+from django.db import NotSupportedError

('django/db/models/functions', 'comparison.py')
+from django.db.models.fields.json import JSONField

('django/db/models/functions', 'comparison.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/models/functions', 'text.py')
+from django.db import NotSupportedError

('django/db/models/functions', 'text.py')
-from django.db.models.fields import IntegerField

('django/db/models/functions', 'text.py')
+from django.db.models.fields import CharField, IntegerField

('django/db/models/fields', 'related_descriptors.py')
+from django.db.models.query_utils import DeferredAttribute

('django/db/models/fields', 'related_descriptors.py')
+from django.db.models.utils import resolve_callables

('django/db/models/fields', 'related_descriptors.py')
+            from django.db.models import Model

('django/db/models/fields', 'related_descriptors.py')
-            from django.db.models import Model

('django/db/models/fields', 'files.py')
-from django.core.files.storage import default_storage

('django/db/models/fields', 'files.py')
+from django.core.files.storage import Storage, default_storage

('django/db/models/fields', 'files.py')
+from django.core.files.utils import validate_file_name

('django/db/models/fields', 'files.py')
+from django.db.models.query_utils import DeferredAttribute

('django/db/models/fields', 'mixins.py')
+from django.core import checks

('django/db/models/fields', 'related.py')
-from django.conf import SettingsReference

('django/db/models/fields', 'related.py')
+from django.conf import SettingsReference, settings

('django/db/models/fields', '__init__.py')
-from django.core.exceptions import FieldDoesNotExist  # NOQA

('django/db/models/fields', '__init__.py')
-        from django.db.models.expressions import OuterRef

('django/db/models/fields', 'reverse_related.py')
+from django.utils.hashable import make_hashable

('django/db/models/fields', 'related_lookups.py')
-            from django.db.models.sql.where import WhereNode, SubqueryConstraint, AND, OR

('django/db/models/fields', 'related_lookups.py')
+            from django.db.models.sql.where import (

('django/db/models/fields', 'related_lookups.py')
-            from django.db.models.sql.where import WhereNode, AND

('django/db/models/fields', 'related_lookups.py')
+            from django.db.models.sql.where import AND, WhereNode

('django/db/models/sql', 'compiler.py')
-import functools

('django/db/models/sql', 'compiler.py')
-import warnings

('django/db/models/sql', 'compiler.py')
+from functools import partial

('django/db/models/sql', 'compiler.py')
+from django.db import DatabaseError, NotSupportedError

('django/db/models/sql', 'compiler.py')
-from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Subquery

('django/db/models/sql', 'compiler.py')
-from django.db.models.query_utils import QueryWrapper, select_related_descend

('django/db/models/sql', 'compiler.py')
+from django.db.models.expressions import F, OrderBy, RawSQL, Ref, Value

('django/db/models/sql', 'compiler.py')
+from django.db.models.functions import Cast, Random

('django/db/models/sql', 'compiler.py')
+from django.db.models.query_utils import Q, select_related_descend

('django/db/models/sql', 'compiler.py')
-from django.db.utils import DatabaseError, NotSupportedError

('django/db/models/sql', 'compiler.py')
-from django.utils.deprecation import (

('django/db/models/sql', 'compiler.py')
-from django.utils.inspect import func_supports_parameter

('django/db/models/sql', 'compiler.py')
+from django.utils.functional import cached_property

('django/db/models/sql', 'compiler.py')
+from django.utils.hashable import make_hashable

('django/db/models/sql', 'compiler.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/models/sql', 'query.py')
+import copy

('django/db/models/sql', 'query.py')
-from collections import Counter, OrderedDict, namedtuple

('django/db/models/sql', 'query.py')
+import inspect

('django/db/models/sql', 'query.py')
+import sys

('django/db/models/sql', 'query.py')
+import warnings

('django/db/models/sql', 'query.py')
+from collections import Counter, namedtuple

('django/db/models/sql', 'query.py')
-from django.core.exceptions import (

('django/db/models/sql', 'query.py')
+from django.core.exceptions import FieldDoesNotExist, FieldError

('django/db/models/sql', 'query.py')
-from django.db.models.expressions import Col, F, Ref, SimpleCol

('django/db/models/sql', 'query.py')
+from django.db.models.expressions import (

('django/db/models/sql', 'query.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/db/models/sql', 'query.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/models/sql', 'subqueries.py')
-from django.db import connections

('django/db/models/sql', 'constants.py')
-import re

('django/db/models/sql', 'constants.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/db/models/sql', '__init__.py')
-from django.core.exceptions import EmptyResultSet

('django/db/models/sql', 'datastructures.py')
-from django.core.exceptions import EmptyResultSet  # NOQA: F401

('django/views', 'csrf.py')
-    from django.middleware.csrf import REASON_NO_REFERER, REASON_NO_CSRF_COOKIE

('django/views', 'csrf.py')
+    from django.middleware.csrf import REASON_NO_CSRF_COOKIE, REASON_NO_REFERER

('django/views', 'debug.py')
+import warnings

('django/views', 'debug.py')
-from django.http import HttpResponse, HttpResponseNotFound

('django/views', 'debug.py')
+from django.http import Http404, HttpResponse, HttpResponseNotFound

('django/views', 'debug.py')
-from django.urls import Resolver404, resolve

('django/views', 'debug.py')
+from django.urls import resolve

('django/views', 'debug.py')
-from django.utils.encoding import force_text

('django/views', 'debug.py')
+from django.utils.encoding import force_str

('django/views', 'debug.py')
+from django.utils.regex_helper import _lazy_re_compile

('django/views', 'debug.py')
+    default_exception_reporter_class = import_string(settings.DEFAULT_EXCEPTION_REPORTER)

('django/views', 'i18n.py')
-from urllib.parse import unquote

('django/views', 'i18n.py')
-from django.utils.http import is_safe_url

('django/views', 'i18n.py')
+from django.utils.http import url_has_allowed_host_and_scheme

('django/views/generic', 'list.py')
-from django.db.models.query import QuerySet

('django/views/generic', 'list.py')
+from django.db.models import QuerySet

('django/conf', '__init__.py')
-from django.utils.deprecation import (

('django/conf', '__init__.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/conf', '__init__.py')
+from django.utils.functional import LazyObject, empty

('django/conf', '__init__.py')
-from django.utils.functional import LazyObject, empty

('django/conf', '__init__.py')
+        from django.urls import get_script_prefix

('django/conf/urls', '__init__.py')
+import warnings

('django/conf/urls', '__init__.py')
+from django.utils.deprecation import RemovedInDjango40Warning

('django/apps', 'config.py')
+import inspect

('django/apps', 'config.py')
+import warnings

('django/apps', 'config.py')
-from django.utils.module_loading import module_has_submodule

('django/apps', 'config.py')
+from django.utils.deprecation import RemovedInDjango41Warning

('django/apps', 'config.py')
+from django.utils.functional import cached_property

('django/apps', 'config.py')
+from django.utils.module_loading import import_string, module_has_submodule

('django/apps', 'config.py')
+        from django.conf import settings

('django/apps', 'config.py')
+        # If import_module succeeds, entry points to the app module.

('django/apps', 'config.py')
-            # If import_module succeeds, entry is a path to an app module,

('django/apps', 'config.py')
-            module = import_module(entry)

('django/apps', 'config.py')
-            # Track that importing as an app module failed. If importing as an

('django/apps', 'config.py')
+            app_module = import_module(entry)

('django/apps', 'config.py')
+                mod = import_module(mod_path)

('django/apps', 'config.py')
+        # If import_string succeeds, entry is an app config class.

('django/apps', 'config.py')
+                app_config_class = import_string(entry)

('django/apps', 'config.py')
+        # If both import_module and import_string failed, it means that entry

('django/apps', 'config.py')
+                # We could simply re-trigger the string import exception, but

('django/apps', 'config.py')
+                # possible if the module at mod_path cannot be imported.

('django/apps', 'config.py')
+                mod = import_module(mod_path)

('django/apps', 'config.py')
-        mod = import_module(mod_path)

('django/apps', 'config.py')
-                # If importing as an app module failed, check if the module

('django/apps', 'config.py')
+                # Re-trigger the module import exception.

('django/apps', 'registry.py')
-from collections import Counter, OrderedDict, defaultdict

('django/apps', 'registry.py')
+from collections import Counter, defaultdict






