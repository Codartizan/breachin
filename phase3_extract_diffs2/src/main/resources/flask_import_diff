('', 'setup.py')
-import io

('', 'setup.py')
-import re

('', 'setup.py')
-from collections import OrderedDict

('', 'setup.cfg')
+    # import at top, too many circular import fixes

('', 'setup.cfg')
+ignore_missing_imports = True

('', 'setup.cfg')
+ignore_missing_imports = True

('', 'setup.cfg')
+ignore_missing_imports = True

('', 'CHANGES.rst')
+    tracebacks when importing the application. :issue:`4307`

('', 'CHANGES.rst')
+    imports in user projects. :issue:`4024`

('', 'CHANGES.rst')
+    ``Flask(import_name)``. This reverts 1.0's behavior of always

('', 'CHANGES.rst')
+-   Fixes for PEP451 import loaders and pytest 5.x. :issue:`3275`

('', 'CHANGES.rst')
-  within the imported application module.

('', 'CHANGES.rst')
+    ``ImportError`` occurs within the imported application module.

('', 'CHANGES.rst')
-  useful message explaining why it is raised when a PEP 302 import hook is used

('', 'CHANGES.rst')
+    import hook is used without an ``is_package()`` method.

('', 'CHANGES.rst')
-  not through a context processor which makes it available even in imported

('', 'CHANGES.rst')
-  context which makes them available in imported templates.  One has to be

('', 'CHANGES.rst')
+    imported templates by default.

('', 'CHANGES.rst')
+    the template context which makes them available in imported

('', 'CHANGES.rst')
-- The :class:`flask.Flask` class will avoid importing the provided import name

('', 'CHANGES.rst')
-  instances programmatically.  The Flask class will fall back to using import

('', 'CHANGES.rst')
-  import name is inside a zip archive (usually a .egg) prior to Python 2.7.

('', 'CHANGES.rst')
+-   The :class:`flask.Flask` class will avoid importing the provided

('', 'CHANGES.rst')
+    import name if it can (the required first parameter), to benefit

('', 'CHANGES.rst')
+    will fall back to using import on systems with custom module hooks,

('', 'CHANGES.rst')
+    e.g. Google App Engine, or when the import name is inside a zip

('', 'CHANGES.rst')
-  feedback when users forget to import view code ahead of time.

('', 'CHANGES.rst')
-- Implemented the virtual :mod:`flask.ext` package to import extensions from.

('', 'CHANGES.rst')
+    earlier feedback when users forget to import view code ahead of

('', 'CHANGES.rst')
+-   Implemented the virtual :mod:`flask.ext` package to import

('', 'CHANGES.rst')
-- Added missing future import that broke 2.5 compatibility.

('', 'CHANGES.rst')
+-   Added missing future import that broke 2.5 compatibility.

('examples/tutorial', 'setup.py')
-import io

('examples/tutorial', 'setup.py')
+from setuptools import setup

('examples/tutorial', 'setup.py')
-from setuptools import find_packages, setup

('examples/tutorial/flaskr', 'auth.py')
-from flask import (

('examples/tutorial/flaskr', 'auth.py')
-from werkzeug.security import check_password_hash, generate_password_hash

('examples/tutorial/flaskr', 'auth.py')
+from flask import Blueprint

('examples/tutorial/flaskr', 'auth.py')
+from flask import flash

('examples/tutorial/flaskr', 'auth.py')
+from flask import g

('examples/tutorial/flaskr', 'auth.py')
+from flask import redirect

('examples/tutorial/flaskr', 'auth.py')
+from flask import render_template

('examples/tutorial/flaskr', 'auth.py')
+from flask import request

('examples/tutorial/flaskr', 'auth.py')
+from flask import session

('examples/tutorial/flaskr', 'auth.py')
+from flask import url_for

('examples/tutorial/flaskr', 'auth.py')
+from werkzeug.security import check_password_hash

('examples/tutorial/flaskr', 'auth.py')
+from werkzeug.security import generate_password_hash

('examples/tutorial/flaskr', 'db.py')
-from flask import current_app, g

('examples/tutorial/flaskr', 'db.py')
+from flask import current_app

('examples/tutorial/flaskr', 'db.py')
+from flask import g

('examples/tutorial/flaskr', 'blog.py')
-from flask import (

('examples/tutorial/flaskr', 'blog.py')
+from flask import Blueprint

('examples/tutorial/flaskr', 'blog.py')
+from flask import flash

('examples/tutorial/flaskr', 'blog.py')
+from flask import g

('examples/tutorial/flaskr', 'blog.py')
+from flask import redirect

('examples/tutorial/flaskr', 'blog.py')
+from flask import render_template

('examples/tutorial/flaskr', 'blog.py')
+from flask import request

('examples/tutorial/flaskr', 'blog.py')
+from flask import url_for

('examples/javascript', 'setup.py')
-import io

('examples/javascript', 'setup.py')
+from setuptools import setup

('examples/javascript', 'setup.py')
-from setuptools import find_packages, setup

('examples/javascript/js_example', '__init__.py')
-from js_example import views

('examples/javascript/js_example', '__init__.py')
+from js_example import views  # noqa: F401

('examples/javascript/js_example', 'views.py')
-from flask import jsonify, render_template, request

('examples/javascript/js_example', 'views.py')
+from flask import jsonify

('examples/javascript/js_example', 'views.py')
+from flask import render_template

('examples/javascript/js_example', 'views.py')
+from flask import request






