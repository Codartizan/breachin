('', 'Makefile')
+	python3 -c "import pytest" > /dev/null 2>&1 || python3 -m pip install pytest

('', 'Makefile')
+	python3 -c "import coverage" > /dev/null 2>&1 || python3 -m pip install coverage

('', 'Makefile')
+	python3 -c "import pytest" > /dev/null 2>&1 || python3 -m pip install pytest

('', 'Makefile')
+	python3 -c "import pytest_valgrind" > /dev/null 2>&1 || python3 -m pip install pytest-valgrind

('', 'Makefile')
+	python3 -c "import markdown2" > /dev/null 2>&1 || python3 -m pip install markdown2

('', 'Makefile')
+	python3 -c "import tox" > /dev/null 2>&1 || python3 -m pip install tox

('', 'Makefile')
+	python3 -c "import black" > /dev/null 2>&1 || python3 -m pip install black

('', 'Makefile')
+	python3 -c "import isort" > /dev/null 2>&1 || python3 -m pip install isort

('', '.appveyor.yml')
+- '%PYTHON%\%EXECUTABLE% -c "from PIL import Image"'

('.ci', 'test.sh')
+python3 -c "from PIL import Image"

('winbuild', 'build_prepare.py')
+import platform

('Tests', 'test_imagecms.py')
-from .helper import assert_image, assert_image_equal, assert_image_similar, hopper

('Tests', 'test_imagecms.py')
+from .helper import (

('Tests', 'test_qt_image_toqimage.py')
-from PIL import Image, ImageQt

('Tests', 'test_qt_image_toqimage.py')
+from PIL import ImageQt

('Tests', 'test_qt_image_toqimage.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_qt_image_toqimage.py')
+from .helper import assert_image_equal, assert_image_equal_tofile, hopper

('Tests', 'test_file_msp.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_file_msp.py')
+from .helper import assert_image_equal, assert_image_equal_tofile, hopper

('Tests', 'test_image_array.py')
+numpy = pytest.importorskip("numpy", reason="NumPy not installed")

('Tests', 'test_file_xbm.py')
-from PIL import Image

('Tests', 'test_file_xbm.py')
+from PIL import Image, XbmImagePlugin

('Tests', 'test_font_pcf.py')
-from .helper import assert_image_equal, assert_image_similar, skip_unless_feature

('Tests', 'test_font_pcf.py')
+from .helper import (

('Tests', 'test_file_psd.py')
+import warnings

('Tests', 'test_file_dcx.py')
+import warnings

('Tests', 'test_imageshow.py')
+    pytest.importorskip("IPython", reason="IPython not installed")

('Tests', 'test_qt_image_qapplication.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_qt_image_qapplication.py')
+from .helper import assert_image_equal, assert_image_equal_tofile, hopper

('Tests', 'test_qt_image_qapplication.py')
+        from PyQt6.QtCore import QPoint

('Tests', 'test_qt_image_qapplication.py')
+        from PyQt6.QtGui import QImage, QPainter, QRegion

('Tests', 'test_qt_image_qapplication.py')
+        from PyQt6.QtWidgets import QApplication, QHBoxLayout, QLabel, QWidget

('Tests', 'test_qt_image_qapplication.py')
+        from PySide6.QtCore import QPoint

('Tests', 'test_qt_image_qapplication.py')
+        from PySide6.QtGui import QImage, QPainter, QRegion

('Tests', 'test_qt_image_qapplication.py')
+        from PyQt5.QtCore import QPoint

('Tests', 'test_qt_image_qapplication.py')
+        from PyQt5.QtGui import QImage, QPainter, QRegion

('Tests', 'test_qt_image_qapplication.py')
+        from PySide2.QtCore import QPoint

('Tests', 'test_qt_image_qapplication.py')
+        from PySide2.QtGui import QImage, QPainter, QRegion

('Tests', 'test_file_png.py')
+import sys

('Tests', 'test_file_png.py')
+import warnings

('Tests', 'test_file_png.py')
+    import defusedxml.ElementTree as ElementTree

('Tests', 'test_imagegrab.py')
-from .helper import assert_image, assert_image_equal_tofile, skip_unless_feature

('Tests', 'test_imagegrab.py')
+from .helper import assert_image_equal_tofile, skip_unless_feature

('Tests', 'test_file_bmp.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_file_bmp.py')
+from .helper import (

('Tests', 'test_file_im.py')
+import warnings

('Tests', 'test_file_im.py')
-from .helper import assert_image_equal, hopper, is_pypy

('Tests', 'test_file_im.py')
+from .helper import assert_image_equal_tofile, hopper, is_pypy

('Tests', 'test_image_rotate.py')
-from .helper import assert_image_equal, assert_image_similar, hopper

('Tests', 'test_image_rotate.py')
+from .helper import (

('Tests', 'test_pickle.py')
-from PIL import Image

('Tests', 'test_pickle.py')
+from PIL import Image, ImageDraw, ImageFont

('Tests', 'test_pickle.py')
-from .helper import skip_unless_feature

('Tests', 'test_pickle.py')
+from .helper import assert_image_equal, skip_unless_feature

('Tests', 'test_file_blp.py')
-from PIL import Image

('Tests', 'test_file_blp.py')
+import pytest

('Tests', 'test_file_blp.py')
-from .helper import assert_image_equal

('Tests', 'test_file_blp.py')
+from PIL import BlpImagePlugin, Image

('Tests', 'test_file_blp.py')
+from .helper import (

('Tests', 'test_file_dds.py')
-from .helper import assert_image_equal

('Tests', 'test_file_dds.py')
+from .helper import assert_image_equal, assert_image_equal_tofile, hopper

('Tests', 'test_file_webp_metadata.py')
+import pytest

('Tests', 'test_file_webp_metadata.py')
-from .helper import skip_unless_feature

('Tests', 'test_file_webp_metadata.py')
+from .helper import mark_if_feature_version, skip_unless_feature

('Tests', 'test_file_sgi.py')
-from .helper import assert_image_equal, assert_image_similar, hopper

('Tests', 'test_file_sgi.py')
+from .helper import (

('Tests', 'test_file_webp_animated.py')
+from packaging.version import parse as parse_version

('Tests', 'test_file_webp_animated.py')
-from PIL import Image

('Tests', 'test_file_webp_animated.py')
+from PIL import Image, features

('Tests', 'test_imagewin_pointers.py')
-import ctypes

('Tests', 'test_imagewin_pointers.py')
+    import ctypes

('Tests', 'test_image_transpose.py')
-from PIL.Image import (

('Tests', 'test_image_transpose.py')
+from PIL.Image import Transpose

('Tests', 'test_file_ico.py')
+import os

('Tests', 'test_file_ico.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_file_ico.py')
+from .helper import assert_image_equal, assert_image_equal_tofile, hopper

('Tests', 'test_bmp_reference.py')
-import pytest

('Tests', 'test_bmp_reference.py')
+import warnings

('Tests', 'test_image.py')
+import sys

('Tests', 'test_image.py')
+import warnings

('Tests', 'test_image.py')
-import PIL

('Tests', 'test_image.py')
-from PIL import Image, ImageDraw, ImagePalette, ImageShow, UnidentifiedImageError

('Tests', 'test_image.py')
+from PIL import Image, ImageDraw, ImagePalette, UnidentifiedImageError

('Tests', 'test_imageqt.py')
+import warnings

('Tests', 'test_imageqt.py')
-from .helper import hopper

('Tests', 'test_imageqt.py')
+from .helper import assert_image_similar, hopper

('Tests', 'test_imageqt.py')
+        from PyQt6.QtGui import qRgb

('Tests', 'test_file_ftex.py')
-from PIL import Image

('Tests', 'test_file_ftex.py')
+import pytest

('Tests', 'test_file_ftex.py')
-from .helper import assert_image_equal, assert_image_similar

('Tests', 'test_file_ftex.py')
+from PIL import FtexImagePlugin, Image

('Tests', 'test_file_ftex.py')
+from .helper import assert_image_equal_tofile, assert_image_similar

('Tests', 'test_file_wmf.py')
-from .helper import assert_image_similar, hopper

('Tests', 'test_file_wmf.py')
+from .helper import assert_image_similar_tofile, hopper

('Tests', 'test_imagepalette.py')
-from .helper import assert_image_equal

('Tests', 'test_imagepalette.py')
+from .helper import assert_image_equal, assert_image_equal_tofile

('Tests', 'test_file_spider.py')
+import warnings

('Tests', 'test_file_spider.py')
-from .helper import assert_image_equal, hopper, is_pypy

('Tests', 'test_file_spider.py')
+from .helper import assert_image_equal_tofile, hopper, is_pypy

('Tests', 'test_file_eps.py')
-from .helper import assert_image_similar, hopper, skip_unless_feature

('Tests', 'test_file_eps.py')
+from .helper import (

('Tests', 'test_image_resize.py')
-from .helper import assert_image_equal, assert_image_similar, hopper

('Tests', 'test_image_resize.py')
+from .helper import (

('Tests', 'test_image_access.py')
-import ctypes

('Tests', 'test_image_access.py')
+    import numpy

('Tests', 'test_image_access.py')
+        import ctypes

('Tests', 'test_font_pcf_charsets.py')
-from .helper import assert_image_equal, assert_image_similar, skip_unless_feature

('Tests', 'test_font_pcf_charsets.py')
+from .helper import (

('Tests', 'test_image_putdata.py')
+import pytest

('Tests', 'test_file_sun.py')
-from .helper import assert_image_equal, assert_image_similar, hopper

('Tests', 'test_file_sun.py')
+from .helper import assert_image_equal_tofile, assert_image_similar, hopper

('Tests', 'test_file_webp.py')
+import sys

('Tests', 'test_file_webp.py')
+import warnings

('Tests', 'test_image_getpalette.py')
+from PIL import Image

('Tests', 'test_file_fli.py')
+import warnings

('Tests', 'test_file_fli.py')
-from .helper import assert_image_equal, is_pypy

('Tests', 'test_file_fli.py')
+from .helper import assert_image_equal_tofile, is_pypy

('Tests', 'test_imagemorph.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_imagemorph.py')
+from .helper import assert_image_equal_tofile, hopper

('Tests', 'test_imagefile.py')
-from PIL import EpsImagePlugin, Image, ImageFile, features

('Tests', 'test_imagefile.py')
+from PIL import BmpImagePlugin, EpsImagePlugin, Image, ImageFile, _binary, features

('Tests', 'test_file_gbr.py')
-from .helper import assert_image_equal

('Tests', 'test_file_gbr.py')
+from .helper import assert_image_equal_tofile

('Tests', 'test_file_ppm.py')
+import sys

('Tests', 'test_file_ppm.py')
+from io import BytesIO

('Tests', 'test_file_ppm.py')
-from PIL import Image

('Tests', 'test_file_ppm.py')
+from PIL import Image, UnidentifiedImageError

('Tests', 'test_file_ppm.py')
-from .helper import assert_image_equal, assert_image_similar, hopper

('Tests', 'test_file_ppm.py')
+from .helper import assert_image_equal_tofile, assert_image_similar, hopper

('Tests', 'test_file_tiff.py')
+import warnings

('Tests', 'test_file_tiff.py')
-from PIL import Image, TiffImagePlugin

('Tests', 'test_file_tiff.py')
-from PIL.TiffImagePlugin import RESOLUTION_UNIT, SUBIFD, X_RESOLUTION, Y_RESOLUTION

('Tests', 'test_file_tiff.py')
+from PIL import Image, ImageFile, TiffImagePlugin

('Tests', 'test_file_tiff.py')
+from PIL.TiffImagePlugin import RESOLUTION_UNIT, X_RESOLUTION, Y_RESOLUTION

('Tests', 'test_file_tiff.py')
+    import defusedxml.ElementTree as ElementTree

('Tests', 'test_file_tga.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_file_tga.py')
+from .helper import assert_image_equal, assert_image_equal_tofile, hopper

('Tests', 'test_file_jpeg2k.py')
+import os

('Tests', 'test_file_jpeg2k.py')
-from PIL import Image, ImageFile, Jpeg2KImagePlugin, features

('Tests', 'test_file_jpeg2k.py')
+from PIL import Image, ImageFile, Jpeg2KImagePlugin, UnidentifiedImageError, features

('Tests', 'test_image_resample.py')
-from .helper import assert_image_equal, assert_image_similar, hopper

('Tests', 'test_image_resample.py')
+from .helper import (

('Tests', 'test_image_quantize.py')
+from packaging.version import parse as parse_version

('Tests', 'test_image_quantize.py')
-from PIL import Image

('Tests', 'test_image_quantize.py')
+from PIL import Image, features

('Tests', 'test_image_quantize.py')
-from .helper import assert_image, assert_image_similar, hopper, is_ppc64le

('Tests', 'test_image_quantize.py')
+from .helper import assert_image_similar, hopper, is_ppc64le, skip_unless_feature

('Tests', 'test_file_palm.py')
-from .helper import IMCONVERT, assert_image_equal, hopper, imagemagick_available

('Tests', 'test_file_palm.py')
+from .helper import assert_image_equal, hopper, magick_command

('Tests', 'test_file_icns.py')
-import sys

('Tests', 'test_file_icns.py')
+import os

('Tests', 'test_file_icns.py')
+import warnings

('Tests', 'test_file_icns.py')
-from PIL import IcnsImagePlugin, Image, features

('Tests', 'test_file_icns.py')
+from PIL import IcnsImagePlugin, Image, _binary, features

('Tests', 'test_file_icns.py')
-from .helper import assert_image_equal, assert_image_similar

('Tests', 'test_file_icns.py')
+from .helper import assert_image_equal, assert_image_similar_tofile

('Tests', 'test_file_libtiff.py')
-from ctypes import c_float

('Tests', 'test_file_libtiff.py')
+from PIL.TiffImagePlugin import SAMPLEFORMAT, STRIPOFFSETS, SUBIFD

('Tests', 'test_map.py')
-from .helper import is_win32

('Tests', 'test_image_putpalette.py')
-from .helper import assert_image_equal, hopper

('Tests', 'test_image_putpalette.py')
+from .helper import assert_image_equal, assert_image_equal_tofile, hopper

('Tests', 'test_file_pdf.py')
-from .helper import hopper

('Tests', 'test_file_pdf.py')
+from .helper import hopper, mark_if_feature_version

('Tests', 'test_file_pdf.py')
+    # The important thing is it doesn't timeout, cause a ReDoS (CVE-2021-25292).

('Tests', 'test_file_mcidas.py')
-from .helper import assert_image_equal

('Tests', 'test_file_mcidas.py')
+from .helper import assert_image_equal_tofile

('Tests', 'test_file_wal.py')
+from .helper import assert_image_equal_tofile

('Tests', 'test_psdraw.py')
-from io import StringIO

('Tests', 'test_psdraw.py')
+from io import BytesIO

('Tests', 'test_psdraw.py')
+import pytest

('Tests', 'test_numpy.py')
+import warnings

('Tests', 'test_file_tar.py')
+import warnings

('Tests', 'test_imagemath.py')
+import pytest

('Tests', 'test_file_gif.py')
+import warnings

('Tests', 'test_file_webp_alpha.py')
-from .helper import assert_image_equal, assert_image_similar, hopper

('Tests', 'test_file_webp_alpha.py')
+from .helper import (

('Tests', 'test_file_mpo.py')
+import warnings

('Tests', 'test_imagefontctl.py')
-from packaging.version import parse as parse_version

('Tests', 'test_imagefontctl.py')
-from PIL import Image, ImageDraw, ImageFont, features

('Tests', 'test_imagefontctl.py')
-from .helper import (

('Tests', 'test_imagefontctl.py')
+from PIL import Image, ImageDraw, ImageFont

('Tests', 'test_imagefontctl.py')
+from .helper import assert_image_similar_tofile, skip_unless_feature

('Tests', 'test_file_jpeg.py')
+import warnings

('Tests', 'test_file_jpeg.py')
+    import defusedxml.ElementTree as ElementTree

('src/PIL', 'ImageMode.py')
+import sys

('src/PIL', 'ImageMode.py')
-        from . import Image

('src/PIL', 'PngImagePlugin.py')
+from enum import IntEnum

('src/PIL', 'ImageFile.py')
+import itertools

('src/PIL', 'ImageFile.py')
-import warnings

('src/PIL', 'ImageFile.py')
-                        import mmap

('src/PIL', 'ImageFile.py')
+                    import mmap

('src/PIL', 'FitsStubImagePlugin.py')
-from . import Image, ImageFile

('src/PIL', 'FitsStubImagePlugin.py')
+import warnings

('src/PIL', 'FitsStubImagePlugin.py')
+from . import FitsImagePlugin, Image, ImageFile

('src/PIL', 'GifImagePlugin.py')
+from enum import IntEnum

('src/PIL', 'GifImagePlugin.py')
-        from copy import copy

('src/PIL', 'GifImagePlugin.py')
+                from copy import copy

('src/PIL', 'ImageQt.py')
+            from PyQt6.QtCore import QBuffer, QIODevice

('src/PIL', 'ImageQt.py')
+            from PyQt6.QtGui import QImage, QPixmap, qRgba

('src/PIL', 'ImageCms.py')
+import warnings

('src/PIL', 'ImageCms.py')
+from enum import IntEnum

('src/PIL', 'ImageFilter.py')
-    import numpy

('src/PIL', 'ImageFilter.py')
+                import numpy

('src/PIL', '__init__.py')
-import sys

('src/PIL', '__init__.py')
-import warnings

('src/PIL', 'ImageDraw.py')
-from . import Image, ImageColor

('src/PIL', 'ImageDraw.py')
+from . import Image, ImageColor, ImageFont

('src/PIL', 'IcoImagePlugin.py')
-import struct

('src/PIL', 'IcoImagePlugin.py')
+from ._binary import o8

('src/PIL', 'IcoImagePlugin.py')
+from ._binary import o16le as o16

('src/PIL', 'IcoImagePlugin.py')
+from ._binary import o32le as o32

('src/PIL', '_tkinter_finder.py')
+import tkinter

('src/PIL', '_tkinter_finder.py')
+import warnings

('src/PIL', 'WalImageFile.py')
-import builtins

('src/PIL', 'WalImageFile.py')
+from . import Image, ImageFile

('src/PIL', 'WalImageFile.py')
+from ._binary import i32le as i32

('src/PIL', 'WalImageFile.py')
-from . import Image

('src/PIL', 'WalImageFile.py')
-from ._binary import i32le as i32

('src/PIL', 'BlpImagePlugin.py')
+import os

('src/PIL', 'BlpImagePlugin.py')
+import warnings

('src/PIL', 'BlpImagePlugin.py')
+from enum import IntEnum

('src/PIL', 'BlpImagePlugin.py')
-        from PIL.JpegImagePlugin import JpegImageFile

('src/PIL', 'BlpImagePlugin.py')
+        from .JpegImagePlugin import JpegImageFile

('src/PIL', 'ImageTk.py')
+        from . import _imagingtk

('src/PIL', 'ImageTk.py')
+                from cffi import FFI

('src/PIL', 'ImageTk.py')
-                from . import _imagingtk

('src/PIL', 'ImageTk.py')
-                        from cffi import FFI

('src/PIL', 'ImageOps.py')
+import re

('src/PIL', 'ImageShow.py')
-import tempfile

('src/PIL', 'ImageShow.py')
+import warnings

('src/PIL', 'ImageShow.py')
+        from PIL import ImageShow

('src/PIL', 'ImageShow.py')
+                "import os, sys, time; time.sleep(20); os.remove(sys.argv[1])",

('src/PIL', 'ImageShow.py')
+    from IPython.display import display as ipython_display

('src/PIL', 'WmfImagePlugin.py')
-from ._binary import i32le as dword

('src/PIL', 'TiffImagePlugin.py')
+import math

('src/PIL', 'TiffImagePlugin.py')
-from . import Image, ImageFile, ImagePalette, TiffTags

('src/PIL', 'TiffImagePlugin.py')
+from . import Image, ImageFile, ImageOps, ImagePalette, TiffTags

('src/PIL', 'TiffImagePlugin.py')
+from ._binary import i16be as i16

('src/PIL', 'TiffImagePlugin.py')
+from ._binary import i32be as i32

('src/PIL', 'ImagePalette.py')
+import warnings

('src/PIL', 'BmpImagePlugin.py')
+import os

('src/PIL', 'IcnsImagePlugin.py')
-import shutil

('src/PIL', 'IcnsImagePlugin.py')
-import subprocess

('src/PIL', 'IcnsImagePlugin.py')
-import tempfile

('src/PIL', 'DdsImagePlugin.py')
+from ._binary import o32le as o32

('src/PIL', 'Image.py')
+import re

('src/PIL', 'Image.py')
-import xml.etree.ElementTree

('src/PIL', 'Image.py')
+from enum import IntEnum

('src/PIL', 'Image.py')
+    import defusedxml.ElementTree as ElementTree

('src/PIL', 'Image.py')
-from . import (

('src/PIL', 'Image.py')
-from ._binary import i32le

('src/PIL', 'Image.py')
+from . import ImageMode, TiffTags, UnidentifiedImageError, __version__, _plugins

('src/PIL', 'Image.py')
+from ._binary import i32le, o32be, o32le

('src/PIL', 'Image.py')
-    from . import PILLOW_VERSION

('src/PIL', 'Image.py')
+        import numpy as np

('src/PIL', 'Image.py')
+            from . import ImagePalette

('src/PIL', 'Image.py')
+        from PIL import Image

('src/PIL', 'Image.py')
+        import numpy as np

('src/PIL', 'Image.py')
+        from . import TiffImagePlugin

('src/PIL', 'Image.py')
-                from .TiffImagePlugin import ImageFileDirectory_v2

('src/PIL', 'Image.py')
+                    from .TiffImagePlugin import ImageFileDirectory_v2

('src/PIL', 'PsdImagePlugin.py')
+from ._binary import si16be as si16

('src/PIL', 'JpegImagePlugin.py')
+import math

('src/PIL', 'ImageFont.py')
+from enum import IntEnum

('src/PIL', 'ImageFont.py')
-from . import Image, features

('src/PIL', 'ImageFont.py')
+from . import Image

('src/PIL', 'ImageFont.py')
-            from packaging.version import parse as parse_version

('src/PIL', 'ImageFont.py')
+            import warnings

('src/PIL', 'PpmImagePlugin.py')
+from ._binary import i16be as i16

('src/PIL', 'PpmImagePlugin.py')
+from ._binary import o8

('src/PIL', 'PpmImagePlugin.py')
+from ._binary import o32le as o32

('src/PIL', 'FtexImagePlugin.py')
+import warnings

('src/PIL', 'FtexImagePlugin.py')
+from enum import IntEnum






